<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>saltfactory&#39;s series</title>
    <description></description>
    <link>/series/</link>
    <atom:link href="/series/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 28 May 2015 16:12:19 +0900</pubDate>
    <lastBuildDate>Thu, 28 May 2015 16:12:19 +0900</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>모바일 앱 안에서 변화하는 외부 URL 문제를 NginX의 rewrite로 해결하기</title>
        <description>&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

&lt;p&gt;모바일 앱을 개발하면 외부 링크를 사용하여 터치를 하였을 때 모바일 브라우저로 링크를 열게 하는 코드를 작성할 수 있다. 때로는 외부 링크가 http 스키마가 아닌 어플리케이션을 열기 위한 스키마가 될 수 도 있다. 인터넷에서 URL은 URI의 서브셋으로 고유의 리소스 아이덴티티를 가지는 것임에도 불구하고 상황에 따라 URL이 사라지거나 변경될 수 있다. 예를 들면, &lt;a href=&quot;http://blog.saltfactory.net&quot;&gt;http://blog.saltfactory.net&lt;/a&gt; 이었던 URL이 서비스 변경으로 &lt;a href=&quot;http://weblog.saltfactory.net&quot;&gt;http://weblog.saltfactory.net&lt;/a&gt; 으로 변경될 수 있다는 것이다. 또는 서비스가 종료되어 더이상 존재하지 않는 URL이 되는 경우도 있다. 이런 문제를 해결하기 위해서 링크를 관리하는 방법이 필요했고 NginX를 사용하여 이 문제를 해결하는 방법을 소개한다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;외부-url-링크-문제&quot;&gt;외부 URL 링크 문제&lt;/h2&gt;

&lt;p&gt;모바일 앱을 개발할 때, 일반적으로 소개하는 메뉴에 외부 링크를 많이 사용한다. 예를들어, 사용자의 프로파일, SNS 링크, 게시판 연결등이다. 앱 내부에 네이티브하게 개발을 하기도 하지만 이미 만들어진 웹 사이트를 간단한 링크를 통해서 새로운 브라우저를 열어서 연결할 수 있도록 하는 경우가 많다. 만약 오래된 앱에 외부 URL을 터치 이벤트에 등록했다고 가정하자. 아래는 iOS 앱 속에 &amp;quot;개발자 홈페이지&amp;quot; 버튼을 누르면 사파리 브라우저를 열어서 링크를 보여주는 간단한 &lt;a href=&quot;https://developer.apple.com/swift/&quot;&gt;swift&lt;/a&gt;코드이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IBOutlet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;openBrowserButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IBAction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onOpenBrowserButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://me2day.net/saltfactory&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;bp&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;openBrowserButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;개발자 홈페이지&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIControlState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 me2day 서비스가 종료되면서 인터넷 상에서 디이상 앱 속에 넣어둔 URL은 유효한 주소가 되지 못한다. 실제로 me2day 서비스는 종료되었고, URL을 요청하면 다음과 같은 화면이 나타난다.
&lt;img src=&quot;http://assets.hibrainapps.net/images/var/albums/hbncloud/public/Screen_Shot%202015-05-06%20at%203_28_08%20PM.png?m=1430893668&quot; alt=&quot;&quot;&gt;
아마도 앱을 업데이트하지 않는 이상, 사용자들이 개발자의 홈페이지를 절대 열어볼 수 없을 것이다. me2day DNS 서버와 웹 서버 모두 개인이 가지고 있는 서버들이 아니라 redirect 설정도 할 수 없는 문제가 생긴다. 유일한 해결 방법은 URL 하나를 변경하기 위해 앱을 다시 빌드해서 버전을 올려 스토어에 등록을 해야한다. 우리는 이런 문제를 해결하기 위해서 &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html&quot;&gt;NginX의 rewrite 모듈 사용&lt;/a&gt;하여 외부 링크를 중개하는 웹 서버 환경을 구축하였다.&lt;/p&gt;

&lt;h2 id=&quot;nginx의-rewrite-사용하기&quot;&gt;NginX의 rewrite 사용하기&lt;/h2&gt;

&lt;p&gt;기존의 Apache 웹 서버를 사용해본 경험이 있으면 이미 해결 방법을 알고 있을 수도 있다. 우리는 NginX 서버를 사용하기 때문에 NginX의 rewrite를 사용하였다. NginX의 rewrite 모듈을 사용하는 방법은 아주 광법위하기 때문에 이 글에서 모두 소개한다는 것은 불가능하다. rewrite 모듈중에 우리가 사용한 특징은 특정 URL 요청이 들어오면 URL 이 포함하고 있는 &lt;a href=&quot;http://en.wikipedia.org/wiki/Query_string&quot;&gt;Query String&lt;/a&gt;에 있는 내용을 분석해서 파라미터로 넘어온 URL로 다시 요청을 시키도록 지시하는 것이다.&lt;/p&gt;

&lt;p&gt;Nginx의 서버 설정은 &lt;code&gt;server&lt;/code&gt; 안에서 이루어 진다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;server {
    listen 80;
    server_name dev.saltfactory.net
    rewrite_log on;
    access_log /var/log/nginx/dev.saltfactory.net_access.log combined;
    error_log /var/log/nginx/dev.saltfactory.net_error.log
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우리는 &lt;a href=&quot;http://dev.saltfactory.net/call&quot;&gt;http://dev.saltfactory.net/call&lt;/a&gt; 으로 들어오는 요청만 적용을 할 것이다. &lt;code&gt;server&lt;/code&gt;에 &lt;code&gt;location&lt;/code&gt; 을 추가한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;server {
    ... 생략 ...
    location ^~ /call  {

    }
    ... 생략 ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 웹서버로 &lt;code&gt;/call&lt;/code&gt;로 시작하는 URL 요청이 들어오면 우리가 설정한 &lt;code&gt;location&lt;/code&gt;의 설정을 따를 것이다. 우리는 외부 URL을 가지고 리다이렉트를 시켜줄 것이다. 그래서 외부 URL을 가지고 이 요청을 하도록 하기 위해서 &lt;code&gt;redirect_url&lt;/code&gt;이라는 Query String으로 파라미터를 가질 수 있도록 하였다. 그리고 &lt;code&gt;redirect_url&lt;/code&gt;이 있을 경우만 rewrite를 할 수 있도록 설정한다. 예를들면, &lt;a href=&quot;http://dev.saltfactory.net/call?redirect_url=http://me2day.net/saltfactory.net&quot;&gt;http://dev.saltfactory.net/call?redirect_url=http://me2day.net/saltfactory.net&lt;/a&gt; 과 같이 요청을 하면 NginX가 파라미터를 분석해서 &lt;code&gt;redirect_url&lt;/code&gt;로 페이지를 다시 요청하게 할 것이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;server {
    ... 생략 ...
    location ^~ /call  {
        if ($args ~ &amp;quot;redirect_url=(.*)&amp;quot; ) {
            return 302 $1;
        }
    }
    ... 생략 ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 NginX는 앱에서 요청하는 외부 URL 링크를 중간에서 외부 URL 링크로 다시 작성하게하는 중간자 역활을 하게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;앱에서-url-설정&quot;&gt;앱에서 URL 설정&lt;/h2&gt;

&lt;p&gt;우리는 NginX 중간자에게 URL 요청을 할 것이고 중간자가 URL을 Rewrite 시켜줄 것이기 때문이다. 앱에서 코드는 다음과 같이 변경된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IBOutlet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;openBrowserButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IBAction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onOpenBrowserButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://dev.saltfactory.net/call?redirect_url=http://me2day.net/saltfactory&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;bp&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;openBrowserButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;개발자 홈페이지&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIControlState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우리는 이제 외부 URL이 변경되더라도 더이상 앱을 업데이트하지 않아도 된다. 예를 들어, &lt;a href=&quot;http://me2day.net/saltfactory&quot;&gt;http://me2day.net/saltfactory&lt;/a&gt; 라는 외부 URL이 더이상 유요하지 않게 되면, NginX 중간자에서 rewrite 하는 부분을 다음과 같이 수정하면 된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;server {
    ... 생략 ...
    location ^~ /call  {
        if ($args ~ &amp;quot;redirect_url=http://me2day.net/saltfactory&amp;quot;) {
            return 302 http://blog.saltfactory.net/;
        }

        if ($args ~ &amp;quot;redirect_url=(.*)&amp;quot; ) {
            return 302 $1;
        }
    }
    ... 생략 ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 앱에서 &lt;a href=&quot;http://me2day.net/saltfactory&quot;&gt;http://me2day.net/saltfactory&lt;/a&gt; 라는 유효하지 않는 URL을 요청하더라도 NginX 중간자가 새로운 &lt;a href=&quot;http://blog.saltfactory.net&quot;&gt;http://blog.saltfactory.net&lt;/a&gt; 으로 rewrite 시켜주기 때문에 앱을 수정하지 않고도 외부 URL 링크 문제를 해결할 수 있다.
&lt;img src=&quot;http://assets.hibrainapps.net/images/var/albums/hbncloud/public/Screen_Shot%202015-05-06%20at%203_27_42%20PM.png?m=1430893686&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;모바일 앱을 개발하면서 외부 URL 링크를 사용하는 것은 아주 사소하지만 큰 문제를 일으키기도 한다. 외부에 URL을 사용하는 것은 URL이 변화지 않는다는 전제 조건을 가지고 만들어야하지만, 최근 서비스들은 쉽게 사라지거나 형태가 변형되기 때문에 외부 URL 주소를 프로그램 안에 정적으로 만들어두면 문제를 일으키게 된다. 이 글에서는 간단한 예제를 보여줬지만 실제 민감한 서비스의 경우 외부 URL링크 때문에 큰 문제를 가져올 수도 있다. 우리는 그래서 앱을 수정하지 않고 NginX의 rewrite 모듈을 사용하여 URL을 다시 작성하는 중간자를 만들었다. 앱은 NginX 중간자에게 외부 URL을 redirect_url 파라미터로 요청할 것이고 NginX는 앱에서 부터 요청 받은 URL을 외부 URL로 rewrite하도록 해 준다. 이렇게 NginX로 만든 중간자를 사용해서 외부 URL이 문제가 발생했을 때, 다른 URL로 바꾸어서 rewrite하여 앱에서 유효하지 못한 URL을 찾는 문제를 해결할 수 있을 것이다.&lt;/p&gt;

&lt;h2 id=&quot;연구원-소개&quot;&gt;연구원 소개&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;작성자 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;송성광&lt;/a&gt; 개발 연구원&lt;/li&gt;
&lt;li&gt;블로그 : &lt;a href=&quot;http://blog.saltfactory.net&quot;&gt;http://blog.saltfactory.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;이메일 : &lt;a href=&quot;mailto:saltfactory@gmail.com&quot;&gt;saltfactory@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;트위터 : &lt;a href=&quot;https://twitter.com/saltfactory&quot;&gt;@saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;페이스북 : &lt;a href=&quot;https://facebook.com/salthub&quot;&gt;https://facebook.com/salthub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;연구소 : &lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설연구소&lt;/li&gt;
&lt;li&gt;연구실 : &lt;a href=&quot;http://dblab.changwon.ac.kr&quot;&gt;창원대학교 데이터베이스 연구실&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 06 May 2015 00:00:00 +0900</pubDate>
        <link>/series/nginx/redirect-using-with-parameter-on-nginx.html</link>
        <guid isPermaLink="true">/series/nginx/redirect-using-with-parameter-on-nginx.html</guid>
        
        <category>nginx</category>
        
        <category>mobile</category>
        
        <category>rewrite</category>
        
        
        <category>nginx</category>
        
      </item>
    
      <item>
        <title>개발용 PC와 운영체제 인코딩 설정 따른 톰캣 WAR 파일 한글 문제 해결</title>
        <description>&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

&lt;p&gt;Java를 이용하여 웹 프로젝트를 진행하면서 한번쯤은 캐릭터 문제를 겪게 된다. 이것은 프로그램을 작성할 때 한글(EUC_KR)을 함께 사용하기 때문이다. 내 PC에서 개발할 때는 문제가 없는데 특정 서버에 Deploy를 시키면 파일 안에 &lt;strong&gt;한글 주석&lt;/strong&gt;이 이상한 문자열로 깨어지거나 HTTP 요청을 할 때 한글이 제대로 표현되지 않는 문제 등을 만날 수 있다. 이번 포스팅은 Java 프로그램을 작성해서 Tomcat 서버에 Deploy를 시키고 난 이후 war 파일이 풀렸을 때 war 안에 들어 있던 파일 속의 한글이 깨어지는 문제를 해결하는 방법을 소개한다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;개발-pc-환경&quot;&gt;개발 PC 환경&lt;/h2&gt;

&lt;p&gt;최근 웹 개발은 Mac을 이용하거나 Ubuntu와 같은 리눅스 데스크탑 환경을 많이 사용한다. Mac과 Ubuntu는 특별한 설정을 하지 않으면 기본적으로 UTF-8 환경을 가진다. &lt;code&gt;locale&lt;/code&gt; 명령어를 사용해서 내 컴퓨터의 설정을 확인해 볼 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;locale
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;LANG=
LC_COLLATE=&amp;quot;C&amp;quot;
LC_CTYPE=&amp;quot;UTF-8&amp;quot;
LC_MESSAGES=&amp;quot;C&amp;quot;
LC_MONETARY=&amp;quot;C&amp;quot;
LC_NUMERIC=&amp;quot;C&amp;quot;
LC_TIME=&amp;quot;C&amp;quot;
LC_ALL=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 UTF-8 로 사용되고 있는 Mac에서 IntelliJ 와 같은 응용 프로그램을 사용해서 파일을 생성하게 되면 파일은 기본적으로 System encoding을 따르기 때문에 파일은 &lt;strong&gt;UTF-8&lt;/strong&gt;로 만들어지게 된다. 만약 Windows를 사용한다면 CP959 캐릭터 기반으로 만들어지게 될 것이다. &lt;strong&gt;IntelliJ&lt;/strong&gt;의 &lt;strong&gt;Preferences&lt;/strong&gt;를 열어서 확인하면 기본 &lt;strong&gt;IDE Encoding&lt;/strong&gt;, &lt;strong&gt;Project Encoding&lt;/strong&gt;, &lt;strong&gt;Default encoding for properties files&lt;/strong&gt;를 설정할 수 있는 것을 확인할 수 있다. 만약 Windows PC에서 개발을 한다면 이 정보를 잘 확인해서 서버환경과 동일하게 만드는 것이 좋다.
&lt;img src=&quot;http://assets.hibrainapps.net/images/var/albums/posts/Screen%20Shot%202015-03-20%20at%203_35_13%20PM-01.png?m=1426842028&quot; alt=&quot;&quot;&gt;
개발 PC 환경은 CP949나 EUC_KR 일 경우 서버에서 파일을 열게 되면 한글이 깨어지기 때문이다.&lt;/p&gt;

&lt;h2 id=&quot;jvm-환경&quot;&gt;JVM 환경&lt;/h2&gt;

&lt;p&gt;Java로 프로젝트를 진행하고 있다면 현재 사용하고 있는 JVM의 환경이 어떤지 확인해 둘 필요가 있다. JVM은 파일을 바이너리코드로 변경해서 어떠한 JVM 환경에서도 운영할 수 있게 만들어주는데 이때 한글이 깨어지지 않게 동작하게 하기 위해서는 JVM의 환경을 알아두는게 좋다. JVM은 OS의 환경 기반으로 동작한다. 다음 코드를 사용해서 운영체제와 파일 인코딩을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;먼저 JVM의 인코딩을 알아보자.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;new OutputStreamWriter(new ByteArrayOutputStream()).getEncoding();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음은 파일 인코딩을 알아보자.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;System.getProperty(&amp;quot;file.encoding&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;두가지 설정을 jar로 바로 확인할 수 있도록 github에 jar를 등록해 두었다. git에서 소스를 clone 받아서 &lt;code&gt;EncodingDetector.jar&lt;/code&gt;를 실행하면 된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git clone https://github.com/saltfactory/EncodingDetector.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;시스템 환경을 확인하기 위해서는 &lt;code&gt;system&lt;/code&gt;을 입력한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;java -jar EncodingDetector.jar system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파일 인코딩을 확인하기 위해서는 &lt;code&gt;file&lt;/code&gt;을 입력한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;java -jar EncodingDetector.jar file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;두가지 모두 확인하기 위해서는 &lt;code&gt;both&lt;/code&gt;를 입력한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;java -jar EncodingDetector.jar both
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;tomcat-환경&quot;&gt;Tomcat 환경&lt;/h2&gt;

&lt;p&gt;Tomcat은 JVM을 위에서 운영된다. 이런 이유로 Tomcat의 환경은 JVM의 환경을 따른다. 즉, Tomcat의 Web 관리 툴을 가지고 &lt;code&gt;.war&lt;/code&gt; 파일을 deploy 시키면  JVM이 가지고 있는 환경을 가지고 &lt;code&gt;.war&lt;/code&gt; 파일을 풀어서 운영한다. 내 PC에서 &lt;strong&gt;UTF-8&lt;/strong&gt; 환경으로 파일을 archive 시켰는데 서버 환경이 &lt;strong&gt;EUC_KR&lt;/strong&gt;로 되어 있다면&lt;code&gt;.war&lt;/code&gt; 파일이 풀렸을때 한글 내용이 저장되어 있는 파일을 열어보면 한글이 깨어지는 것을 확인할 수 있을 것이다.&lt;/p&gt;

&lt;h2 id=&quot;실험&quot;&gt;실험&lt;/h2&gt;

&lt;p&gt;우리는 이 환경을 테스트하기 다음과 같이 환경을 설정해보자.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UTF-8&lt;/strong&gt;로 한글 내용이 저장되어 있는 파일을 &lt;code&gt;.war&lt;/code&gt;로 묶어보자&lt;/p&gt;

&lt;p&gt;지금 운영체제의 환경은 &lt;strong&gt;UTF-8&lt;/strong&gt; 이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;mkdir encoding_test &amp;amp;&amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;echo &amp;quot;한글테스트&amp;quot; &amp;gt; encoding_test/test.text
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;jar -cvf encoding_test.war encoding_test/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 &lt;code&gt;encoding_test.war&lt;/code&gt;를 만들었다. 이것은 Tomcat 기반의 웹 프로그램을 만들어서 &lt;code&gt;.war&lt;/code&gt;로 묶은 것과 동일하다고 가정한다.
이제 운영체제의 환경을 &lt;strong&gt;EUC_KR&lt;/strong&gt;로 변경해보겠다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;export LAGN=EUC_KR
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;시스템 인코딩 설정을 변경하고 적용된 결과를 확인하기 위해서 &lt;code&gt;locale&lt;/code&gt;로 확인해보자.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;locale
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;LANG=&amp;quot;EUC_KR&amp;quot;
LC_COLLATE=&amp;quot;C&amp;quot;
LC_CTYPE=&amp;quot;C&amp;quot;
LC_MESSAGES=&amp;quot;C&amp;quot;
LC_MONETARY=&amp;quot;C&amp;quot;
LC_NUMERIC=&amp;quot;C&amp;quot;
LC_TIME=&amp;quot;C&amp;quot;
LC_ALL=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 시스템 환경이 바뀌었다. 이제 &lt;strong&gt;UTF-8&lt;/strong&gt; 환경이 아닌 곳에서 &lt;code&gt;.war&lt;/code&gt;를 풀어보자. 이 작업은 &lt;strong&gt;UTF-8&lt;/strong&gt;이 아닌 환경에서 Tomcat이 &lt;code&gt;.war&lt;/code&gt;를 푸는것과 동일하다고 가정한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;jar -xvf encoidng_test.war
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;방금 &lt;strong&gt;UTF-8&lt;/strong&gt;로 만든 &lt;code&gt;test.text&lt;/code&gt; 파일을 열어보면 한글이 깨어진 것을 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;우리는 개발용 PC와 JVM 기반의 Tomcat 서버가 운영하는 서버의 인코딩이 다를 때 발생하는 문제를 실험해 보았다. 시스템 인코딩 문제는 흔히 개발자들이 실수하는 문제이다. 만약 Lagacy 서버를 사용한다면 최근 &lt;strong&gt;UTF-8&lt;/strong&gt; 환경으로 시스템을 구축하기 전, 한글 서비스 위주의 서버들로 &lt;strong&gt;EUC_KR&lt;/strong&gt; 설정(또는 &lt;strong&gt;KO&lt;/strong&gt;)으로 되어 있을것이다. 특히 &lt;strong&gt;Sun Solaris&lt;/strong&gt; 기반에 서버를 사용하고 있다면 반드시 운영체제의 환경을 확인해보면 좋을 것이다. 개발용 PC는 &lt;strong&gt;UTF-8&lt;/strong&gt;로 파일을 작업하면서 서버에 deploy 시킬때는 &lt;strong&gt;EUC_KR&lt;/strong&gt; 환경이여서 서버에 접속해서 파일을 살펴보면 한글 내용이 깨어진 것을 발견하게 될 것이다. 개발용 PC와 서버의 환경 설정을 동일하게 만들어주는 것이 우선적으로 필요하면 만약 서버 환경을 변경할 수 없을 경우 &lt;code&gt;JAVA_OPT= -Dencoding=utf-8&lt;/code&gt; 옵션을 사용하여 JVM에서 인코딩을 다르게 사용하여 실행할 수 있도록 유도해야한다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.coderanch.com/t/277269/java-io/java/Change-default-character-set-JVM&quot;&gt;http://www.coderanch.com/t/277269/java-io/java/Change-default-character-set-JVM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;연구원-소개&quot;&gt;연구원 소개&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;작성자 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;송성광&lt;/a&gt; 개발 연구원&lt;/li&gt;
&lt;li&gt;블로그 : &lt;a href=&quot;http://blog.saltfactory.net&quot;&gt;http://blog.saltfactory.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;이메일 : &lt;a href=&quot;mailto:saltfactory@gmail.com&quot;&gt;saltfactory@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;트위터 : &lt;a href=&quot;https://twitter.com/saltfactory&quot;&gt;@saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;페이스북 : &lt;a href=&quot;https://facebook.com/salthub&quot;&gt;https://facebook.com/salthub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;연구소 : &lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설연구소&lt;/li&gt;
&lt;li&gt;연구실 : &lt;a href=&quot;http://dblab.changwon.ac.kr&quot;&gt;창원대학교 데이터베이스 연구실&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 20 Mar 2015 00:00:00 +0900</pubDate>
        <link>/series/java/solving-character-in-war-prolbem-via-os-and-jvm.html</link>
        <guid isPermaLink="true">/series/java/solving-character-in-war-prolbem-via-os-and-jvm.html</guid>
        
        <category>java</category>
        
        <category>jvm</category>
        
        <category>tomcat</category>
        
        <category>character</category>
        
        <category>utf-8</category>
        
        <category>war</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Ubuntu에 Oracle XE 설치하기</title>
        <description>&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

&lt;p&gt;기존의 Redhat 계열의 리눅스 서버 운영체제를 &lt;strong&gt;Ubuntu&lt;/strong&gt; 서버로 운영하기 위해서 여러가지 서비스를 새롭게 설치해야한다. 최근의 오픈소스 프로젝트로 만들어지는 패키지들은 특정 운영체제와 상관없이 대부분의 운영체제의 기본 패키지로 포함이 되어 있거나 새롭게 컴파일해서 설치할 수 있도록 배포하고 있다. Oracle은 오픈소스 프로젝트가 아니다. &lt;strong&gt;Oracle Express Edition&lt;/strong&gt;으로 무료 소프트웨어를 배포하고 있지만 리눅스 환경에서 RPM 패키지 관리툴로 설치할 수 있도록 배포하고 있다. 기존의 Redhat 계열 리눅스 서버에서는 RPM으로 설치가 가능했지만 &lt;strong&gt;Ubuntu&lt;/strong&gt; 서버로 변경하면서 &lt;strong&gt;Oracle XE&lt;/strong&gt;를 설치하는 메뉴얼이 필요해 서 Oracle XE를 Ubuntu에 설치하는 방법에 대해서 소개한다. 설치하는 과정 중에 &lt;strong&gt;리눅스 커널 파라미터 설정&lt;/strong&gt;과 &lt;strong&gt;공유메모리 설정&lt;/strong&gt; 부분을 주의하지 않아 오류는 없지만 설치후 Oracle이 동작하지 않는 문제를 발견했었다. 이 문서에서 이와 같은 문제를 겪을 때 해결할 수 있는 방법을 소개한다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;ubuntu&quot;&gt;Ubuntu&lt;/h2&gt;

&lt;p&gt;최근 국내에서 가장 있기는 리눅스 서버는 &lt;a href=&quot;www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt;라고해도 과언이 아닐 것이라 생각이된다. &lt;strong&gt;Ubuntu&lt;/strong&gt;는 &lt;a href=&quot;https://www.debian.org/&quot;&gt;Debian&lt;/a&gt;를 기반으로 만들어졌다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ubuntu-kr.org/download/file.php?id=9592&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;그래서 안정적이고 편리하게 패키지를 관리할 수 있는 장점을 가지고 있다. 무엇보다도 현재 리눅스 커뮤니티 중에서 가장 엑티브하게 활동하는 곳이 Ubuntu이기 때문에 온라인 자료가 많은 것이 최고의 장점이다. &lt;strong&gt;Debian&lt;/strong&gt;은 오픈 소스 프로젝트 가운데 하나로 37,500개의 패키지를 갖춘 저장소를 관리하기 때문에 패키지 사용이 편리하다. &lt;a href=&quot;http://redhat.com&quot;&gt;Redhat&lt;/a&gt; 계열이 &lt;a href=&quot;https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/ch-yum.html&quot;&gt;yum&lt;/a&gt;으로 패키지를 관리할 수 있다면 &lt;strong&gt;Debian&lt;/strong&gt; 계열은 &lt;a href=&quot;https://wiki.debian.org/apt-get&quot;&gt;apt-get&lt;/a&gt;로 패키지를 관리할 수 있다. &lt;strong&gt;Ubuntu&lt;/strong&gt;는 Desktop 버전 위주로 개발을 진행해왔기 때문에 서버 패키지보다 업데이트 주기가 빠른 편이라 최신 라이브러리들을 사용할 수 있는 장점이 있다. 하지만 너무 빠른 업데이트 주기 때문에 안정성이 낮아질 수 있기 때문에 &lt;a href=&quot;https://wiki.ubuntu.com/LTS&quot;&gt;LTS(Long Term Support)&lt;/a&gt; 버전으로 만들어진 서버를 배포하고 있는데 &lt;strong&gt;5년&lt;/strong&gt;동안 지속적인 관리를 보장 받을 수 있다. 현재 가장 안정화된 서버 버전은 &lt;a href=&quot;http://releases.ubuntu.com/12.04/&quot;&gt;12.04LTS&lt;/a&gt;이다.&lt;/p&gt;

&lt;h2 id=&quot;oralce-express-edition&quot;&gt;Oralce Express Edition&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/database/database-technologies/express-edition/overview/index.html&quot;&gt;Oracle XE(Express Edition)&lt;/a&gt;는 상용 Oracle의 무료로 사용할 수 있는 Oracle DBMS로 사용 Oracle의 대부분의 기능을 사용할 수 있기 때문에 개발자나 관리자들이 빠르게 개발을 하거나 실험을 위해서 사용할 수 있다. &lt;strong&gt;Oracle XE&lt;/strong&gt;는 무료이지만 오픈소스 프로젝트는 아니다. 이러한 이유로 위에서 말한 오픈소스 패키지 저장소에서 패키지를 관리할 수 없고, Oracle 공식 사이트에서 &lt;a href=&quot;http://www.oracle.com/technetwork/database/database-technologies/express-edition/downloads/index.html&quot;&gt;Linux용 Oracle-XE&lt;/a&gt;를 다운 받을 수 있다. Oracle는 &lt;a href=&quot;http://www.oracle.com/us/technologies/linux/overview/index.html&quot;&gt;Oracle Linux&lt;/a&gt; 운영체제를 배포하고 있는데  Oracle Linux는 Redhat 계열이고 이것은 &lt;a href=&quot;https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/5/html/Deployment_Guide/ch-rpm.html&quot;&gt;rpm&lt;/a&gt;이라는 패키지 관리툴로 패키지를 설치할 수 있다. Oracle은 &lt;strong&gt;Oracle XE&lt;/strong&gt; Linux 버전을 rpm 파일 형태로 배포하고 있다. &lt;strong&gt;Oracle XE 10g&lt;/strong&gt; 버전까지는 &lt;strong&gt;32bit&lt;/strong&gt;를 지원했지만 Oracle은 더이상 &lt;strong&gt;Oracle XE 10g&lt;/strong&gt;를 배포하고 있지 않고, &lt;strong&gt;Oracle XE 11g&lt;/strong&gt; 부터 &lt;strong&gt;64bit&lt;/strong&gt;만 배포하고 있다.&lt;/p&gt;

&lt;h2 id=&quot;ubuntu에-oracle-xe-설치&quot;&gt;Ubuntu에 Oracle XE 설치&lt;/h2&gt;

&lt;h3 id=&quot;ubunut-64bit-확인&quot;&gt;Ubunut 64Bit 확인&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Oracle XE&lt;/strong&gt;는 11g 버전을 배포하면서 32bit 지원을 중단하고 64bit만 배포하고 있다. (32bit는 Windows용만 지원을 한다.) 다시 말해서 &lt;strong&gt;Oracle XE&lt;/strong&gt;를 설치하기 위해서는 서버 운영체제가 64bit 운영체제야 한다. Ubuntu에서 현재 시스템이 64bit인지를 확인해보자.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;uname -i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;결과가 &lt;code&gt;x86_64&lt;/code&gt;로 나오면 현재 설치된 운영체제는 64bit이다.&lt;/p&gt;

&lt;h3 id=&quot;oralce-xe-다운로드&quot;&gt;Oralce XE 다운로드&lt;/h3&gt;

&lt;p&gt;위에서 설명했듯 &lt;strong&gt;Oracle XE&lt;/strong&gt;는 오픈소스가 아니기 때문에 오픈소스 패키지를 관리하는 저장소에서 패키지 관리툴로 설치할 수 없다. &lt;strong&gt;Oracle XE&lt;/strong&gt;는 Oracle 공식 사이트에 &lt;code&gt;RPM&lt;/code&gt; 파일 형태로 배포되고 있다. 가장 최신 &lt;strong&gt;Oracle XE&lt;/strong&gt;를 다운 받는다. (Oracle XE를 다운로드하기 위해서는 Oracle 사이트 계정이 필요하다. Oracle 계정으로 로그인 후 다운로드를 할 수 있기 때문에 Curl이나 wget으로 서버에서 바로 다운받을 수 없고 PC에 다운 받아서 서버로 다운 받은 파일을 업로드해야 한다.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/database/database-technologies/express-edition/downloads/index.html&quot;&gt;Oracle XE 다운로드&lt;/a&gt; 에서 Linux용 64비트를 다운받는다. 현재 배포 버전은 &lt;strong&gt;Oracle Database Express Edition 11g Release 2 for Linux x64&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;h3 id=&quot;oracle-xe-설치에-필요한-패키지&quot;&gt;Oracle XE 설치에 필요한 패키지&lt;/h3&gt;

&lt;p&gt;Ubuntu에서는 &lt;code&gt;.rpm&lt;/code&gt; 파일을 사용해서 패키지를 설치할 수 없기 때문에 PRM 파일을 Debian 계열의 패키지 설칠를 위한 &lt;code&gt;.deb&lt;/code&gt; 파일로 변경하여 패키지를 설치해야한다.
Ubuntu에 &lt;strong&gt;Oracle XE&lt;/strong&gt;를 설치하기 위해서 필요한 패키지들이 있는데 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://help.ubuntu.com/community/RPM/AlienHowto&quot;&gt;alien&lt;/a&gt;&lt;/strong&gt; : RPM 패키지를 Debian 패키지로 변환하는 툴&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://packages.ubuntu.com/lucid/libs/libaio1&quot;&gt;libaio1&lt;/a&gt;&lt;/strong&gt; : Linux 커널 AIO&lt;a href=&quot;http://lse.sourceforge.net/io/aio.html&quot;&gt;Asynchronous I/O&lt;/a&gt; 엑세스 라이브러리&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://packages.ubuntu.com/lucid/unixodbc&quot;&gt;unixodbc&lt;/a&gt;&lt;/strong&gt; : &lt;a href=&quot;http://en.wikipedia.org/wiki/Open_Database_Connectivity&quot;&gt;ODBC(Open Database Connectivity)&lt;/a&gt; 라이브러리&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;필요한 패키지를 &lt;code&gt;apt-get&lt;/code&gt; 명령어를 이용하여 root 권한으로  설치한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo apt-get install -y alien libaio1 unixodbc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;rpm-파일을-deb-파일로-변환&quot;&gt;RPM 파일을 DEB 파일로 변환&lt;/h3&gt;

&lt;p&gt;다운받은 &lt;code&gt;.rpm&lt;/code&gt; 파일을 &lt;strong&gt;Ubuntu&lt;/strong&gt;에 설치하기 위해서 &lt;strong&gt;alien&lt;/strong&gt;을 사용하여 &lt;code&gt;.deb&lt;/code&gt; 파일로 변경한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo alien --scripts -d oracle-xe-11.2.0-1.0.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 명령어를 실행하면 한참의 시간이 지난 이후  같은 경로에 &lt;code&gt;oracle-xe_11.2.0-2_amd64.deb&lt;/code&gt; 파일이 생성된다.&lt;/p&gt;

&lt;h3 id=&quot;/sbin/chkconfig&quot;&gt;/sbin/chkconfig&lt;/h3&gt;

&lt;p&gt;Rethat 패키지들은 설치할 때 &lt;code&gt;/sbin/chkconfg&lt;/code&gt;를 사용하는데 &lt;strong&gt;Ubuntu&lt;/strong&gt;에는 없기 때문에 이와 동일한 환경을 만들어주기 위해서 아래 내용을 가지고 &lt;code&gt;/bin/chkconfig&lt;/code&gt; 파일을 생성한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo vi /sbin/chkconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Oracle 11gR2 XE installer chkconfig hack for Ubuntu&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/init.d/oracle-xe
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; ! &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;tail -n1 &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep INIT&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;### BEGIN INIT INFO&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;# Provides: OracleXE&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;# Required-Start: $remote_fs $syslog&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;# Required-Stop: $remote_fs $syslog&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;# Default-Start: 2 3 4 5&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;# Default-Stop: 0 1 6&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;# Short-Description: Oracle 11g Express Edition&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;### END INIT INFO&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
update-rc.d oracle-xe defaults &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt; 01
&lt;span class=&quot;c&quot;&gt;#EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파일 생성 이후 이 파일을 실행할 수 있도록 파일 권한을 &lt;strong&gt;755&lt;/strong&gt; 변경한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo chmod 755 /sbin/chkconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;kernel-파라미터-설정&quot;&gt;Kernel 파라미터 설정&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Oracle&lt;/strong&gt;는 서버를 운영하는데 커널파라미터 설정이 필요한데 시스템 컨트롤 데몬에 시스템 파라미터 설정을 저장하여 등록한다. Oralce은 Linux 커널의 파라미터를 사용하여 운영되기 때문이다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://docs.oracle.com/cd/B28359_01/server.111/b32009/appc_linux.htm#UNXAR011&quot;&gt;fs.file-max&lt;/a&gt;&lt;/strong&gt; : 오픈하는 파일의 수를 지정하는 커널 파리미터(각 오라클 인스턴스는 512*PROCESSES만큼 file descriptior를 가진다.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/5/html/Tuning_and_Optimizing_Red_Hat_Enterprise_Linux_for_Oracle_9i_and_10g_Databases/sect-Oracle_9i_and_10g_Tuning_Guide-Adjusting_Network_Settings-Changing_Network_Kernel_Settings.html&quot;&gt;net.ipv4.ip_local_port_range&lt;/a&gt;&lt;/strong&gt; : 이 값은 TCP와 UDP의 트래픽을 위한 범위를 설정하는 커널 파라미터&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kernel.sem&lt;/strong&gt; : 세마포를 지정하는 커널 파라미터&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kernel.shmmax&lt;/strong&gt; : 공유 메모리 페이지를 지정하는 커널 파라미터&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo vi /etc/sysctl.d/60-oracle.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# Oracle 11g XE kernel parameters
fs.file-max=6815744
net.ipv4.ip_local_port_range=9000 65000
kernel.sem=250 32000 100 128
kernel.shmmax=536870912
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;시스템컨트롤러 데몬에 커널파라미터를 설정하였으면 커널 파라미터를 로드한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo service procps start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;oracle-xe가-사용할-파일-추가&quot;&gt;Oracle XE가 사용할 파일 추가&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Oracle XE&lt;/strong&gt;는 &lt;code&gt;/bin/awk&lt;/code&gt;를 사용하게 되는데 Ubuntu에는 &lt;code&gt;/usr/bin/awk&lt;/code&gt;에 설치되어 있기 때문에 다음과 같이 심볼릭링크를 만들어준다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo ln -s /usr/bin/awk /bin/awk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Oracle XE&lt;/strong&gt;는 리스너가 사용할 lock 파일을 만들어준다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo mkdir /var/lock/subsys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo touch /var/lock/subsys/listener
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;메모리-설정&quot;&gt;메모리 설정&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Oracle XE&lt;/strong&gt;를 설치하고 나서 특별한 에러 없이 Oracle 프로세스가 리스너만 시작되고 다른 프로세스가 실행되지 않는 문제를 만날 수 있다. &lt;strong&gt;Oralce XE&lt;/strong&gt;를 설치할 때 정상적으로 설치가 되지 않거나 오류가 발생하게되면 &lt;code&gt;$ORACL_HOME&lt;/code&gt;안의 &lt;code&gt;log&lt;/code&gt; 디렉토리를 살펴보면 된다. 설치가 정상적으로 되지 않거나, 설치는 되었는데 에러 없이 Oracle이 정상적으로 시작이 되지 않을 경우 로그를 살펴보면&lt;strong&gt;ORA-000845:MEMORY_TARGET&lt;/strong&gt; 에러가 발생하게 되는 경우가 있는데 메모리의 설정이 잘못되거나 사이즈가 부족해서 그런 경우이다. 이런 경우 메모리 설정을 위해서 다음 과정을 진행한다.&lt;/p&gt;

&lt;p&gt;먼저 현재 설정되어 있는 &lt;strong&gt;shared memeory&lt;/strong&gt;를 삭제한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo rm -rf /dev/shm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;새롭게 SHM을 만들어서 마운트를 시킬 수 있게 다시 만든다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo mkdir /dev/shm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo mount -t tmpfs shmfs -size=4096m /dev/shm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;shm 설정을 데몬에 등록해서 로드하도록 하기 위해서 다음 내용을 &lt;code&gt;/etc/rc2.d/S01shm_load&lt;/code&gt; 파일로 등록한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo vi /etc/rc2.d/S01shm_load
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#!/bin/sh
case &amp;quot;$1&amp;quot; in
start) mkdir /var/lock/subsys 2&amp;gt;/dev/null
touch /var/lock/subsys/listener
rm /dev/shm 2&amp;gt;/dev/null
mkdir /dev/shm 2&amp;gt;/dev/null
mount -t tmpfs shmfs -o size=4096m /dev/shm ;;
*) echo error
exit 1 ;;
esac
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo chmod 755 /etc/rc2.d/S01shm_load
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;oracle-xe-패키지-설치&quot;&gt;Oracle XE 패키지 설치&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Oracle XE&lt;/strong&gt;를 설치하기 위한 &lt;strong&gt;Ubuntu&lt;/strong&gt;의 환경설정은 끝났다. 이제 &lt;strong&gt;Oracle XE&lt;/strong&gt;를 설치하기 위해 &lt;code&gt;.rpm&lt;/code&gt;을 &lt;code&gt;.deb&lt;/code&gt; 파일로 변환한 패키지를 설치한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo dpkg --install oracle-xe_11.2.0-2_amd64.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 설치가 되면 다음과 같이 &lt;strong&gt;Oracle XE&lt;/strong&gt;가 설치되고 데몬을 자동으로 등록하게 된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Selecting previously unselected package oracle-xe.
(Reading database ... 72392 files and directories currently installed.)
Preparing to unpack ./oracle-xe_11.2.0-2_amd64.deb ...
Unpacking oracle-xe (11.2.0-2) ...
Setting up oracle-xe (11.2.0-2) ...
Executing post-install steps...

 Adding system startup for /etc/init.d/oracle-xe ...
   /etc/rc0.d/K01oracle-xe -&amp;gt; ../init.d/oracle-xe
   /etc/rc1.d/K01oracle-xe -&amp;gt; ../init.d/oracle-xe
   /etc/rc6.d/K01oracle-xe -&amp;gt; ../init.d/oracle-xe
   /etc/rc2.d/S80oracle-xe -&amp;gt; ../init.d/oracle-xe
   /etc/rc3.d/S80oracle-xe -&amp;gt; ../init.d/oracle-xe
   /etc/rc4.d/S80oracle-xe -&amp;gt; ../init.d/oracle-xe
   /etc/rc5.d/S80oracle-xe -&amp;gt; ../init.d/oracle-xe

You must run &amp;#39;/etc/init.d/oracle-xe configure&amp;#39; as the root user to configure the database.

Processing triggers for ureadahead (0.100.0-16) ...
Processing triggers for desktop-file-utils (0.22-1ubuntu1) ...
Processing triggers for mime-support (3.54ubuntu1.1) ...
Processing triggers for libc-bin (2.19-0ubuntu6.6) ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;설치가 모두 마친 이후 &lt;strong&gt;Oracle XE&lt;/strong&gt;를 사용하기 위해 Oracle 최초 설정을 &lt;code&gt;/etc/init.d/oracle-xe configure&lt;/code&gt;로 설정한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo /etc/init.d/oracle-xe configure
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;최초 설정 내용은 다음과 같이 서비스 포트설정과 패스워드 설정이다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Specify the HTTP port that will be used for Oracle Application Express [8080]:&lt;/li&gt;
&lt;li&gt;Specify a port that will be used for the database listener [1521]:&lt;/li&gt;
&lt;li&gt;Specify a password to be used for database accounts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;환경변수-설정&quot;&gt;환경변수 설정&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Oracle XE&lt;/strong&gt; 설치가 모두 끝나면 Oracle에 관련된 환경 변수를 추가한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;vi ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;export ORACLE_HOME=/u01/app/oracle/product/11.2.0/xe
export ORACLE_SID=XE
export NLS_LANG=`$ORACLE_HOME/bin/nls_lang.sh`
export ORACLE_BASE=/u01/app/oracle
export LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATH
export PATH=$ORACLE_HOME/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt; 서버 전체에 사용하는 변수에 등록하고 싶으면 &lt;code&gt;/etc/environment&lt;/code&gt; 파일에 위 내용을 추가한다.&lt;/p&gt;

&lt;h3 id=&quot;상태-확인&quot;&gt;상태 확인&lt;/h3&gt;

&lt;p&gt;설치가 모두 끝나면 정상적으로 운영되고 있는지 다음과 같이 확인한다. Oracle의 네트워크 상태를 확인하기 위해서 리스너가 정상적으로 동작하고 있는지 확인한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;lsnrctl status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;만약 리스너가 정상적으로 동작하고 있으면 다음과 같은 결과를 출력할 것이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;LSNRCTL for Linux: Version 11.2.0.2.0 - Production on 13-MAR-2015 13:54:41

Copyright (c) 1991, 2011, Oracle.  All rights reserved.

Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=IPC)(KEY=EXTPROC_FOR_XE)))
STATUS of the LISTENER

Alias                     LISTENER
Version                   TNSLSNR for Linux: Version 11.2.0.2.0 - Production
Start Date                13-MAR-2015 10:32:50
Uptime                    0 days 3 hr. 21 min. 53 sec
Trace Level               off
Security                  ON: Local OS Authentication
SNMP                      OFF
Default Service           XE
Listener Parameter File   /u01/app/oracle/product/11.2.0/xe/network/admin/listener.ora
Listener Log File         /u01/app/oracle/diag/tnslsnr/brainoffice1/listener/alert/log.xml
Listening Endpoints Summary...
  (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC_FOR_XE)))
  (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=brainoffice1.hibrain.net)(PORT=1521)))
  (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=brainoffice1.hibrain.net)(PORT=8080))(Presentation=HTTP)(Session=RAW))
Services Summary...
Service &amp;quot;PLSExtProc&amp;quot; has 1 instance(s).
  Instance &amp;quot;PLSExtProc&amp;quot;, status UNKNOWN, has 1 handler(s) for this service...
Service &amp;quot;XE&amp;quot; has 1 instance(s).
  Instance &amp;quot;XE&amp;quot;, status READY, has 1 handler(s) for this service...
Service &amp;quot;XEXDB&amp;quot; has 1 instance(s).
  Instance &amp;quot;XE&amp;quot;, status READY, has 1 handler(s) for this service...
The command completed successfully
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;설치한 Oracle에 로그인 해보자. SYS와  SYSTEM 계정의 초기 비밀번호는 설치할 때 입력한 비밀번호를 사용한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sqlplus system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 로그인이 되면 다음과 같은 화면이 출력되면서 Oracle에 접속이 된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;SQL*Plus: Release 11.2.0.2.0 Production on Fri Mar 13 13:59:40 2015

Copyright (c) 1982, 2011, Oracle.  All rights reserved.

Enter password:

Connected to:
Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production

SQL&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;oracle-xe-삭제&quot;&gt;Oracle XE 삭제&lt;/h2&gt;

&lt;p&gt;만약 &lt;strong&gt;Oracle XE&lt;/strong&gt;를 설치하는 도중에 에러가 발생하여 재설치를 해야하는 경우나 완전히 삭제해야하는 경우는 다음과 같이 삭제한다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Oracle XE&lt;/strong&gt; 서비스를 정지한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo service oracle-xe stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Oracle XE&lt;/strong&gt; 패키지를 삭제한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; sudo dpkg --purge oracle-xe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Oracle&lt;/strong&gt; 디렉토리를 삭제한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo rm -rf /u01/app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Oracle XE&lt;/strong&gt; 데몬을 삭제하고 갱신하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo rm /etc/default/oracle-xe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo update-rc.d -f oracle-xe remove
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt; 설정 파일을 삭제한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo rm /sbin/chkconfig /etc/rc2.d/S01shm_load /etc/sysctl.d/60-oracle.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Oracle XE&lt;/strong&gt; 리눅스 계정을 삭제한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo userdel -r oracle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo delgroup dba
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;Oracle은 가장 많이 사용하고 있는 RDBMS이다. 프로젝트를 진행할 때 Oracle 기반의 어플리케이션을 개발하기 위해서는 Oracle 서버가 필요한데 개발용 서버에 Oracle을 가볍게 설치하고 운영하기 위해서 &lt;strong&gt;Oracle XE&lt;/strong&gt;를 설치하여 운영할 수 있다. Oracle XE는 Redhat 계열에 설치할 수 있는 RPM 파일 형태로 배포하고 있다. 최근 Ubuntu 리눅스 서버가 패키지 관리의 편리성과 활발한 커뮤니티 활동으로 많은 인기를 얻고 있어 Ubuntu 리눅스를 도입하게 될 때 Oracle XE를 설치기 위해서는 &lt;code&gt;.rpm&lt;/code&gt; 파일을 &lt;code&gt;.deb&lt;/code&gt; 파일로 변경하여 설치하는 방법이 필요하다. 이때 Redhat 계열에 최적화되어 있는 환경을 Ubuntu에 맞게  &lt;strong&gt;rpm에 관련된 파일&lt;/strong&gt;, &lt;strong&gt;커널 파라미터&lt;/strong&gt;, 그리고 &lt;strong&gt;공유 메모리&lt;/strong&gt;에 관련되어 설정을 해야한다. 이에 관한 내용을 조사하고 설치시 발생한 문제를 해결했다. 설치 후 에러는 없지만 Oracle이 정상적으로 실행이 되지 않을 때 &lt;code&gt;$ORACLE_HOME/log&lt;/code&gt; 디렉토리 안에 있는 로그 파일을 분석하면 이 문서에서 소개하는 내용의 문제로 실행이 되지 않는 경우를 발견했었다. Ubuntu에서 Oracle을 운영할 경우나 새롭게 설치해야하는 경우 이 문서를 참조하면 개발 환경을 구축하는데 도움이 될 수 있을것으로 기대된다.&lt;/p&gt;

&lt;h2 id=&quot;참조&quot;&gt;참조&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/cd/E17781_01/install.112/e18802/toc.htm&quot;&gt;http://docs.oracle.com/cd/E17781_01/install.112/e18802/toc.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.whitehorses.nl/2014/03/18/installing-java-oracle-11g-r2-express-edition-and-sql-developer-on-ubuntu-64-bit/&quot;&gt;http://blog.whitehorses.nl/2014/03/18/installing-java-oracle-11g-r2-express-edition-and-sql-developer-on-ubuntu-64-bit/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://meandmyubuntulinux.blogspot.kr/2012/05/installing-oracle-11g-r2-express.html&quot;&gt;http://meandmyubuntulinux.blogspot.kr/2012/05/installing-oracle-11g-r2-express.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;연구원-소개&quot;&gt;연구원 소개&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;작성자 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;송성광&lt;/a&gt; 개발 연구원&lt;/li&gt;
&lt;li&gt;블로그 : &lt;a href=&quot;http://blog.saltfactory.net&quot;&gt;http://blog.saltfactory.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;이메일 : &lt;a href=&quot;mailto:saltfactory@gmail.com&quot;&gt;saltfactory@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;트위터 : &lt;a href=&quot;https://twitter.com/saltfactory&quot;&gt;@saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;페이스북 : &lt;a href=&quot;https://facebook.com/salthub&quot;&gt;https://facebook.com/salthub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;연구소 : &lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설연구소&lt;/li&gt;
&lt;li&gt;연구실 : &lt;a href=&quot;http://dblab.changwon.ac.kr&quot;&gt;창원대학교 데이터베이스 연구실&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 13 Mar 2015 00:00:00 +0900</pubDate>
        <link>/series/ubuntu/install-oracle-xe-on-ubuntu.html</link>
        <guid isPermaLink="true">/series/ubuntu/install-oracle-xe-on-ubuntu.html</guid>
        
        <category>database</category>
        
        <category>ubuntu</category>
        
        <category>oracle</category>
        
        
        <category>ubuntu</category>
        
      </item>
    
      <item>
        <title>popup 창에서 리다이렉트 이후 window.opener 사라지는 문제 해결하기</title>
        <description>&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

&lt;p&gt;웹 프로그램을 개발할 때 현재 열려 있는 페이지를 그대로 유지하면서 사용자에게 다른 액션을 유도하기 위해서 우리는 &lt;strong&gt;Popup&lt;/strong&gt;으로 새로운 창을 열도록 개발하는 경우가 있다. 예를 들어서 &lt;strong&gt;i-PIN&lt;/strong&gt; 인증을 처리하는 경우 회원가입 화면에서 i-PIN 인증 화면을 Popup으로 열어서 사용자 인증을 거친 이후 인증이 완료되면 열었던 창으로 결과를 던져주는 경우가 있다. JavaScript로 Popup을 사용하여 새로운 창을 열고 Popup에서 처리한 결과를 Popup을 열게한 &lt;strong&gt;window.opener&lt;/strong&gt;에 접근해서 이벤트를 전달하는 것은 어렵지않게 이미 알려진 방법으로 해결할 수 있다. 하지만 특정 브라우저에서 Popup한 창에 열려진 사이트가 &lt;strong&gt;Redirect&lt;/strong&gt;를 하여 다른 host로 이동을 할 경우 window.opener 객체를 잃게 되버리는 문제를 발견했다. 이번 포스팅은 JavaScript로 Popup을 사용하는 방법 중에 Popup의 호스트가 이동후 opener에 접근할 수 있는 방법에 대해서 소개한다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;blockquote&gt;
&lt;p&gt;설명의 편의를 위해 Popup을 생성하여 열게한 창을 &lt;strong&gt;부모창&lt;/strong&gt;, Popup으로  새롭게 열려진 창을 &lt;strong&gt;자식창&lt;/strong&gt;이라고 정의하고 설명한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;javascript로-popup-열기&quot;&gt;JavaScript로 Popup 열기&lt;/h2&gt;

&lt;p&gt;JavaScript로 Popup 창을 여는 방법은 여러가지가 있지만 가장 간단하게 다음과 같이 할 수 있다.
&lt;strong&gt;부모창&lt;/strong&gt; 에서 &lt;code&gt;window.open()&lt;/code&gt; 메소드를 사용하여 &lt;strong&gt;자식창&lt;/strong&gt;을 새롭게 만들 수 있다. 이 때 &lt;strong&gt;자식창&lt;/strong&gt;의 고유 이름을 지정하거나 &lt;code&gt;_self&lt;/code&gt;, &lt;code&gt;_blank&lt;/code&gt;와 같이 예약된 이름으로 만들 수 있고 &lt;strong&gt;자식창&lt;/strong&gt;의 속성을 부여할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;parentWin.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;onPopupWindow()&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;팝업창 열기&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// filename : parentWin.js&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onPopupWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;popup.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;_blank&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;top=10, left=10, width=400, height=400&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;자식창에서-부모창-접근&quot;&gt;자식창에서 부모창 접근&lt;/h2&gt;

&lt;p&gt;Popup으로 열린 &lt;strong&gt;자식창&lt;/strong&gt;에서 특정 작업이 처리된 이후 &lt;strong&gt;부모창&lt;/strong&gt;에 데이터를 넘겨주거나 이벤트를 처리해야할 때 다음과 같이 &lt;a href=&quot;http://www.w3schools.com/jsref/prop_win_opener.asp&quot;&gt;window.opener&lt;/a&gt; 객체를 이용하여 접근할 수 있다. 예를 들어 &lt;strong&gt;자식창&lt;/strong&gt;에서 &lt;strong&gt;부모창&lt;/strong&gt;에 열려있는 페이지를 다른 페이로 이동시키고 싶을 경우 &lt;strong&gt;자식창&lt;/strong&gt;에서 다음과 같이 할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;childWin.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;doRedirectOpener()&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;부모창 페이지 이동&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// filename : childWin.js&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doRedirectOpener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;parentWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://blog.saltfactory.net&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;자식창&lt;/strong&gt;에서 &lt;strong&gt;부모창&lt;/strong&gt;에 접근하기 위해서는 &lt;code&gt;window.opener&lt;/code&gt;를 참조하면 &lt;strong&gt;부모창&lt;/strong&gt;의 윈도우객체를 참조할 수 있다. 위 예제는 &lt;code&gt;window.opener&lt;/code&gt;를 이용해 &lt;strong&gt;부모창&lt;/strong&gt;의 &lt;code&gt;window&lt;/code&gt;객체를 접근해 &lt;code&gt;window.location.href&lt;/code&gt; 값을 수정하여 새로운 HOST로 부모창의 페이지를 이동하게 한 예제이다.&lt;/p&gt;

&lt;h2 id=&quot;자식창의-host가-리다이렉트-되는-경우&quot;&gt;자식창의 HOST가 리다이렉트 되는 경우&lt;/h2&gt;

&lt;p&gt;만약 Popup으로 &lt;strong&gt;자식창&lt;/strong&gt;을 Popup으로 열었는데 특정 일을 처리하고 난 이후 &lt;strong&gt;자식창&lt;/strong&gt;의 HOST가 변경될 경우를 생각해보자. 예를 들어 &lt;strong&gt;i-PIN&lt;/strong&gt; 인증창을 Poup으로 연다고 가정하자.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;자식창&lt;/strong&gt;의 플로우는 다음과 같다.
설명의 편의를 위해서 우리 호스트는 &lt;a href=&quot;http://blog.saltfactory.net&quot;&gt;http://blog.saltfactory.net&lt;/a&gt; 이라고 하고 i-PIN 인증 업체 호스트는 &lt;a href=&quot;http://i-pin.org&quot;&gt;http://i-pin.org&lt;/a&gt; 이라고 한다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;부모창&lt;/strong&gt;에서 &lt;strong&gt;자식창&lt;/strong&gt;을 popup으로 연다. 이때 URL은 나의 HOST의 &lt;code&gt;child.html&lt;/code&gt;이다&lt;/li&gt;
&lt;li&gt;checkIPIN.html : 필요한 데이터를 조합해서 &lt;strong&gt;i-PIN&lt;/strong&gt; 인증 업체의 URL &lt;code&gt;iPin.html&lt;/code&gt;으로 리다이렉트를 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;iPinMain.html&lt;/strong&gt; : 외부 업체 사이트에서 필요한 작업을 처리하고 결과를 나의 HOST의 &lt;code&gt;result.html&lt;/code&gt;으로 리다이렉트 한다.&lt;/li&gt;
&lt;li&gt;result.html : 외부에서 전달한 값을 가지고 &lt;strong&gt;부모창&lt;/strong&gt;에 접근하여 결과를 액션을 취한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://assets.hibrainapps.net/images/var/albums/posts/Screen%20Shot%202015-03-13%20at%204_35_04%20PM.png?m=1426232233&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;이와 같은 경우 최종적으로 &lt;strong&gt;자식창&lt;/strong&gt;에서 결과를 &lt;strong&gt;부모창&lt;/strong&gt;에 전달하기 위해서 &lt;code&gt;window.opener&lt;/code&gt;를 사용하면 &lt;code&gt;undefined&lt;/code&gt; 에러를 발생시킨다.
다시 말해서 HOST가 변경되면서 처음 &lt;strong&gt;자식창&lt;/strong&gt;이 열렸을 때의 &lt;code&gt;window.opener&lt;/code&gt;가 유지가 되지 않고 변경이 되는 문제를 가지게 되는 것이다. 이 문제는 Internet Explore의 보안설정에 의해서 발생한다. 이 문제를 해결하기  위해서 사용자에게 보안 설정을 해지하거나 변경해야한다고 공지할 수는 없기 때문에 우리는 이 문제를 해결하기 위한 방법을 찾게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;popup창을-iframe으로-열기&quot;&gt;Popup창을 iframe으로 열기&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;자식창&lt;/strong&gt;이 Popup으로 열려서 URL이 다른 HOST로 이동하게 되면 &lt;code&gt;window.opener&lt;/code&gt;를 유지할 수 없는 문제를 해결하기 위해서 &lt;a href=&quot;http://www.w3schools.com/tags/tag_iframe.asp&quot;&gt;iframe&lt;/a&gt;을 이용하여 &lt;strong&gt;자식창&lt;/strong&gt;의 HOST는 변경하지 않고 &lt;code&gt;iframe&lt;/code&gt;안에서만 페이지가 변경될 수 있도록 실험하였다. &lt;strong&gt;자식창&lt;/strong&gt;의 &lt;code&gt;window&lt;/code&gt;객체는 변경되지 않기 때문에 &lt;strong&gt;자식창&lt;/strong&gt;에서는 &lt;strong&gt;부모창&lt;/strong&gt;을 접근할 수 있는 &lt;code&gt;window.opener&lt;/code&gt;를 잃지 않을 것으로 생각했다. 결과 페이지인 &lt;code&gt;result.html&lt;/code&gt; 페이지 안에서 &lt;code&gt;iframe&lt;/code&gt;에 접근하면 &lt;code&gt;iframe&lt;/code&gt;을 가지고 있는 &lt;strong&gt;자식창&lt;/strong&gt;을 접근할 수 있고, &lt;strong&gt;자식창&lt;/strong&gt;에서 &lt;strong&gt;부모창&lt;/strong&gt;으로 접근할 수 있기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://assets.hibrainapps.net/images/var/albums/posts/Screen%20Shot%202015-03-13%20at%204_37_03%20PM.png?m=1426232233&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;부모창&lt;/strong&gt;에서 &lt;strong&gt;자식창&lt;/strong&gt;을 열때 &lt;code&gt;iframe&lt;/code&gt;을 만들고 &lt;code&gt;iframe&lt;/code&gt;안에서 &lt;strong&gt;자식창&lt;/strong&gt; URL인 &lt;code&gt;http://blog.saltfactory.net/child.html&lt;/code&gt;을 열도록 하였다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// filename : parentWin.js&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onPopupWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;win&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;_blank&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;top=10, left=10, width=400, height=400&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;iframe width=&amp;quot;100%&amp;quot;, height=&amp;quot;100%&amp;quot; src=&amp;quot;http://blog.saltfactory.net/child.html&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;child.html&lt;/code&gt;에서는 내부적으로 &lt;code&gt;http:///i-pin.org/iPin.html&lt;/code&gt;로 페이지를 전환후에 작업을 모두 처리한 이후 결과를 &lt;code&gt;http://blog.saltfactory.net/result.html&lt;/code&gt;으로 다시 리다이렉트를 시켜주었다. 결과 받은 &lt;code&gt;result.html&lt;/code&gt;은 다음과 같은 소스코드를 가지고 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;child-resultWin.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;onCloseSendResultToOpener()&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;이 창을 닫고 회원가입을 계속 진행합니다.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// filename : child-resultWin.js&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onCloseSendResultToOpener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parentWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;parentWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://blog.saltfactory.net/account.html&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다시 말해서 &lt;strong&gt;i-PIN&lt;/strong&gt; 인증창이 &lt;strong&gt;자식창&lt;/strong&gt; 안의 &lt;code&gt;iframe&lt;/code&gt;안에 열려있고, 처리가 완료된 이후 &lt;code&gt;result.html&lt;/code&gt;도 &lt;strong&gt;자식창&lt;/strong&gt;의 &lt;code&gt;iframe&lt;/code&gt; 안에 열려 있는 것이다. &lt;strong&gt;자식창&lt;/strong&gt;에서 리다이렉트하는 모든 사이트들은 &lt;strong&gt;부모창&lt;/strong&gt;에서 &lt;strong&gt;자식창&lt;/strong&gt;을 열때 만들어 놓은 &lt;code&gt;iframe&lt;/code&gt;안에서 동작하고 있기 때문에 마지막 결과를 받은 &lt;code&gt;result.html&lt;/code&gt;에서 &lt;code&gt;iframe&lt;/code&gt;으로 접근하고, &lt;code&gt;iframe&lt;/code&gt;에서는  &lt;strong&gt;자식창&lt;/strong&gt;에 접근하고 마지막으로 &lt;strong&gt;자식창&lt;/strong&gt;에서 &lt;strong&gt;부모창&lt;/strong&gt;으로 접근할 수 있는 것이다.&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;부모창&lt;/strong&gt;에서 JavaScript를 이용하여 &lt;strong&gt;자식창&lt;/strong&gt;을 Popup으로 열게되면 &lt;strong&gt;자식창&lt;/strong&gt;에서 &lt;code&gt;window.opener&lt;/code&gt;를 참조하여  &lt;strong&gt;부모창&lt;/strong&gt; 에 접근할 수 있다. 하지만 &lt;strong&gt;자식창&lt;/strong&gt;에 다른 HOST로 리다이렉트가 되는 경우 &lt;code&gt;window.opener&lt;/code&gt;객체가 사라지는 문제를 발견했다. 이 문제를 해결하기 위해서 &lt;strong&gt;자식창&lt;/strong&gt;을 Popup으로 열때 &lt;code&gt;iframe&lt;/code&gt;을 생성하여 &lt;code&gt;iframe&lt;/code&gt; 내부에서 페이지가 열리고 다른 HOST로 리다이렉트 되게 하였다. 마지막 결과를 처리하는 최종 &lt;strong&gt;자식창&lt;/strong&gt;의 페이지에서 &lt;strong&gt;부모창&lt;/strong&gt;에 접근하기 위해서 &lt;code&gt;iframe&lt;/code&gt;을 매개체로 상위 객체로 접근하게 되면 &lt;strong&gt;자식창&lt;/strong&gt;의 페이지가 다른 HOST로 리다이렉트 될 때 &lt;code&gt;window.opener&lt;/code&gt; 객체가 &lt;code&gt;undefined&lt;/code&gt;되는 문제를 해결 할 수 있었다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/7120534/window-opener-is-null-after-redirect&quot;&gt;http://stackoverflow.com/questions/7120534/window-opener-is-null-after-redirect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5656349/close-child-window-redirect-parent-window&quot;&gt;http://stackoverflow.com/questions/5656349/close-child-window-redirect-parent-window&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://abcoder.com/javascript/maintain-reference-to-popup-window-over-page-refresh-or-redirect-in-javascript-solved&quot;&gt;http://abcoder.com/javascript/maintain-reference-to-popup-window-over-page-refresh-or-redirect-in-javascript-solved&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;연구원-소개&quot;&gt;연구원 소개&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;작성자 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;송성광&lt;/a&gt; 개발 연구원&lt;/li&gt;
&lt;li&gt;블로그 : &lt;a href=&quot;http://blog.saltfactory.net&quot;&gt;http://blog.saltfactory.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;이메일 : &lt;a href=&quot;mailto:saltfactory@gmail.com&quot;&gt;saltfactory@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;트위터 : &lt;a href=&quot;https://twitter.com/saltfactory&quot;&gt;@saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;페이스북 : &lt;a href=&quot;https://facebook.com/salthub&quot;&gt;https://facebook.com/salthub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;연구소 : &lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설연구소&lt;/li&gt;
&lt;li&gt;연구실 : &lt;a href=&quot;http://dblab.changwon.ac.kr&quot;&gt;창원대학교 데이터베이스 연구실&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 13 Mar 2015 00:00:00 +0900</pubDate>
        <link>/series/javascript/access-opener-after-redirecting-popup-window-using-iframe.html</link>
        <guid isPermaLink="true">/series/javascript/access-opener-after-redirecting-popup-window-using-iframe.html</guid>
        
        <category>javascript</category>
        
        <category>opener</category>
        
        <category>window</category>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>node-gallery3을 이용하여 Gallery3 REST API 사용하기</title>
        <description>&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

&lt;p&gt;Gallery3은 이미지 호스팅 서비스를 개발할 때 가장 많이 사용하고 있는 오픈소스 Photo Album Organizer이다. Gallery3은 REST API를 지원하기 때문에 서버에 Gallery3을 운영하고 있다면 REST API를 사용하여 다양한 어플리케이션을 개발 할 수 있다. Gallery3의 API를 사용하기 위해 node.js 모듈 node-gallery3을 만들었다. node-gallery3을 이용하여 Gallery3 REST API를 사용하는 방법에 대해서 소개한다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;gallery-소개&quot;&gt;Gallery 소개&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://galleryproject.org/&quot;&gt;Gallery&lt;/a&gt;는 웹에서 사진을 관리하기 위한 오픈소스 Photo Album Organizer 이다. &lt;a href=&quot;https://instagram.com/&quot;&gt;Instagram&lt;/a&gt;이나 &lt;a href=&quot;https://story.kakao.com&quot;&gt;KakaoStory&lt;/a&gt;등 SNS가 유행하면서 지금은 예전처럼 Photo Gallery 사이트를 많이 볼수 없지만 아직 전문적인이고 체계적인 이미지 서비스를 위해 Photo Gallery를 도입하여 사용하는 곳이 많다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://500px.com/&quot;&gt;500px&lt;/a&gt;과 같은 사진 커뮤니티를 만들기 위해서 어렵게 프로그램을 만들지 않고 Gallery을 사용하여 이와 같은 서비스를 쉽게 만들 수 있다. Gallery은 오래전부터 인기있는 &lt;a href=&quot;http://php.net&quot;&gt;PHP&lt;/a&gt; 오픈소스 프로젝트 중에 하나이다. Gallery 프로젝트는 Gallery1, Gallery2 그리고 Gallery3 버전으로 개발이 진행되고 있고 가장 최근의 프로젝트가 Gallery3 이다.&lt;/p&gt;

&lt;h2 id=&quot;gallery3-rest&quot;&gt;Gallery3 REST&lt;/h2&gt;

&lt;p&gt;Gallery3는 앨범과 사진정보에 관한 &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_state_transfer&quot;&gt;RESTful&lt;/a&gt; 서비스 모듈을 추가 하였다. &lt;a href=&quot;http://codex.galleryproject.org/Gallery3:API:RESTl&quot;&gt;Gallery3:API:REST&lt;/a&gt; 페이지에서 Gallery3의 REST 서비스에 관한 자세한 설명을 참조할 수 있다.&lt;/p&gt;

&lt;p&gt;Gallery3의 REST 서비스를 요청하기 위해서 http 요청을 할 때 header에 &lt;strong&gt;X-Gallery-Request-Key&lt;/strong&gt;와 &lt;strong&gt;X-Gallery-Request-Method&lt;/strong&gt;를 반드시 추가해서 사용해야한다.&lt;/p&gt;

&lt;h3 id=&quot;x-gallery-request-key&quot;&gt;X-Gallery-Request-Key&lt;/h3&gt;

&lt;p&gt;Gallery의 REST 서비스를 요청하는 header에 request key를 반드시 필요하는데 이 값은 Login 요청으로 획득할 수 있다. &lt;a href=&quot;http://codex.galleryproject.org/Gallery3:API:RESTl&quot;&gt;Gallery3:API:REST&lt;/a&gt; 페이지에서 &lt;strong&gt;X-Gallery-Request-Key&lt;/strong&gt;를 획득하기 위한 요청 예제를 찾을 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;POST /gallery3/index.php/rest HTTP/1.1
Host: example.com
X-Gallery-Request-Method: post
Content-Type: application/x-www-form-urlencoded
Content-Length: 25
user=admin&amp;amp;password=12345
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 요청의 결과는 아래와 같이 &lt;strong&gt;X-Gallery-Request-Key&lt;/strong&gt;의 값을 문자열로 응답을 받을 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; HTTP/1.1 200 OK
 Content-Length: 34
 Content-Type: application/json
 &amp;quot;1114d4023d89b15ce10a20ba4333eff7&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 발급 받은 &lt;strong&gt;X-Gallery-Request-Key&lt;/strong&gt;를 이용하여 Gallery REST API를 요청할 수 있다. 예를 들어 &lt;strong&gt;item 1&lt;/strong&gt;에 관한 &lt;strong&gt;GET&lt;/strong&gt; 요청을 한다면 다음과 같이 발급받은 X-Gallery-Request-Key를 이용하여 요청할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;GET /gallery3/index.php/rest/item/1 HTTP/1.1
Host: example.com
X-Gallery-Request-Method: get
X-Gallery-Request-Key: 1114d4023d89b15ce10a20ba4333eff7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;x-gallery-request-method&quot;&gt;X-Gallery-Request-Method&lt;/h3&gt;

&lt;p&gt;Gallery REST 서비스도 다른 &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_state_transfer&quot;&gt;RESTful&lt;/a&gt;와 동일하게 &lt;strong&gt;Method&lt;/strong&gt;를 이용하여 동일한 URL에 다른 의미의 요청을 가능하게 할 수 있다. Method의 값은 &lt;strong&gt;GET&lt;/strong&gt;, &lt;strong&gt;POST&lt;/strong&gt;, &lt;strong&gt;UPDATE&lt;/strong&gt; 그리고 &lt;strong&gt;DELETE&lt;/strong&gt;로 지정 할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;response-format&quot;&gt;Response format&lt;/h3&gt;

&lt;p&gt;Gallery3의 REST의 요청의 결과는 &lt;strong&gt;JSON&lt;/strong&gt;과 &lt;strong&gt;HTML&lt;/strong&gt;으로 받을 수 있는데 &lt;code&gt;output&lt;/code&gt;이라는 파라미터를 추가후 &lt;code&gt;output=json&lt;/code&gt;또는 &lt;code&gt;output=html&lt;/code&gt;으로 지정할 수 있다. 기본적으로는 &lt;code&gt;json&lt;/code&gt;으로 지정된다. 다음은 응답받은 JSON 문자열이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; GET /gallery3/index.php/rest/item/1
 ...
 HTTP/1.1 200 OK
 Content-Length: 1200
 Content-Type: application/json
 {&amp;quot;url&amp;quot;:&amp;quot;http:\/\/example.com\/gallery3\/index.php\/rest\/item\/1&amp;quot;,&amp;quot;entity&amp;quot;:{&amp;quot;id&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;captured&amp;quot;:
 null,&amp;quot;created&amp;quot;:&amp;quot;1270793819&amp;quot;,&amp;quot;description&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;height&amp;quot;:null,&amp;quot;level&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;mime_type&amp;quot;:null,
 &amp;quot;name&amp;quot;:null,&amp;quot;owner_id&amp;quot;:&amp;quot;2&amp;quot;,&amp;quot;rand_key&amp;quot;:null,&amp;quot;resize_height&amp;quot;:null,&amp;quot;resize_width&amp;quot;:null,&amp;quot;slug&amp;quot;:null,
 &amp;quot;sort_column&amp;quot;:&amp;quot;weight&amp;quot;,&amp;quot;sort_order&amp;quot;:&amp;quot;ASC&amp;quot;,&amp;quot;thumb_height&amp;quot;:&amp;quot;103&amp;quot;,&amp;quot;thumb_width&amp;quot;:&amp;quot;164&amp;quot;,&amp;quot;title&amp;quot;:
 &amp;quot;Gallery&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;album&amp;quot;,&amp;quot;updated&amp;quot;:&amp;quot;1270958456&amp;quot;,&amp;quot;view_count&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;width&amp;quot;:null,&amp;quot;view_1&amp;quot;:&amp;quot;1&amp;quot;,
 &amp;quot;view_2&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;album_cover&amp;quot;:&amp;quot;http:\/\/example.com\/gallery3\/index.php\/rest\/item\/3&amp;quot;,
 &amp;quot;thumb_url&amp;quot;:&amp;quot;http:\/\/example.com\/gallery3\/var\/thumbs\/\/.album.jpg?m=1270958456&amp;quot;},
 &amp;quot;relationships&amp;quot;:{&amp;quot;tags&amp;quot;:{&amp;quot;url&amp;quot;:&amp;quot;http:\/\/example.com\/gallery3\/index.php\/rest\/item_tags\/1&amp;quot;,
 &amp;quot;members&amp;quot;:[&amp;quot;http:\/\/example.com\/gallery3\/index.php\/rest\/tag_item\/9,1&amp;quot;,
 &amp;quot;http:\/\/example.com\/gallery3\/index.php\/rest\/tag_item\/10,1&amp;quot;]}},&amp;quot;members&amp;quot;:[
 &amp;quot;http:\/\/example.com\/gallery3\/index.php\/rest\/item\/7&amp;quot;,
 &amp;quot;http:\/\/example.com\/gallery3\/index.php\/rest\/item\/11&amp;quot;,
 &amp;quot;http:\/\/example.com\/gallery3\/index.php\/rest\/item\/26&amp;quot;]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 결과를 JSON 객체로 변형하면 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{
   &amp;quot;url&amp;quot;: &amp;quot;http://example.com/gallery3/index.php/rest/item/1&amp;quot;,
   &amp;quot;entity&amp;quot;: {
     &amp;quot;id&amp;quot;: &amp;quot;1&amp;quot;,
     &amp;quot;captured&amp;quot;: null,
     &amp;quot;created&amp;quot;: &amp;quot;1270793819&amp;quot;,
     &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
     &amp;quot;height&amp;quot;: null,
     &amp;quot;level&amp;quot;: &amp;quot;1&amp;quot;,
     &amp;quot;mime_type&amp;quot;: null,
     &amp;quot;name&amp;quot;: null,
     &amp;quot;owner_id&amp;quot;: &amp;quot;2&amp;quot;,
     &amp;quot;rand_key&amp;quot;: null,
     &amp;quot;resize_height&amp;quot;: null,
     ...skipped some values to keep things short...
     &amp;quot;album_cover&amp;quot;: &amp;quot;http://example.com/gallery3/index.php/rest/item/3&amp;quot;,
     &amp;quot;thumb_url&amp;quot;: &amp;quot;http://example.com/gallery3/var/thumbs//.album.jpg?m=1270958456&amp;quot;
   },
   &amp;quot;relationships&amp;quot;: {
     &amp;quot;tags&amp;quot;: {
       &amp;quot;url&amp;quot;: &amp;quot;http://example.com/gallery3/index.php/rest/item_tags/1&amp;quot;,
       &amp;quot;members&amp;quot;: [
         &amp;quot;http://example.com/gallery3/index.php/rest/tag_item/9,1&amp;quot;,
         &amp;quot;http://example.com/gallery3/index.php/rest/tag_item/10,1&amp;quot;
       ]
      }
    },
   &amp;quot;members&amp;quot;: [
     &amp;quot;http://example.com/gallery3/index.php/rest/item/7&amp;quot;,
     &amp;quot;http://example.com/gallery3/index.php/rest/item/11&amp;quot;,
     &amp;quot;http://example.com/gallery3/index.php/rest/item/26&amp;quot;
   ]
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GAllery의 REST의 결과값은 크게 &lt;strong&gt;url&lt;/strong&gt;, &lt;strong&gt;entity&lt;/strong&gt;, &lt;strong&gt;relationships&lt;/strong&gt;, &lt;strong&gt;memebers&lt;/strong&gt; 로 나눌 수 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;url&lt;/strong&gt; : REST로 접근한 URL&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;entity&lt;/strong&gt; : item의 정보 (앨범, 사진, 영상 등 Gallery의 모든 객체를 item*으로 표현하고 있고 item은 entity로 세부 정보를 지정하거나 표현된다)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;releationships&lt;/strong&gt; : 요청한 item과 연관된 item의 집합&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;members&lt;/strong&gt; : item에 접근 가능한 멤버의 집합&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;node-gallery3&quot;&gt;node-gallery3&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&lt;/a&gt; 프로젝트를 진행하면서 이미지 관련해서 Gallery3 서비스를 구축하여 이미지를 관리하기 위해 Node로 만들어진 Gallery3 Client가 필요했다. Gallery3 공식 페이지에서는 &lt;a href=&quot;http://codex.galleryproject.org/Gallery_3:Other_Clients:Gallery_3_REST_Client_(rWatcher)&quot;&gt;rWatcher&lt;/a&gt;라는 클라이언트와 &lt;a href=&quot;http://codex.galleryproject.org/Category:Gallery_3:Other_Clients&quot;&gt;써드파티 클라이언트&lt;/a&gt;에 관한 자료를 제공하고 있고,  &lt;a href=&quot;http://codex.galleryproject.org/Gallery3:API:REST:Python&quot;&gt;python&lt;/a&gt;과 &lt;a href=&quot;http://codex.galleryproject.org/Gallery3:API:REST:Java-Android&quot;&gt;android-java&lt;/a&gt;로 된 예제는 공개하고 있지만 Node.js 모듈로 만들어진 client 자료는 없어서 직접 만들게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/saltfactory/node-gallery3&quot;&gt;node-gallery3&lt;/a&gt;는 Gallery3의 REST API를 사용하기 위한 &lt;a href=&quot;https://github.com/request/request&quot;&gt;Request.js&lt;/a&gt;를 이용하여 Gallery REST API 요청을  랩핑한 모듈이다. 직관적이고 코드의 간결성을 위해 &lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;Promise&lt;/a&gt;를 사용하여 응답을 처리하도록 하였다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;node-gallery3&lt;/strong&gt;은 NPM을 이용하여 쉽게 설치할 수 있다. global &lt;code&gt;-g&lt;/code&gt; 옵션을 이용하여 설치하면 CLI로 사용도 가능하다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;npm install node-gallery3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;node-gallery3&lt;/strong&gt;는 객체를 생성할 때 Gallery3 서버의 정보를 입력하거나 정보를 &lt;code&gt;$HOME/.gallery3.json&lt;/code&gt; 파일을 만들어서 사용 할 수 있다. &lt;strong&gt;node-gallery3&lt;/strong&gt; 사용하기 위한 설정 값은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;host&lt;/strong&gt; : Gallery3 서버가 설치된 호스트 정보&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;basae&lt;/strong&gt; : Gallery3 서버에 Gallery3가 설치된 URL 경로 (생략하면 &lt;code&gt;/gallery3&lt;/code&gt;이 기본 값으로 지정)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rootItemId&lt;/strong&gt; : 기본적으로 REST 요청을 타겟 Item으로 보통 사진 파일을 업로드할 앨범의 id를 지정 (생락하면 &lt;code&gt;1&lt;/code&gt;이 기본 값으로 지정)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;requestKey&lt;/strong&gt; : Gallery3의 REST API를 요청하기 위해서 반드시 필요한 &lt;strong&gt;X-Gallery-Request-Key&lt;/strong&gt;의 값&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;생성자에 정보를 입력하여 사용하는 방법은 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var options = {
    host: &amp;#39;http://example.com&amp;#39;,
    base: &amp;#39;/gallery3&amp;#39;,
    rootItemId: 1,
    requestKey: &amp;#39;1234abcd&amp;#39;
};
var gallery3 = new Gallery3(options);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;설정 파일로 만들어서 사용하려면 &lt;code&gt;$HOME/.gallery3.json&lt;/code&gt; 파일에 다음과 같이 저장한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{
    &amp;#39;host&amp;#39;: &amp;#39;http://example.com&amp;#39;,
    &amp;#39;base&amp;#39;: &amp;#39;/gallery3&amp;#39;,
    &amp;#39;rootItemId&amp;#39;: 1,
    &amp;#39;requestKey&amp;#39;: &amp;#39;1234abcd&amp;#39;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;gallery3.login(user,-password)&quot;&gt;Gallery3.login(user, password)&lt;/h2&gt;

&lt;p&gt;Gallery3의 REST API를 사용하기 위해서는 &lt;strong&gt;X-Gallery-Request-Key&lt;/strong&gt;가 필요한데 이 값을 획득하기 위해서 &lt;strong&gt;node-gallery3&lt;/strong&gt;의 &lt;code&gt;Gallery3.login(user, password)&lt;/code&gt; 메소드를 사용하여 획득 할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  describe(&amp;#39;login&amp;#39;, function(){
    it(&amp;#39;login user/password&amp;#39;, function(done){
      var user = &amp;#39;user&amp;#39;;
      var password = &amp;#39;password&amp;#39;

      gallery3.login(user, password)
        .success(function(result){
          console.log(result);
        })
        .error(function(err){
          console.log(err);
        })
        .finally(done);
    });
  });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://assets.hibrainapps.net/images/var/albums/posts/Screen_Shot_2015-03-11_at_10_25_24_AM.png?m=1426039276&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;gallery3.finditem(identifier)&quot;&gt;Gallery3.findItem(identifier)&lt;/h2&gt;

&lt;p&gt;Gallery3에서는 &lt;strong&gt;앨범&lt;/strong&gt;, &lt;strong&gt;사진&lt;/strong&gt;, &lt;strong&gt;동영상&lt;/strong&gt; 등 모든 정보를 &lt;strong&gt;item&lt;/strong&gt;이라는 개념으로 정보를 표현한다. 이미 만들어진 앨범의 정보를 요청하기 위해서 &lt;code&gt;Gallery3.findItem(identifier)&lt;/code&gt; 메소드를 사용하여 정보를 가져올 수 있다. 이때 &lt;strong&gt;identifier&lt;/strong&gt;는 고유 &lt;strong&gt;URL&lt;/strong&gt;이거나 &lt;strong&gt;ItemId&lt;/strong&gt;를 넣어주면 된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;describe.only(&amp;#39;findItem&amp;#39;, function(){
    var itemId = 2;
    var url = gallery3.options.host + gallery3.options.base + &amp;#39;/rest/item/&amp;#39; + itemId;

    it(&amp;#39;find item by url&amp;#39;, function(done){
      console.log(gallery3);
      gallery3.findItem(url)
        .success(function(result){
          console.log(result)
        })
        .error(function(err){
          console.log(err);
        })
        .finally(done);
    });

    it(&amp;#39;find item by item id&amp;#39;, function(done){
      gallery3.findItem(itemId)
        .success(function(result){
          console.log(result)
        })
        .error(function(err){
          console.log(err);
        })
        .finally(done);
    });
  });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://assets.hibrainapps.net/images/var/albums/posts/Screen_Shot_2015-03-11_at_10_28_34_AM.png?m=1426039277&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;gallery3.createitem(entity,-identifier)&quot;&gt;Gallery3.createItem(entity, identifier)&lt;/h2&gt;

&lt;p&gt;Gallery3에서 &lt;strong&gt;앨범&lt;/strong&gt;은 &lt;code&gt;type&lt;/code&gt;이 &lt;code&gt;album&lt;/code&gt;인 &lt;strong&gt;item&lt;/strong&gt;이다. 새로운 앨범을 생성하기 위해서는 &lt;code&gt;Gallery3.createItem(entity, identifier)&lt;/code&gt; 메소드를 사용한다. entity의 내용은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt; : 앨범을 만들기 위해서&amp;#39;album&amp;#39; 으로 지정한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt; : 앨범의 이름&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;title&lt;/strong&gt; : 앨범 타이틀&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;앨범은 특정 앨범 하위에 서브 앨범으로 만들 수 있는데 이 때 상위 item의 &lt;strong&gt;identifier&lt;/strong&gt;(상위 item의 URL이나 itemId)를 입력한다. 정상적으로 앨범이 생성되면 결과 값으로 생성한 앨범의 &lt;strong&gt;URL&lt;/strong&gt;을 가진 &lt;strong&gt;JSON&lt;/strong&gt;을 반환한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; describe.only(&amp;#39;create Item&amp;#39;, function(){
    var itemId = 2;
    var url = gallery3.options.host + gallery3.options.base + &amp;#39;/rest/item/&amp;#39; + itemId;
    var entity = {
      type: &amp;#39;album&amp;#39;,
      name: &amp;#39;Sample Album&amp;#39;,
      title: &amp;#39;This is my Sample Album&amp;#39;
    };

    it(&amp;#39;create Item without parentItem, default&amp;#39;, function(done){
      gallery3.createItem(entity)
        .success(function(result){
          console.log(result)
        })
        .error(function(err){
          console.log(err);
        })
        .finally(done);
    });

    it(&amp;#39;create Item in parent item by url&amp;#39;, function(done){
      gallery3.createItem(entity, url)
        .success(function(result){
          console.log(result)
        })
        .error(function(err){
          console.log(err);
        })
        .finally(done);
    });

    it(&amp;#39;create Item in parent item by itemId&amp;#39;, function(done){
      gallery3.createItem(entity, itemId)
        .success(function(result){
          console.log(result)
        })
        .error(function(err){
          console.log(err);
        })
        .finally(done);
    });
  });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://assets.hibrainapps.net/images/var/albums/posts/Screen_Shot_2015-03-11_at_10_39_26_AM.png?m=1426039277&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;gallery3.uploadfile(filepath,-entity,-identifier)&quot;&gt;Gallery3.uploadFile(filePath, entity, identifier)&lt;/h2&gt;

&lt;p&gt;Gallery3의 주 목적은 사진을 업로드하는 것이다. 사진을 Gallery3에 업로드하기 위해서는 &lt;code&gt;Gallery3.uploadFile(filePath, entity, identifier)&lt;/code&gt; 메소드를 사용하면 된다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;filePath&lt;/strong&gt; : 컴퓨터 내의 파일 경로&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;entity&lt;/strong&gt; : 사진의 정보(이름, 파일이름, 설명 등)를 entity 형식으로 명시할 수 있다. (생략하면 파일 이름 기반으로 자동으로 만들어짐)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;identifier&lt;/strong&gt; : 사진이 업로드될 앨범 (생략하면 itemId가 1인 최상위에 사진이 업로드 된다)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이미지가 정상적으로 업로드가 되면 업로된 객체의 &lt;strong&gt;Item&lt;/strong&gt;에 대한 고유 URL을 JSON 형태로 반환한다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;업로드 후 반환되는 URL은 이미지의 URL이 아니라 이미지의 정보를 가지는 Item의 URL이라는 것을 주의해야한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이미지에의 URL을 획득하기 위해서는 &lt;code&gt;Gallery3.findItem(identifier)&lt;/code&gt;를 사용하면 이미지의 URL 정보를 포함한 JSON을 가져올 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;describe.only(&amp;#39;upload file&amp;#39;, function(){
    var itemId = 2;
    var url = gallery3.options.host + gallery3.options.base + &amp;#39;/rest/item/&amp;#39; + itemId;
    var filePath = &amp;#39;/Users/saltfactory/Downloads/bh6hug.jpg&amp;#39;;
    var entity = {
      title: &amp;#39;title&amp;#39;,
      description: &amp;#39;description&amp;#39;
    };

    it(&amp;#39;upload file without parent identifier&amp;#39;, function(done){
      //gallery3 = new Gallery3({rootItemId:58});

      gallery3.uploadFile(filePath)
        .success(function(result){
          console.log(result)
        })
        .error(function(err){
          console.log(err);
        })
        .finally(done);
    });

    it(&amp;#39;upload file without entity in parent album by url&amp;#39;, function(done){

      gallery3.uploadFile(filePath, url)
        .success(function(result){
          console.log(result)
        })
        .error(function(err){
          console.log(err);
        })
        .finally(done);
    });

    it(&amp;#39;upload file without entity in parent album by id&amp;#39;, function(done){
      gallery3.uploadFile(filePath, itemId)
        .success(function(result){
          console.log(result)
        })
        .error(function(err){
          console.log(err);
        })
        .finally(done);
    });

    it(&amp;#39;upload file with entity&amp;#39;, function(done){
      gallery3.uploadFile(filePath, entity)
        .success(function(result){
          console.log(result)
        })
        .error(function(err){
          console.log(err);
        })
        .finally(done);
    });

    it(&amp;#39;upload file with entity and url&amp;#39;, function(done){
      gallery3.uploadFile(filePath, entity, url )
        .success(function(result){
          console.log(result)
        })
        .error(function(err){
          console.log(err);
        })
        .finally(done);
    });

    it(&amp;#39;upload file with entity and itemId&amp;#39;, function(done){
      gallery3.uploadFile(filePath, entity, itemId )
        .success(function(result){
          console.log(result)
        })
        .error(function(err){
          console.log(err);
        })
        .finally(done);
    });

  });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://assets.hibrainapps.net/images/var/albums/posts/Screen_Shot_2015-03-11_at_10_45_53_AM.png?m=1426039276&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;gallery3.getimageurlpublic(identifier)&quot;&gt;Gallery3.getImageUrlPublic(identifier)&lt;/h2&gt;

&lt;p&gt;Gallery3를 이용하면서 이미지 자체의 URL이 필요한 경우가 있다. 이때는 &lt;code&gt;Gallery3.findItem(identifier)&lt;/code&gt;를 사용하여 가져올 수도 있지만 좀 더 직관적인 메소드인 &lt;code&gt;Gallery3.getImageUrlPublic(identifier)&lt;/code&gt;를 사용하여 이미지의 URL 가져올 수 있다. 위의 예제에서 생성한 Item 110 사진의 URL을 가져오는 예제를 만들어 보자.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;describe.only(&amp;#39;getImageUrlPublic&amp;#39;, function(){
    var itemId = 110;
    var url = gallery3.options.host + gallery3.options.base +&amp;#39;/rest/item/&amp;#39;+itemId;

    it(&amp;#39;get public image url by url&amp;#39;, function(done){
      gallery3.getImageUrlPublic(url)
        .success(function(result){
          console.log(result)
        })
        .error(function(err){
          console.log(err);
        })
        .finally(done);
    });

    it(&amp;#39;get public image url by itemId&amp;#39;, function(done){
      gallery3.getImageUrlPublic(itemId)
        .success(function(result){
          console.log(result)
        })
        .error(function(err){
          console.log(err);
        })
        .finally(done);
    });

  });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://assets.hibrainapps.net/images/var/albums/posts/Screen_Shot_2015-03-11_at_10_52_02_AM.png?m=1426039276&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/saltfactory/node-gallery3&quot;&gt;node-gallery3&lt;/a&gt;를 사용하여 Gallery3 서버에 앨범을 만들고 사진을 업로드하였다. 실제 서버에는 웹으로 업로드한 파일을 다음과 같이 관리할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://assets.hibrainapps.net/images/var/albums/posts/Screen%20Shot%202015-03-11%20at%2010_54_25%20AM.png?m=1426039277&quot; alt=&quot;&quot;&gt;
&lt;img src=&quot;http://assets.hibrainapps.net/images/var/albums/posts/Screen%20Shot%202015-03-11%20at%2010_54_12%20AM.png?m=1426039277&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Gallery3은 앨범을 만들거나 사진을 관리하기 위한 오픈 소스 프로젝트이만 사용하는 방법에 따라서 다양한 서비스를 만들 수 있다. 이렇게 구축된 Gallery3 서비스를 클라이언트 프로그램이나 외부 프로그램에서 Gallery3의 RESTful API를 사용하여 편리하게 데이터를 가져올 수 있다. 이 때 &lt;strong&gt;node-gallery3&lt;/strong&gt;를 이용하면 편리하고 쉽게 Gallery3의 데이터를 관리할 수 있을 것이다. &lt;strong&gt;node-gallery3&lt;/strong&gt;은 CLI를 제공하고 있다. Unix나 Mac을 사용하는 사용자는 터미널에서 쉽게 파일을 Gallery3로 업로드할 수 있다. &lt;strong&gt;node-gallery3&lt;/strong&gt;을 이용하여 확장된 Gallery3 클라이언트 프로그램도 만들 수 있을 것이다.&lt;/p&gt;

&lt;h2 id=&quot;참조&quot;&gt;참조&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://codex.galleryproject.org/Gallery3:API:REST&quot;&gt;http://codex.galleryproject.org/Gallery3:API:REST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/request/request&quot;&gt;https://github.com/request/request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;https://github.com/kriskowal/q&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;연구원-소개&quot;&gt;연구원 소개&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;작성자 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;송성광&lt;/a&gt; 개발 연구원&lt;/li&gt;
&lt;li&gt;블로그 : &lt;a href=&quot;http://blog.saltfactory.net&quot;&gt;http://blog.saltfactory.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;이메일 : &lt;a href=&quot;mailto:saltfactory@gmail.com&quot;&gt;saltfactory@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;트위터 : &lt;a href=&quot;https://twitter.com/saltfactory&quot;&gt;@saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;페이스북 : &lt;a href=&quot;https://facebook.com/salthub&quot;&gt;https://facebook.com/salthub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;연구소 : &lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설연구소&lt;/li&gt;
&lt;li&gt;연구실 : &lt;a href=&quot;http://dblab.changwon.ac.kr&quot;&gt;창원대학교 데이터베이스 연구실&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 10 Mar 2015 00:00:00 +0900</pubDate>
        <link>/series/node/introduce-node-gallery3.html</link>
        <guid isPermaLink="true">/series/node/introduce-node-gallery3.html</guid>
        
        <category>javascript</category>
        
        <category>node</category>
        
        <category>node.js</category>
        
        <category>gallery3</category>
        
        <category>api</category>
        
        <category>rest</category>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>Mac과 Docker 상호간 디렉토리 공유하기 (Boot2Docker에서 VOLUME 사용)</title>
        <description>&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

&lt;p&gt;Mac에서 &lt;strong&gt;Docker&lt;/strong&gt;를 사용하기 위해서는 &lt;strong&gt;Boot2Docker&lt;/strong&gt;를 사용해야한다. Boot2Docker는 VirtualBox를 사용하기 때문에 Docker에 바로 로컬디렉토리를 공유폴더로 지정하기 위해서는 VirtualBox를 통해서 사용해야한다. 이러한 이유로 Docker에서 VOLUME을 사용하는 방법과 다른 방법이 필요하다. 이 포스트에서는 ssfs를 사용하여 Boot2Docker에서 Mac과 Docker 상호간 디렉토리를 공유하는 방법에대해 소개한다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;boot2docker&quot;&gt;Boot2Docker&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Docker_(software)&quot;&gt;Docker&lt;/a&gt;는 리눅스 커널 기반의 컨테이너 개념을 가지고 운용하는데 Mac은 리눅스 기반의 시스템이 아니기 때문에 &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt; 기반에서 Docker를 운영할 수 있다. &lt;a href=&quot;http://boot2docker.io/&quot;&gt;Boot2Docker&lt;/a&gt;는 Mac이나 Windows에서 VirtualBox를 사용하여 가볍고 빠른 &lt;a href=&quot;http://tinycorelinux.net/&quot;&gt;Tiny Core Linux&lt;/a&gt; 운영체제 기반에 Docker를 운영하도록 만든 것이다. 다시 말해서 Boot2Docker를 사용하면 Linux 계열 운영체제가 아니더라도 docker를 운영할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;boot2docker의-한계&quot;&gt;Boot2Docker의 한계&lt;/h2&gt;

&lt;p&gt;원래 Docker를 사용하면 리눅스 서버 운영체제에 격리된 컨테이너 안에서 각각 필요한 환경에서 동작한다. 상황에 따라 컨테이너 외부의 파일을 공유해야할 경우가 발생하는데 Docker에서 &lt;a href=&quot;https://docs.docker.com/reference/builder/#volume&quot;&gt;VOLUME&lt;/a&gt; 이라는 개념을 가지고 컨테이너 외부의 디렉토리를 컨테이너 내부의 디렉토리로 마운트시켜 공유할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Boot2Docker&lt;/strong&gt;를 사용하면 &lt;strong&gt;VOLUME&lt;/strong&gt;을 사용하는데 제한이 있다. Boot2Docker는 리눅스 계열이 아닌 운영체제에서 VirutualBox를 사용하여 가상머신 위에 Tiny Core Linux를 사용하고 있기 때문에 Local Host에서 Docker 컨테이너 내부에 직접적으로 디렉토리를 마운트를 시킬 수가 없다.&lt;/p&gt;

&lt;h2 id=&quot;sshfs&quot;&gt;SSHFS&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/SSHFS&quot;&gt;ssfs&lt;/a&gt;는 원격지에 있는 디렉토리를 ssh 커넥션으로 로컬의 디렉토리에 마운트 시키는 파일시스템 클라이언트이다. &lt;strong&gt;ssfs&lt;/strong&gt;는 &lt;a href=&quot;http://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol&quot;&gt;SFTP&lt;/a&gt;을 이용하여 데이터를 엑세스한다.&lt;/p&gt;

&lt;h2 id=&quot;boot2docker-환경에서-sshfs를-이용하여-volume-사용하기&quot;&gt;Boot2Docker 환경에서 SSHFS를 이용하여 VOLUME 사용하기&lt;/h2&gt;

&lt;p&gt;SSHFS를 이용하면 Boot2Docker의 한계를 개선하여 디렉토리를 공유할 수 있다.
원리는 간단히 설명하면 SSHFS를 이용하여  Mac OS X 디렉토리를 Boot2Docker의 운영체제에 마운트를 하고,  Docker 실행할 때  Boot2Docker의 디렉토리를 docker 컨테이너로 마운트하게 된다. 즉, Mac OS X -&amp;gt; Boot2Docker -&amp;gt; Docker로 된다.&lt;/p&gt;

&lt;h3 id=&quot;1.-sshfs-설치-(mac)&quot;&gt;1. SSHFS 설치 (Mac)&lt;/h3&gt;

&lt;p&gt;Mac OS X에 SSHFS를 설치한다. SSHFS는 osxfuse를 이용하여 마운트를 하기 때문에 osxfuse를 함께 설치한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;brew install Caskroom/cask/osxfuse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;brew install sshfs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;2.-local의-공유-디렉토리-생성-(mac)&quot;&gt;2. Local의 공유 디렉토리 생성 (Mac)&lt;/h3&gt;

&lt;p&gt;최종적으로 Docker에 공유하기 위한 Mac OS X에 디렉토리를 생성한다. (현재  Mac OS X 안 경로에 만드는 것이다)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;mkdir /Users/saltfactory/shared
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;3.-sshfs-fuse-로드-(boot2docker)&quot;&gt;3. sshfs-fuse 로드 (Boot2Docker)&lt;/h3&gt;

&lt;p&gt;Boot2Docker 안에서 sshfs를 사용하여 원격에 있는 디렉토리를 마운트하기 위해 Boot2Docker에 ssh로 로그인후 &lt;strong&gt;sshfs-fuse&lt;/strong&gt;를 로드한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;boot2docker ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;boot2docker tce-load -wi sshfs-fuse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;4.-마운트될-디렉토리-생성-(boot2docker)&quot;&gt;4. 마운트될 디렉토리 생성 (Boot2Docker)&lt;/h3&gt;

&lt;p&gt;Boot2Docker 안에서 Mac OS X에서 생성한 디렉토리를 마운트할 디렉토리 지점을 지정하기 위해서 디렉토리를 생성한다. (현재 Boot2Docker 안 경로에 만드는 것이다)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;mkdir /home/docker/shared
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;5.-마운트-설정을-위해-fuse.conf-추가-(boot2docker)&quot;&gt;5. 마운트 설정을 위해 fuse.conf 추가 (Boot2Docker)&lt;/h3&gt;

&lt;p&gt;SSFS는 fuse를 사용하여 Mac OS X로부터 Boot2Docker에 디렉토리를 마운트하게 되는데 접근할 수 있는 권한을 설정하기 위해서  /etc/fuse.conf 파일을 다음 내용으로 추가한다. (현재 Boot2Docker 안 경로에서 만드는 것이다)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# filename: fuse.conf
# Set the maximum number of FUSE mounts allowed to non-root users.
# The default is 1000.
#
#mount_max = 1000

# Allow non-root users to specify the &amp;#39;allow_other&amp;#39; or &amp;#39;allow_root&amp;#39;
# mount options.
#
user_allow_other
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;6.-sshfs를-이용하여-마운트-(boot2docker)&quot;&gt;6. SSHFS를 이용하여 마운트 (Boot2Docker)&lt;/h3&gt;

&lt;p&gt;Boot2Docker 내부에서 SSFS를 이용하여 Mac에 생성한 디렉토리를 마운트한다. SSHFS를 사용할 때 Mac의 계정과 Boot2Docker에서 접근가능한 Mac의 내부 HostIP가 필요하다. SSHFS로  Mac의 디렉토리를 Boot2Docker에 마운트하기 위해서는 다음과 같이 사용한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sshfs -o allow_other {Mac계정}@{Boot2Docker에서 Mac에 접근할 수 있는 내무 HostIP}:/Users/saltfactory/shared /home/docker/shared
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Boot2Docker에서 접근 가능하는 내부 HostIP는 &lt;code&gt;boot2docker config&lt;/code&gt;에서 확인할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;boot2docker config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 명령어를 실행하면 아래와 같이 Boot2Docker의 설정을 볼 수 있는데 &lt;strong&gt;HostIP&lt;/strong&gt; 값을 참조하면 된다. (아래 결과에서는 HostIP 값이 192.168.59.3 이다)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# boot2docker profile filename: /Users/saltfactory/.boot2docker/profile
Init = false
Verbose = false
Driver = &amp;quot;virtualbox&amp;quot;
Clobber = true
ForceUpgradeDownload = false
SSH = &amp;quot;ssh&amp;quot;
SSHGen = &amp;quot;ssh-keygen&amp;quot;
SSHKey = &amp;quot;/Users/saltfactory/.ssh/id_boot2docker&amp;quot;
VM = &amp;quot;boot2docker-vm&amp;quot;
Dir = &amp;quot;/Users/saltfactory/.boot2docker&amp;quot;
ISOURL = &amp;quot;https://api.github.com/repos/boot2docker/boot2docker/releases&amp;quot;
ISO = &amp;quot;/Users/saltfactory/.boot2docker/boot2docker.iso&amp;quot;
DiskSize = 20000
Memory = 2048
SSHPort = 2022
DockerPort = 0
HostIP = &amp;quot;192.168.59.3&amp;quot;
DHCPIP = &amp;quot;192.168.59.99&amp;quot;
NetMask = [255, 255, 255, 0]
LowerIP = &amp;quot;192.168.59.103&amp;quot;
UpperIP = &amp;quot;192.168.59.254&amp;quot;
DHCPEnabled = true
Serial = false
SerialFile = &amp;quot;/Users/saltfactory/.boot2docker/boot2docker-vm.sock&amp;quot;
Waittime = 300
Retries = 75
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 SSFS로 Mac의 계정과 Boot2Docker의 HostIP를 이용하여 Mac에서 생성했던 &lt;code&gt;/Users/saltfactory/shared&lt;/code&gt; 디렉토리를 Boot2Docker의 &lt;code&gt;/home/docker/shared&lt;/code&gt;로 마운트를 시킨다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sshfs -o allow_other saltfactory@192.168.59.3:/Users/saltfactory/shared /home/docker/shared
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;지금까지 문제 없이 진행하였다면 Mac의 디렉토리가 Boot2Docker 안에 정상적으로 마운트가 되어 두 디렉토리가 공유되고 있는 것을 확인할 수 있다. Mac의 디레토리에 파일을 만들면 자동으로 Boot2Docker에 마운트된 디렉토리 안에 파일이 보여지는 것을 확인할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;Mac에서 파일을 만들어보자.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;touch /Users/saltfactory/shared/README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Boot2Docker에서 파일이 보여지는지 확인해보자.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ls -l /home/docker/shared
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ssfs로 마운트되어진 디렉토리는 다음과 같이 &lt;code&gt;fusermount&lt;/code&gt; 명령어로 마운트를 해지할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;fusermount -u /home/docker/shared
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;7.-dockerfile에-volume을-지정-(mac)&quot;&gt;7. Dockerfile에 VOLUME을 지정 (Mac)&lt;/h3&gt;

&lt;p&gt;이제 Mac OS X에서도 Boot2Docker를 사용하지만 SSHFS를 이용하여 Mac의 디렉토리를 Boot2Docker로 마운트하였기 때문에, &lt;code&gt;Dockerfile&lt;/code&gt; 안에 &lt;code&gt;VOLUME&lt;/code&gt;을 사용하여 Boot2Docker에 마운트되어 있는 리렉토리를 Docker 컨테이너안에 마운트하여 공유할 수 있게 되었다. Dockerfile에 VOLUME을 추가한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;FROM ubuntu:latest
MAINTAINER SungKwang Song &amp;lt;saltfactory@gmail.com&amp;gt;

... 생략 ...
VOLUME /shared
... 생략 ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;8.-docker-실행&quot;&gt;8. docker 실행&lt;/h3&gt;

&lt;p&gt;모든 설정이 끝났다. 마지막으로 docker를 실행하면서 Boot2Docker에 마운트된 디렉토리(&lt;code&gt;/home/docker/shared&lt;/code&gt;)를 Docker 컨테이너 디렉토리로(&lt;code&gt;/shared&lt;/code&gt;) 연결하도록 한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker run -it -v /home/docker/shared:/shared ubunt:latest /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 Mac에서 생성한 디렉토리(&lt;code&gt;/Users/saltfactory/shared&lt;/code&gt;)가 docker 컨테이너 내부의 디렉토리(&lt;code&gt;/shared&lt;/code&gt;)와 공유가 되었다. 왜 Mac의 디렉토리를 Docker 컨테이너로 마운트하는데 바로 하지 않고 Boot2Docker의 디렉토리를 마운트하는지는 앞에의 글에서 살펴보았듯이, Mac OS X -&amp;gt; Boot2Docker -&amp;gt; Docker로 마운트가 되어지기 때문이다. 즉, Boot2Docker의 디렉토리를 사용했지만 이 디렉토리는 Mac의 디렉토리의 마운트 포인트가 되고 있기 때문이다.&lt;/p&gt;

&lt;h2 id=&quot;참조&quot;&gt;참조&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/boot2docker/boot2docker#folder-sharing&quot;&gt;https://github.com/boot2docker/boot2docker#folder-sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/codeinthehole/7ea69f8a21c67cc07293&quot;&gt;https://gist.github.com/codeinthehole/7ea69f8a21c67cc07293&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forum.docker.co.kr/t/osx-sshfs-osx/163&quot;&gt;http://forum.docker.co.kr/t/osx-sshfs-osx/163&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;연구원-소개&quot;&gt;연구원 소개&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;작성자 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;송성광&lt;/a&gt; 개발 연구원&lt;/li&gt;
&lt;li&gt;블로그 : &lt;a href=&quot;http://blog.saltfactory.net&quot;&gt;http://blog.saltfactory.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;이메일 : &lt;a href=&quot;mailto:saltfactory@gmail.com&quot;&gt;saltfactory@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;트위터 : &lt;a href=&quot;https://twitter.com/saltfactory&quot;&gt;@saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;페이스북 : &lt;a href=&quot;https://facebook.com/salthub&quot;&gt;https://facebook.com/salthub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;연구소 : &lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설연구소&lt;/li&gt;
&lt;li&gt;연구실 : &lt;a href=&quot;http://dblab.changwon.ac.kr&quot;&gt;창원대학교 데이터베이스 연구실&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 06 Mar 2015 00:00:00 +0900</pubDate>
        <link>/series/docker/sharing-directory-on-boot2docker-using-with-ssfs.html</link>
        <guid isPermaLink="true">/series/docker/sharing-directory-on-boot2docker-using-with-ssfs.html</guid>
        
        <category>mac</category>
        
        <category>docker</category>
        
        <category>boot2docker</category>
        
        <category>volumn</category>
        
        <category>ssfs</category>
        
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>jekyll-img-converter 플러그인 제작 및 배포 (Markdown문서 이미지 사이즈 변환하기)</title>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/saltfactory/jekyll-img-converter&quot;&gt;jekyll-img-converter&lt;/a&gt;는 &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown&lt;/a&gt;의 이미지  문법(syntax)를 HTML으로 변환 시킬 때  이미지의 사이즈를 inline style로 추가해서 변환 시키는 &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;의 플러그인이다.
&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;jekyll과-markdown&quot;&gt;Jekyll과 Markdown&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;은 정적 웹사이트를 제작할 수 있는 Ruby 기반 &lt;a href=&quot;http://en.wikipedia.org/wiki/Static_web_page&quot;&gt;static web page generator&lt;/a&gt; 프레임워크이다. 정적 웹 사이트는 동적 웹 사이트와 달리 데이터베이스가 필요하지 않고 호스트 비용을 절감하면서 빠르게 개발할 수 있기 때문에 개발자들 사이에서 큰 인기를 가지고 있는데 Jekyll은 정적 웹 사이트 생성도구 중에서 가장 많은 관심을 받고 있다. Jekyll을 사용하면 &lt;a href=&quot;https://pages.github.com&quot;&gt;Github Pages&lt;/a&gt;에 쉽게 개인 웹 사이트 및 블로그를 생성할 수 있기 때문에 Jekyll의 인기는 더욱 높아지고 있다. 웹 사이트를 만들기 위해서는 웹 서버가 필요한데 Github pages를 이용해서 Github의 서버로 비용없이 개인 웹 페이지를 만들 수 있기 때문이다. 보다 자세한 내용은 &lt;a href=&quot;http://blog.saltfactory.net/256&quot;&gt;Jekyll을 사용하여 GitHub Pages 만들기&lt;/a&gt; 글을 참조하면 된다. Jekyll의 또 다른 인기는 &lt;strong&gt;Markdown&lt;/strong&gt;으로 생성한 문서를 웹 페이지로 자동으로 만들어주기 때문이다. Markdown은 문서를 제작하는데 집중할 수 있게 쉽게 문서를 제작할 수 있고 제작된 문서는 다양한 포멧으로 변경되거나 스타일을 적용할 수 있기 때문에 연구자나 개발자들에게 큰 인기를 갖게 되었다. &lt;strong&gt;Jekyll&lt;/strong&gt;의 장점은 이미 많은 개발자들이 사용하고 있기 때문에 다양한 개발자들이 Jekyll을 사용하면서 필요한 &lt;strong&gt;플러그인&lt;/strong&gt;을 개발하여 공개하고 Jekyll은 쉽게 플러그인을 설치하여 Jekyll의 기능을 확장시킬 수 있다. &lt;a href=&quot;http://jekyllrb.com/docs/plugins/&quot;&gt;Jekyll Plugins&lt;/a&gt;에서 Jekyll의 플러그인을 만드는 방법과 이미 만들어져있는 플러그인들의 목록을 살펴볼 수 있다. 뿐만 아니라 Github에서 Jekyll에 관련된 플러그인들을 많이 찾아볼 수 있고 Ruby의 패키지 관리 툴인 &lt;a href=&quot;https://rubygems.org&quot;&gt;gem&lt;/a&gt;을 사용해서 쉽게 플러그인을 설치할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;markdown-syntax&quot;&gt;Markdown Syntax&lt;/h2&gt;

&lt;p&gt;Markdown의 문법은 문서를 작성하는데 집중하기 위해서 스타일을 적용하는 문법이 없이 간단한 표기법을 사용한다. &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown의 Syntax&lt;/a&gt;에 관련된 글을 살펴보면 스타일에 관련된 내용이 없다는 것을 확인할 수 있을 것이다. 하지만 &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax#html&quot;&gt;inline HTML&lt;/a&gt;을 사용할 수 있기도 하다. 우리는 Markdown을 가지고 문서를 작성하고 이것을 Jekyll을 사용해서 정적 웹 사이트를 제작한다고 생각해보자. Markdown에서 이미지를 삽입하기 위해서는 다음과 같은 문법을 사용한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;![이미지alt](./images/test.png &amp;quot;이미지title&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 Markdown 문법으로 삽입된 이미지는 HTML 문서에서 다음과 같이 변환이 된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;./images/test.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;이미지alt&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;이미지title&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 예제를 보면 Markdown 문법에서는 이미지의 사이즈를 지정하는 곳이 없다. Markdown 변환기 중에서는 Markdown의 문법을 확장시켜서 이미지 사이즈를 지정하거나 문법에 스타일을 지정할 수 있도록 지원하는 변환기도 있지만 이것은 Markdown 변환기를 다르게 사용하면 Markdown의 syntax 오류가 발생해버린다. 우리는 그래서 Markdown의 문법을 손상시키지 않는 방법에서 이미지의 사이즈를 변경하거나 스타일을 적용하는 방법을 연구했다. 우리는 이미 Node.js를 이용한 &lt;a href=&quot;https://github.com/saltfactory/mark2html&quot;&gt;mark2html&lt;/a&gt; 변환기를 만들었는데 &lt;strong&gt;0.0.4&lt;/strong&gt; 업데이트에 Markdown에 포함된 이미지의 사이즈를 지정하는 방법을 제공했다. &lt;strong&gt;mark2html&lt;/strong&gt;를 이용하는 방법은 &lt;a href=&quot;http://blog.saltfactory.net/253&quot;&gt;Markdown으로 HTML 변환시 이미지 IMG 사이즈 지정하기&lt;/a&gt; 글을 참조하면 된다.&lt;/p&gt;

&lt;p&gt;원리는 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Markdown 표준 문법인 &lt;strong&gt;ALT&lt;/strong&gt; 속성을 만든는 표기법 안에 &lt;strong&gt;inline style&lt;/strong&gt;을 지정하고 Markdown에서 HTML을 변환할 때, ALT에 포함된 inline style을 HTML의 &lt;strong&gt;IMG&lt;/strong&gt; 태그의 &lt;strong&gt;style&lt;/strong&gt; 속성으로  지정하는 거싱다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이와 같은 방법으로 처리하기 위해서는 Markdown을 HTML으로 변환하는 메소드 중에 IMG 태그를 변환하는 메소드를 &lt;strong&gt;Override&lt;/strong&gt; 해야한다. Node.js로 위 방법을 구현할 때는 &lt;a href=&quot;https://github.com/chjj/marked&quot;&gt;marked&lt;/a&gt; 변환기를 사용하여 처리했다. 동일한 방법으로 Jekyll의 Markdown 변환기를 Override 하면 가능할 것 같다는 생각을 가지고 Jekyll Plugin을 만들기로 했다.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-plugin-제작&quot;&gt;Jekyll Plugin 제작&lt;/h2&gt;

&lt;p&gt;Jekyll은 공식으로 플러그인을 만들 수 있는 &lt;a href=&quot;http://jekyllrb.com/docs/plugins/#generators&quot;&gt;Generator&lt;/a&gt;, &lt;a href=&quot;http://jekyllrb.com/docs/plugins/#converters&quot;&gt;Conveter&lt;/a&gt;, &lt;a href=&quot;http://jekyllrb.com/docs/plugins/#command&quot;&gt;Command&lt;/a&gt;, &lt;a href=&quot;http://jekyllrb.com/docs/plugins/#tags&quot;&gt;Tags&lt;/a&gt; 그리고 &lt;a href=&quot;http://jekyllrb.com/docs/plugins/#liquid-filters&quot;&gt;Filters&lt;/a&gt; 모듈을 만들어 두었다. &lt;strong&gt;jekyll-img-converter&lt;/strong&gt;에서 사용한 모듈은 &lt;strong&gt;Converter&lt;/strong&gt;이다. 다른 모듈에 대한 설명은 앞으로 기회가 있을 때 다시 소개하고 Converter를 이용해서 플러그인을 제작하는 방법을 소개한다.&lt;/p&gt;

&lt;p&gt;우리는 Jekyll 프로젝트와 달리 모듈을 만들고 테스트를 하는 방법을 가지고 싶었다. 그래서 우리는 &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;, &lt;a href=&quot;https://rubygems.org&quot;&gt;gem&lt;/a&gt; 그리고 &lt;a href=&quot;http://ruby-doc.org/core-1.9.3/doc/rake/rakefile_rdoc.html&quot;&gt;Rakefile&lt;/a&gt;를 사용하여 플로그인을 개발하는 환경을 만들었다.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-img-converter.gemspec&quot;&gt;jekyll-img-converter.gemspec&lt;/h3&gt;

&lt;p&gt;우선 우리는  &lt;strong&gt;jekyll-img-converter&lt;/strong&gt;를 &lt;strong&gt;gem&lt;/strong&gt;을 상요해서 배포할 것이기 때문에 &lt;code&gt;.gemspec&lt;/code&gt; 파일을 생성하였다. 이 파일에 포함된 내용은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt; : 플러그인 이름&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt; : 플러그인의 간략한 내용&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;description&lt;/strong&gt; : 플러그인의 설명&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;version&lt;/strong&gt; : 플러그인의 버전, 이 버전에 따라서 나중에 &lt;strong&gt;gem&lt;/strong&gt; 버전 파일이 생성이 된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;authors&lt;/strong&gt; : 개발자&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;email&lt;/strong&gt; : 개발자 이메일&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;homepage&lt;/strong&gt; : 플러그인 사이트&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;license&lt;/strong&gt; : 라이센스&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;files&lt;/strong&gt; : &lt;strong&gt;gem&lt;/strong&gt;을 사용하여 배포할 파일을 지정&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;add_dependency&lt;/strong&gt; : 플러그인이 설치되었을 때 필요한 모듈의 의존성을 지정&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;add_development_dependency&lt;/strong&gt; : 플러그인을 개발할 때 필요한 모듈을 지정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;jekyll-img-converter&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Jekyll IMG tag conveter in markdown using with Redcarpet&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;jekyll-img-converter is support to convert IMG tag with inline style from markdown using with Redcarpet&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0.1.5&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authors&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;SungKwang Song&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;saltfactory@gmail.com&amp;quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;homepage&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://github.com/saltfactory/jekyll-img-converter&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;licenses&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;MIT&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;lib/jekyll-img-converter.rb&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_dependency&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;jekyll&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;~&amp;gt; 2.0&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_development_dependency&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;html-pipeline&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;~&amp;gt; 1.9&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_development_dependency&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;&amp;#39;rake&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;~&amp;gt; 10.3&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_development_dependency&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;&amp;#39;rdoc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;~&amp;gt; 4.1&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_development_dependency&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;&amp;#39;shoulda&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;~&amp;gt; 3.5&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_development_dependency&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;&amp;#39;minitest&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;~&amp;gt; 5.4&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_development_dependency&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;&amp;#39;redcarpet&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;~&amp;gt; 3.2&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;gemfile&quot;&gt;Gemfile&lt;/h3&gt;

&lt;p&gt;Ruby로 프로젝트를 진행할 때 필요한 라이브러리를 기술하고 다운받아서 사용하기 위해서 &lt;code&gt;Gemfile&lt;/code&gt;을 작성하고 &lt;strong&gt;gem&lt;/strong&gt; 으로 설치를 한다. 이것은 Node.js의 &lt;code&gt;package.json&lt;/code&gt;을 기술해서 사용하는 원리와 비슷하다. 우리는 &lt;code&gt;.gemspec&lt;/code&gt; 파일에 이미 필요한 라이브러리를 지정했기 때문에 &lt;code&gt;Gemfile&lt;/code&gt;에서는 &lt;strong&gt;gemspec&lt;/strong&gt;을 참조하라고 기술 하면 된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;source &amp;quot;https://rubygems.org&amp;quot;

gemspec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;을 생성하면 &lt;code&gt;bundle install&lt;/code&gt; 명령을 사용하여 필요한 라이브러리를 모두 다운 받아 설치할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;jekyll-img-converter.rb&quot;&gt;jekyll-img-converter.rb&lt;/h3&gt;

&lt;p&gt;필요한 라이브러리르 모두 다운받아서 설치하면 플러그인을 개발할 준비를 모두 마친것이다. 우리는 &lt;strong&gt;Jekyll&lt;/strong&gt;의 플러그인 모듈 중에서 &lt;strong&gt;Converter&lt;/strong&gt; 클래스를  상속받아서 사용할 것이다.&lt;/p&gt;

&lt;p&gt;가장 먼저 해야할 일은 &lt;strong&gt;Converter&lt;/strong&gt; 클래스를 상속 받는 것이다. Jekyll에서 제공하는 Converter 플러그인을 만들기 위해서는 Converter 클래스의 다음 메소드를 오버라이드하여 사용해야한다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;matches()&lt;/strong&gt; : Jekyll에서 해당되는 확장자의 파일에만 적용할 수 있게 확장자를 매칭하는 메소드이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;output_ext()&lt;/strong&gt; : 플러그인이 모두 동작하고 결과물을 만들 때의 확장자를 지정하는 메소드이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;convert()&lt;/strong&gt; : &lt;strong&gt;Converter&lt;/strong&gt; 클래스가 가지는 가장 중요한 메소드로 convert를 실행하는 메소드이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Markdown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Converter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;output_ext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 우리는 &lt;strong&gt;Jekyll 2.0&lt;/strong&gt; 이상부터 &lt;a href=&quot;https://github.com/vmg/redcarpet&quot;&gt;Redcarpt&lt;/a&gt;이라는 Markdown parser를 사용하는 것을 Jekyll 소스코드로부터 확인했다. 우리는 Jekyll이 Markdown을 HTML으로 변환할 때 사용하는 &lt;a href=&quot;https://github.com/jekyll/jekyll/blob/master/lib/jekyll/converters/markdown/redcarpet_parser.rb&quot;&gt;RedcarpetParser&lt;/a&gt;의 &lt;code&gt;CommonMethods&lt;/code&gt; 모듈에 IMG를 변환하는 메소드를 Override 할 것이다. 아래 코드는 &lt;strong&gt;Jekyll&lt;/strong&gt;의 &lt;strong&gt;RedcarpetParser&lt;/strong&gt;의 &lt;code&gt;CommonMethods&lt;/code&gt; 모듈이 &lt;a href=&quot;http://ruby-doc.com/docs/ProgrammingRuby/html/tut_modules.html&quot;&gt;Mixins&lt;/a&gt;하여 사용하는 것에 &lt;code&gt;image()&lt;/code&gt; 메소드를 추가했다. 이제 Markdown의 문법 중에 이미지 문법을 변환할 때 우리가 Override 한 &lt;code&gt;image()&lt;/code&gt; 메소드를 실행 할 것이다. 우리가 오버라이드한 &lt;code&gt;image()&lt;/code&gt; 메소드는 Markdown의 &lt;strong&gt;ALT&lt;/strong&gt; attribute에서 &lt;code&gt;{}&lt;/code&gt;에 정의한 &lt;strong&gt;inline style&lt;/strong&gt;을 정규 표현식으로 얻어서 HTML으로 변환할 때 &lt;strong&gt;style&lt;/strong&gt; 속성에 값을 지정하게 된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jekyll&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Converters&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Markdown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Converter&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedcarpetParser&lt;/span&gt;

          &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CommonMethods&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/({)(.+)(})/&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;matchData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

              &lt;span class=&quot;n&quot;&gt;imgTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;img src=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;

              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matchData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;stripContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matchData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rstrip&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;imgTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; alt=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stripContent&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; style=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;imgTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; alt=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;imgTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; title=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

              &lt;span class=&quot;n&quot;&gt;imgTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;gt;&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;jekyll-plugin-테스트&quot;&gt;Jekyll Plugin 테스트&lt;/h3&gt;

&lt;p&gt;위에서  만든 &lt;strong&gt;Jekyll&lt;/strong&gt;의 플러그인 &lt;strong&gt;jekyll-img-converter&lt;/strong&gt;를 테스트해보자. 테스트는 &lt;strong&gt;Rakefile&lt;/strong&gt;을 사용해서 진행할 것이다. &lt;strong&gt;Rakefile&lt;/strong&gt;을 다음 코드로 생성한다. test는 &lt;code&gt;test&lt;/code&gt;라는 디렉토리 안에 &lt;code&gt;test_&lt;/code&gt;로 시작하는 파일을 &lt;strong&gt;Rake::TestTask&lt;/strong&gt;로 진행할 것이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bundler&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:development&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BundlerError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$stderr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$stderr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Run `bundle install` to install missing gems&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rake&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rake/testtask&amp;#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lib&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;test/**/test_*.rb&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Rakefile&lt;/strong&gt;을 생성하면 &lt;code&gt;test&lt;/code&gt; 디렉토리를 만들자.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;mkdir test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;테스트에 필요한 파일들을 로드하기 위해서 &lt;code&gt;help.rb&lt;/code&gt; 파일을 &lt;code&gt;test&lt;/code&gt; 디렉토리 안에 만든다. &lt;code&gt;help.rb&lt;/code&gt;의 내용은 다음과 같다. &lt;code&gt;jekyll-img-converter&lt;/code&gt;를 &lt;code&gt;require&lt;/code&gt; 할 수 있도록 지정을 한다. 그리고 우리는 임의의 Markdown 파일에 Markdown 문법을 사용하여 문서를 만들고 그 파일을 &lt;code&gt;textures&lt;/code&gt; 라는 디렉토리에 저장하고 이것을 나중에 불러 사용할 것이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;minitest/autorun&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;shoulda&amp;#39;&lt;/span&gt;


&lt;span class=&quot;vg&quot;&gt;$LOAD_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-img-converter&amp;#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;TEST_DIR&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;../&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;FIXTURES_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;fixtures&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TEST_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;DEST_DIR&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;destination&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TEST_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ImgConverterTestHelpers&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fixture_site&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deep_merge_hashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DEFAULTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;source&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FIXTURES_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;destination&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DEST_DIR&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;마지막으로 &lt;strong&gt;jekyll-img-converter&lt;/strong&gt; 플러그인을 테스트할 테스트 파일을 만든다. 우리는 위에서 &lt;code&gt;test_&lt;/code&gt; 시작하는 파일을 찾아서 테스트할 것이라고 정의했기 때문에 파일 이름을 &lt;code&gt;test_jekyll-img-converter.rb&lt;/code&gt;으로 만든다. 테스트 파일은 위에서 만든 &lt;code&gt;help.rb&lt;/code&gt;를 require 한다. 그리고 &lt;a href=&quot;https://github.com/seattlerb/minitest&quot;&gt;Minitest&lt;/a&gt;로 테스트를 할 것이다. 우리는 &lt;code&gt;help.rb&lt;/code&gt;에서 만든 &lt;code&gt;ImgConverterTestHelper&lt;/code&gt;를 Minix한다. 실제 &lt;strong&gt;Jekyll&lt;/strong&gt; 프로젝트에서 설정을 하는 &lt;code&gt;_config.yml&lt;/code&gt; 파일에 &lt;code&gt;markdown&lt;/code&gt;을 &lt;code&gt;redcarpet&lt;/code&gt;으로 정의하고 &lt;code&gt;extentions&lt;/code&gt;을 정의 했다고 가정하기 위해서 우리는 강제로 &lt;code&gt;@config&lt;/code&gt;를 만들어서 &lt;code&gt;Jekyll::Converters::Markdown&lt;/code&gt;을 생성할 때 적용하도록 했다. 테스트는 &lt;code&gt;should&lt;/code&gt;에서 진행한다. 우리가 만든 플러그인이 적용되어 동작하는지 알아보기 위해서 &lt;code&gt;assert_equal&lt;/code&gt;를 사용해서 markdown이 HTML으로 변환이 된 결과와 동일한지 테스트를 진행했다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;helper&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestImgConverter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ImgConverterTestHelpers&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@site&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fixture_site&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;redcarpet&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;extensions&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;no_intra_emphasis&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;fenced_code_blocks&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;autolink&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;strikethrough&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;superscript&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;with_toc_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;tables&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;markdown&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;redcarpet&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@markdown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Converters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Markdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@config&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;convert content&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;p&amp;gt;&amp;lt;img src=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./images/test.png&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; alt=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test_alt&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; style=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;max-width:300px;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; title=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test_title&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@markdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;![test_alt {max-width:300px;}](./images/test.png &amp;quot;test_title&amp;quot;)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우리가 만든 플러그인은 &lt;strong&gt;Redcarpet&lt;/strong&gt;의 &lt;code&gt;convert()&lt;/code&gt;메소드가 실행할 때  오버라이드된 &lt;code&gt;image()&lt;/code&gt;를 상용하게 할 것이다. 테스트는 &lt;code&gt;rake&lt;/code&gt;를 사용한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;rake test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;테스트한 결과는 다음과 같이 나타난다. 1 run과  1 assertions이 통과했다. 만약 오류가 생기면 failures나 error 의 값이 변경 될 것이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/Users/saltfactory/.rvm/rubies/ruby-2.1.1/bin/ruby -I&amp;quot;lib:lib:test&amp;quot; -I&amp;quot;/Users/saltfactory/.rvm/gems/ruby-2.1.1/gems/rake-10.3.2/lib&amp;quot; &amp;quot;/Users/saltfactory/.rvm/gems/ruby-2.1.1/gems/rake-10.3.2/lib/rake/rake_test_loader.rb&amp;quot; &amp;quot;test/**/test_*.rb&amp;quot;
Run options: --seed 6638

# Running:
.

Finished in 0.024375s, 41.0256 runs/s, 41.0256 assertions/s.

1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;gem-배포&quot;&gt;gem 배포&lt;/h3&gt;

&lt;p&gt;마지막으로 우리는 &lt;strong&gt;gem&lt;/strong&gt;을 사용해서 설치할 수 있도록 gem 파일을 만들어서 배포할 것이다. 우선 &lt;a href=&quot;http://rubygems.org&quot;&gt;http://rubygems.org&lt;/a&gt; 에 계정을 만든다. &lt;strong&gt;rubygems&lt;/strong&gt;의 계정을 생성한 다음 로컬에서 &lt;code&gt;gem&lt;/code&gt; 파일을 만든다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;gem build jekyll-img-converter.gemspec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gem 파일이 이상없이 만들어지면 다음과 같은 결과가 나타난다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Successfully built RubyGem
Name: jekyll-img-converter
Version: 0.1.5
File: jekyll-img-converter-0.1.5.gem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우리는 위에서 &lt;code&gt;jekyll-img-converter.gemspec&lt;/code&gt; 파일에  &lt;strong&gt;0.1.5&lt;/strong&gt; 버전을 정의했기 때문에 &lt;code&gt;gem&lt;/code&gt; 파일은 &lt;strong&gt;jekyll-img-converter-0.1.5.gem&lt;/strong&gt; 파일로 만들어질 것이다. 이렇게 만든 &lt;code&gt;gem&lt;/code&gt; 파일을 &lt;code&gt;rubygems&lt;/code&gt;의 리파지토리에 push 한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;push jekyll-img-conveter-0.1.5.gem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 push가 완려되면 다음과 같은 결과가 나타난다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Pushing gem to https://rubygems.org...
Successfully registered gem: jekyll-img-converter (0.1.5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;jekyll에-jekyll-img-converter-플러그인-설치&quot;&gt;Jekyll에 jekyll-img-converter 플러그인 설치&lt;/h3&gt;

&lt;p&gt;위에서 우리는 만든 &lt;strong&gt;jekyll-img-conveter&lt;/strong&gt;는 이제 &lt;strong&gt;gem&lt;/strong&gt;을 이용하여 설치할 수 있다. &lt;strong&gt;Jekyll&lt;/strong&gt; 프로젝트의 &lt;code&gt;Gemfile&lt;/code&gt;을 열어서 다음을 추가한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://rubygems.org&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2.4.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;kramdown&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1.3.1&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-coffeescript&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1.0.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-sass-converter&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1.2.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;liquid&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2.6.1&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;maruku&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.7.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rdiscount&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2.1.7&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;redcarpet&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;3.1.2&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;RedCloth&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;4.2.9&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pygments.rb&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.6.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jemoji&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.3.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-mentions&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.1.3&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-sitemap&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.6.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;github-pages&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;28&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-redirect-from&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.6.2&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-img-converter&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.1.5&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 &lt;code&gt;bundle&lt;/code&gt;을 이용해서 필요한 라이브러리들을 &lt;strong&gt;gem&lt;/strong&gt;을 이용해서 설치한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 우리가 만든 plugin을 &lt;strong&gt;Jekyll&lt;/strong&gt;에서 사용할 수 있도록 &lt;code&gt;_config.yml&lt;/code&gt;에 지정한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;... 생략 ....

gems:
  - jekyll-redirect-from
  - jemoji
  - jekyll-img-converter

... 생략 ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;마지막으로 &lt;strong&gt;Jekyll&lt;/strong&gt; 서버를 재시작해서 우리가 설치한 플러그인이 잘 적용되었는지 살펴본다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;jekyll serve --watch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;은 Markdown을 사용해서 정적 웹 사이트를 만들 수 있는 static web page generator 프레임워크이다. Jekyll을 사용하면 개인 웹 서버나 고가의 데이터베이스 없이 &lt;strong&gt;Github Pages&lt;/strong&gt;를 이용해서 개인 웹 사이트나 블로그를 쉽게 구축할 수 있다. Markdown은 문서 제작를 간편하고 빠르게 제작할 수 있게 스타일을 지정하지 않는다. 하지만 웹 사이트를 만들다보면 이미지 사이즈를 조정하는 경우가 많다. Markdown의 기본 문법에서는 IMG 태그에 스타일을 지정할 수 없기 때문에 우리는 Jekyll의 &lt;strong&gt;Redcarpet&lt;/strong&gt;이라는 Markdown 변환기에서 IMG 태그를 변환하는 메소드를 오버라이드하여 Jekyll 플러그인 &lt;strong&gt;jekyll-img-converter&lt;/strong&gt;를 제작하게 되었다. jekyll은 &lt;strong&gt;Ruby&lt;/strong&gt; 기반으로 만들어졌기 때문에 우리는 &lt;strong&gt;Rakefile&lt;/strong&gt;을 이용해서 플러그인을 만들고 테스트를 진행했다. 우리는 우리가 만든 플러그인을 &lt;strong&gt;gem&lt;/strong&gt;을 사용해서 설치할 수 있게 &lt;strong&gt;rubygems&lt;/strong&gt;에 우리가 만든 플러그인을 등록해서 배포했고 이 모든 과정을 이 포스트에서 소개 했다. Ruby는 Minxin이라는 기능을 가지고 있고 모든 클래스 기반 언어처럼 상속과 오버라이드를 지원한다. 우리는 이 개념을 잘 사용하여 Markdown의 문법을 해치지 않고 이미지 문법의 ALT 속성에 &lt;strong&gt;inline style&lt;/strong&gt;을 지정하여 IMG 태그를 분석할 때 오버라이드한 메소드가 이를 분석해서 IMG 태그에 &lt;strong&gt;style&lt;/strong&gt; 속성에 inline style을 적용하도록 했다. 이 포스트를 참조해서 앞으로 더욱 많은 Jekyll의 플러그인이 제작되길 기대해본다.&lt;/p&gt;

&lt;h2 id=&quot;연구원-소개&quot;&gt;연구원 소개&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;작성자 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;송성광&lt;/a&gt; 개발 연구원&lt;/li&gt;
&lt;li&gt;블로그 : &lt;a href=&quot;http://blog.saltfactory.net&quot;&gt;http://blog.saltfactory.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;이메일 : &lt;a href=&quot;mailto:saltfactory@gmail.com&quot;&gt;saltfactory@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;트위터 : &lt;a href=&quot;https://twitter.com/saltfactory&quot;&gt;@saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;페이스북 : &lt;a href=&quot;https://facebook.com/salthub&quot;&gt;https://facebook.com/salthub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;연구소 : &lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설연구소&lt;/li&gt;
&lt;li&gt;연구실 : &lt;a href=&quot;http://dblab.changwon.ac.kr&quot;&gt;창원대학교 데이터베이스 연구실&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 12 Nov 2014 00:00:00 +0900</pubDate>
        <link>/series/jekyll/introduce-jekyll-img-converter.html</link>
        <guid isPermaLink="true">/series/jekyll/introduce-jekyll-img-converter.html</guid>
        
        <category>jekyll</category>
        
        <category>ruby</category>
        
        <category>markdown</category>
        
        <category>plugin</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Ionic을 이용한 iOS, Android 하이브리드 앱 개발 사례</title>
        <description>&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설 연구소&lt;/strong&gt;에서는 모바일 서비스를 위해 아이폰과 안드로이드 앱을 개발해서 배포하고 있었다. 우리는 아이폰 사용자와 안드로이드 사용자를 위해서 두가지 플랫폼을 개발해야 했다. 안드로이드와 아이폰은 버전과 디바이스의 파편화 때문에 많은 비용을 투자해서 예외처리를 해야했다. 제한된 개발 인력으로 두가지 디바이스를 개발해야하는 복잡한 프로세스를 개선하기 위해서 우리는 &lt;strong&gt;하이브리드 앱&lt;/strong&gt; 개발 방법을 도입하기로 결정했다. 최근 우리는 하이브리드 앱 개발 기술을 사용하여  &amp;quot;하이브레인넷 앱(ver. 2.3)&amp;quot;을 &lt;a href=&quot;https://itunes.apple.com/kr/app/haibeuleinnes/id438616285?mt=8&quot;&gt;앱스토어&lt;/a&gt;와 &lt;a href=&quot;https://play.google.com/store/apps/details?id=net.hibrain.apps.android.hibrainnet&quot;&gt;구글 플레이&lt;/a&gt;를 통해 배포했다. 우리는 하이브리드 앱을 개발하여 제품으로 배포한 과정을 블로그로 공개한다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;개발-배경&quot;&gt;개발 배경&lt;/h2&gt;

&lt;p&gt;우리는 &lt;strong&gt;하이브리드 앱&lt;/strong&gt;을 도입하기 위해  2013년부터 &lt;strong&gt;HTML5&lt;/strong&gt;과 &lt;strong&gt;하이브리드 앱&lt;/strong&gt; 기술에 관련된 컨퍼런스와 세미나를 참석했다. KTH에서는 웹 기술을 사용하여 모바일 앱을 개발하는 기술을 &lt;strong&gt;H3&lt;/strong&gt; 컨퍼런스와 크고 작은 세미나를 통해서 공개했다. KTH의 &lt;strong&gt;Pudding 카메라&lt;/strong&gt;가 하이브리드 앱으로 개발되어 많은 인기를 얻으면서 사람들은 웹 기술로 앱을 만들 수 있다는 것을 알게 되었고 이후 점점 웹 기술을 가지고 앱을 만드는 것에 관심을 갖게 되었다. 하이브리드 앱을 처음 도입하게 된 계기는 KTH의 &lt;strong&gt;Appsresso&lt;/strong&gt; 라는 하이브리드 앱 개발 플랫폼 때문이였다. 지금은 공식 페이지도 찾아볼 수 없는 사라진 프로젝트이지만 핵심 소스는 &lt;a href=&quot;https://github.com/kthcorp/Appspresso-SDK&quot;&gt;GitHub&lt;/a&gt;에 공개되어 있다. (개인적으로 국내 소프트웨어로 가장 비전이 있어보이는 프로젝트였는데 중단되어서 너무 아쉬워하고 있다.). Appspresso는 하이브리드 앱을 개발하는 개발 장벽을 낮추는데 큰 영향을 주었다. Appspresso는 HTML5 기반의 웹 자원과 Plugin 형태로 네이티브 자원을 사용할 수 있는 메카니즘을 하나의 IDE에서 개발 할 수 있는 환경을 제공해 주었다. 이렇게 웹 자원이 네이티브 자원을 사용하는 플러그인 방법은 지금까지 &lt;a href=&quot;http://phonegap.com&quot;&gt;PhoneGap&lt;/a&gt;을 포함한 다른 하이브리드 앱 프레임워크의 대표적인 방법으로 제시되고 있다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;우리는 아이폰을 위한 앱을 먼저 개발하고 배포한 뒤 안드로이드 앱을 개발해서 배포하는 프로세스였다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;우리는 기존의 아이폰 앱과 안드로이드 앱을 네이티브로 각각 개발하고 있었다. 대형 포털회사와 달리 개발인력이 많지 않은 우리는 두가지 플랫폼을 개발하는데 어려움을 겪고 있었다. 이유는 간단히 아이폰의 에코 시스템이 편리했고 아이폰 개발이 익숙했기 때문에 아이폰용 앱을 먼저 개발한 것이다. 하지만 안드로이드 사용자가 급격하게 많아지면서 안드로이드 앱에서 발생하는 이슈들이 많아지기 시작했다. 우리는 익숙한 아이폰 개발 환경을 뒤로하고 안드로이드 앱 개발에 집중하기 시작했다. 안드로이드의 SDK에 대처하면서 일정 시간이 지나면 우리는 또 새로워진 iOS를 대처해야했다. 이 과정은 서로 반복되는 힘든 과정이였다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;우리는 아이폰과 안드로이드의 UI를 통합하고 싶었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;우리는 아이폰과 안드로이드 앱을 두가지 다른 사용자 경험을 기반으로 개발을 했었다. 아이폰에서는 &lt;strong&gt;Tab&lt;/strong&gt; 기반의 인터페이스를 제공했지만, 안드로이드 사용자는 &lt;strong&gt;Tab&lt;/strong&gt; 메뉴 사용이 익숙하지 않고 물리 버튼을 사용하기 때문에 &lt;strong&gt;Slide Out&lt;/strong&gt; 메뉴를 제공했다. 우리가 가장 먼저 고민한 것은 바로 UI모듈 통합이였다. 우리의 서비스를 각각 플랫폼에 전달되는 내용은 동일하고 아이폰 사용자가 안드로이드 폰으로 이동하거나 안드로이드 사용자가 아이폰으로 이동하더라도 동일한 UI를 제공하여 혼란을 줄이고 싶었다. 하지만 안드로이드와 아이폰은 사용자 경험이 다르기 때문에 이러한 이슈도 커버하길 원했다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;플러그인 형태로 모듈을 만들고 싶었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;기존의 우리의 앱의 핵심 코어는 크게 &lt;strong&gt;UI 모듈&lt;/strong&gt;, &lt;strong&gt;네트워크 모듈&lt;/strong&gt;,  &lt;strong&gt;저장 모듈&lt;/strong&gt; 그리고 &lt;strong&gt;공유 모듈&lt;/strong&gt;을 만들어서 사용했는데 아이폰은 &lt;strong&gt;Objectvie-C&lt;/strong&gt; 코드였고 안드로이드는 &lt;strong&gt;Java&lt;/strong&gt;로 만들어졌다. 각각 모듈은 프로젝트에 의존적이여서 다른 프로젝트에 사용하기 힘든 문제가 있었다. 우리는 메인 앱을 개발한 이후 여러가지 다른 앱을 개발하기 시작했는데 기존에 사용하던 모듈을 재사용하고 싶어졌다. 그래서 우리는 모듈 프로젝트를 만들어서 가각 모듈을 분리하기 시작했는데 좀 더 효율적으로 사용할 수 있는 방법을 찾고 있었다.&lt;/p&gt;

&lt;p&gt;정리하면 우리의 요구사항은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;아이폰과 안드로이드 폰 개발과 업데이트를 동시에 진행하고 싶다.&lt;/li&gt;
&lt;li&gt;UI를 통합하여 단일 코드로 작성하고 싶다.&lt;/li&gt;
&lt;li&gt;모듈은 플러그인 형태로 개발해서 재사용하고 싶다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;우리의 요구사항은 하이브리드 특징에 모두 포함되어 있다는 것을 여러 컨퍼런스와 세미나를 통해서 알게되었고 구체적인 자료 수집과 개발 환경을 만들기 시작했다.&lt;/p&gt;

&lt;h2 id=&quot;하이브리드-개발-환경&quot;&gt;하이브리드 개발 환경&lt;/h2&gt;

&lt;p&gt;우리는 처음 Appspresso 기반으로 하이브리드 앱을 만들려고 했지만 실제 개발에 들어가기 전에 Appspresso 프로젝트는 중단이 되어서 더이상 업데이트가 진행되고 있지 않았다. 우리는 다른 하이브리드 앱 개발 환경을 조사하기 시작했다. 우리가 개발 방법을 변경할 때, 우리는 이미 back-end와 front-end 개발 플랫폼을 Node.js로 마이그레이션하는 작업을 진행하고 있었다. &lt;strong&gt;PhoneGap&lt;/strong&gt;은 &lt;strong&gt;Node.js&lt;/strong&gt; 플랫폼으로 개발 할 수 있는 환경을 제공해주기 때문에 우리는 많은 부분을 고민하지 않고 PhoneGap을 하이브리드 개발 프레임워크로 도입하게 되었다.&lt;/p&gt;

&lt;p&gt;우리가 생각하던 UI 프레임워크의 요구 사항은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; SPA (Single Page Application)으로 만들고 싶다.&lt;/li&gt;
&lt;li&gt;Templates(Partial Page)를 사용하고 싶다.&lt;/li&gt;
&lt;li&gt;MVC 패턴으로 개발하고 싶다.&lt;/li&gt;
&lt;li&gt;Two-Way Bind를 지원하는 프레임워크를 찾는다.&lt;/li&gt;
&lt;li&gt;네이티브에 최적화된 UI를 내장하고 있으면 좋겠다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;처음에는 &lt;a href=&quot;http://www.sencha.com/products/touch/&quot;&gt;Sencha Touch&lt;/a&gt;, &lt;a href=&quot;http://jquerymobile.com/&quot;&gt;jQuery Mobile&lt;/a&gt; 두가지를 가지고 고민을 했었다. Sencha Touch는 라이브러리가 풍부하고 UI가 네이티브에 가깝고 안정성이 높았지만, 실제 디바이스에 올렸을때 무겁고 퍼포먼스가 생각했던 것 보다 좋게 나오지 못했다. jQuery Mobile은 수만은 jQuery 라이브러리를 사용할 수 있는 장점이 있었지만 우리는 MVC 또는 MVVM 패턴으로 개발을 진행하고 싶었고 아직초기 단계의 라이브러리라 안정성도 좋지 못했었다. UI 프레임워크에 대해서 고민을 하고 있을 때, 우리는 HTML5 컨퍼런스에 참석하면서 &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;를 알게 되었고 AngularJS의 &lt;strong&gt;two-way bind&lt;/strong&gt;에 매료 되었다. 우리의 요구사항은  대부분 AngularJS로 해결할 수 있지만 CSS 개발자가 없기 때문에 AngularJS 기반으로 네이티브에 최적화된 UI를 내장하고 있는 프레임워크를 찾기 시작했다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;우리에게 Ionic Framework는 가장 우리의 요구 사항을 만족시켜주는 프레임워크였다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;우리는 &lt;a href=&quot;http://ionicframework.com/&quot;&gt;Ionic Framework&lt;/a&gt;를 찾을 수 있었다. Ionic은 다음과 같은 특징을 가진다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cordova(PhoneGap) 환경을 제공한다.&lt;/li&gt;
&lt;li&gt;Cordova(PhoneGap) 플러그인을 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;AngularJS 기반으로 SPA를  MVC나 MVVM 패턴으로 개발을 할 수 있다.&lt;/li&gt;
&lt;li&gt;네이티브에 가까운 UI 컴포넌트들을 제공한다.&lt;/li&gt;
&lt;li&gt;HTML5 어플리케이션을 빠른 시간으로 개발할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;우리는 최종적으로 Ionic을 선택했고 Ionic을 사용해서 하이브리드 앱 개발을 시작했다.&lt;/p&gt;

&lt;h2 id=&quot;ionic-framework&quot;&gt;Ionic Framework&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://ionicframework.com&quot;&gt;Ionic&lt;/a&gt;은 Advanced HTML5 Hybrid Mobile App Framework이다. HTML5로 어플리케이션을 만들기 전에 우리는 가정 먼저 고려한 것이 UI를 웹 자원으로 개발하지만 성능과 안정성을 높이는 것이였다. 처음 우리는 직접 JavaScript를 이용해서 만들어보려고 했지만 성능과 안정성을 검증할 수 없었기 때문에 이미 성능과 안정성이 보장되어 있는 Ionic을 사용하여 개발하기로 했다. Ionic 블로그에서 Ionic에 대해서 다음과 같이 소개하고 있다. &lt;a href=&quot;http://ionicframework.com/blog/where-does-the-ionic-framework-fit-in/&quot;&gt;Where does the ionic framework fit in&lt;/a&gt; Ionic의 궁극적인 목표는 하이브리드 앱으로 알려진, HTML5를 이용해 네이티브 앱을 더욱 쉽게 개발하기 위한 것이라고 소개하고 있다.&lt;/p&gt;

&lt;h3 id=&quot;ionic과-angularjs&quot;&gt;Ionic과 AngularJS&lt;/h3&gt;

&lt;p&gt;Ionic Framework는 AngularJS를 근간에 두고 만들어졌다. Ionic에서는 자신의 UI 컴포넌트들의 태그를 직접 만들어서 사용하기도 하는데 이 것은 AngularJS의 &lt;a href=&quot;https://docs.angularjs.org/guide/directive&quot;&gt;directives&lt;/a&gt;를 이용하여 만들어졌다. 이 것을 사용해서 Ionic은 UI 개발자에게 복잡한 CSS와 JavaScript를 나열하는 대신에 단순히 Ionic에서 정의한 Custom Element를 제공하여 개발자는 마치 Code Snippet과 같이 쉽게 사용할 수 있게 하였다.&lt;/p&gt;

&lt;p&gt;예를 들어 각 View가 전환되고 전환되는 View에 엑션과 NavigationBar를 구현하는 코드를 만든다고 생각해보자. 단순히 &lt;code&gt;html&lt;/code&gt; 파일을 하나 열어서 비어 있는 파일에 직접 코드를 작성한다면 쉽게 구현할 수 없을 뿐만 아니라 엄청난 코드 때문에 실제 서비스를 만들기 전에도 개발자는 지치고 말것이다. 하지만 Ionic에서는 이런 네비게이션이 가능한 뷰를 &lt;a href=&quot;http://ionicframework.com/docs/api/directive/ionNavView/&quot;&gt;ion-nav-view&lt;/a&gt; 로 정의를 하였고, 네비게이션이 일어난 뷰는 &lt;a href=&quot;http://ionicframework.com/docs/api/directive/ionNavBar/&quot;&gt;ion-nav-bar&lt;/a&gt;라를 네비게이션 바와 함께 사용하여 간단하게 구현할 수 있도록 도와준다. 실제 다음 코드로 네이게이션이 가능한 뷰의 레이아웃을 모두 만든 것이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ion-nav-bar&amp;gt;&amp;lt;/ion-nav-bar&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ion-nav-view&amp;gt;&amp;lt;/ion-nav-vew&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ion-nav-bar&lt;/code&gt;와 &lt;code&gt;ion-nav-view&lt;/code&gt;를 사용하면 자동으로 새로운 View를 요청하면 다음 네비게이션이 가능한 View가 열리고 상단에 뒤로가기 버튼과 새로운 타이틀을 가지는 View가 열리게 된다. 아래 그림은 우리가 구현한 네비게이션 뷰 중에서 한 부분이다. 우리는 &lt;strong&gt;뒤로가기&lt;/strong&gt; 버튼이 있는 네비게이션 바를 직접 구현하지 않았고 Ionic에서 제공하는 &lt;code&gt;ion-nav-bar&lt;/code&gt;와 &lt;code&gt;ion-nav-view&lt;/code&gt;를 사용했다. 자세한 사용법은 다음 포스팅에서 소개하려고 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cfile22.uf.tistory.com/image/262F10455459D34B2851B5&quot; alt=&quot;ion-nav-bar 예제 {width:320px}&quot;&gt;&lt;/p&gt;

&lt;p&gt;Ionic은 뷰의 네비게이션을 위해 다른 뷰로 이동하는 것을 SPA의 routing으로 한다. 즉 다시 말해서 새로운 뷰를 불러오는 것은 AngularJS의 templates로 만들어진 HTML 페이지를 AngularJS에서 routing으로 요청하여 불러오는 것이다. 아래는 Ionic의  slidemenu sample project의 Routing을 정의한 부분이다. Ionic의 AngularJS 기반의 이런 Routing은 완벽한 SPA 구현을 할 수 있게 도와준다. Ionic의 Routing을 사용하는 방법도 다음 포스팅에 자세히 소개하려고 한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$stateProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$urlRouterProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$stateProvider&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;app&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/app&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;abstract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;templates/menu.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;AppCtrl&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;app.browse&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/browse&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;menuContent&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;templates/browse.html&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;app.playlists&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/playlists&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;menuContent&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;templates/playlists.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;PlaylistsCtrl&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;app.single&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/playlists/:playlistId&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;menuContent&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;templates/playlist.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;PlaylistCtrl&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// if none of the above states are matched, use this as the fallback&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$urlRouterProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;otherwise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/app/playlists&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;ionic과-cordova&quot;&gt;Ionic과 Cordova&lt;/h3&gt;

&lt;p&gt;Ionic은 Cordova를 사용해서 여러가지 모바일 앱에 실행할 수 있는 빌드 시스템을 갖추었다. Ionic의 초기 버전에는 Cordova 명령어를 사용하여 프로젝트를 빌드하고 디바이스에 실행하였는데, Ionic은 ionic command를 자체적으로 만들었다. 사실 Ionic의 command는 Cordova의 command를 매핑하여 Cordova의 command를 확장하려고 하는 것 같다는 생각이 든다. Ionic은 Cordova를 기반으로 하기 때문에 cordova command를 사용한 경험이 있으면 대부분 같은 명령어로 사용할 수 있다. 예를 들어 프로젝트에 &lt;code&gt;ios&lt;/code&gt; 플랫폼을 추가한다고 가정하면 Ionic command는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ionic platform add ios
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 command는 Cordova의 command로  &lt;code&gt;ios&lt;/code&gt; 플랫폼을 추가하는 것과 동일하다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cordova platform add ios
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ionic로 프로젝트를 개발할 때 HTML, JavaScript, CSS 파일이 수정될 때마다 디바이스에 빌드해서 디버깅을 한다면 빌드시간이 길어서 코드를 업데이트하는데 굉장히 많은 시간이 소요될 것이다. Ionic은 하이브리드 앱을 개발하는 프레임워크이다. 네이티브 자원을 사용하지 않는 코드는 디바이스에 빌드하지 않고 로컬 컴퓨터에서 Safari나 Chrome 브라우저를 이용해서 개발한다. 이 때 Ionic 프로젝트를 디버깅할 수 있게 앱을 실행시켜주는 서버를 구동해서 개발한다. Cordova에서는 &lt;code&gt;cordova serve&lt;/code&gt;라는 명령어를 사용하여 프로젝트를 실행시키는데 이 때 웹 자원 소스가 업데이트 되면 이 명령어를 재시작해줘야한다. 하지만 &lt;code&gt;phonegap serve&lt;/code&gt;와 &lt;code&gt;ionic serve&lt;/code&gt; command를 이용하면 웹 자원이 수정될 때 수정된 파일을 반영해서 서버 재시작 없이 자동으로 업데이트 되기 때문에 이 명령어를 다시 실행시키지 않아도 된다. Ionic을 이용하여 개발을 진행하면 웹 자원의 디버깅을 가장 많이하는데, Safari나 Chrome의 &lt;strong&gt;Developer Tool&lt;/strong&gt;로 디버깅을 하면 된다. 아래 그림은 &lt;code&gt;ionic serve&lt;/code&gt;를 실행하고 &lt;strong&gt;Chrome  Developer Tool&lt;/strong&gt; 로 디버깅하는 화면이이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cfile5.uf.tistory.com/image/24440D3B5459D34B160AA5&quot; alt=&quot;chrome debugging {width:320px;}&quot;&gt;&lt;/p&gt;

&lt;p&gt;Ionic은 Cordova 기반의 장점을 사용할 수 있다. Cordova의 장점 중에 하나는 Plugins 이라고 생각한다. 하이브리드 앱을 개발하기 위해서는 단순하게 HTML, JavaScript, CSS 만으로는 디바이스를 제어할 수 없다. 그래서 Cordova는 네이티브 브릿지와 같은 Cordova Plugins를 제공하고 이 것을 이용하여 웹과 네이티브간의 통신을 가능하게 한다. 예를 들어 Push Notification 서비스를 앱에 구현하고 싶을 경우 Push Notification은 디바이스의 자원을 사용해야만 가능하다. PhoneGap에서는 &lt;a href=&quot;https://github.com/phonegap-build/PushPlugin&quot;&gt;PhoneGap Push Plugin&lt;/a&gt;을 이미 만들어 두었다. 이것을 사용하면 많은 시간을 단축하고 간단하게 Push Notification 기능을 하이브리드 앱에서 구현할 수 있다. 다음 포스팅에서 &lt;strong&gt;PushPlugin&lt;/strong&gt;을 어떻게 설정하고 사용하는지에 대한 글도 소개할 예정이다.&lt;/p&gt;

&lt;h3 id=&quot;ionic과-node.js&quot;&gt;Ionic과 Node.js&lt;/h3&gt;

&lt;p&gt;Ionic은 &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt; 기반의 모듈을 사용하여 개발을 할 수 있다. PhoneGap과 Cordova의 command가 모두 Node.js 기반으로 만들었기 때문에 Node.js 모듈을 함께 사용하여 개발할 수 있듯 Ionic command 모두 Node.js로 만들어져 있기 때문이다. 예를 들어 Ionic 프로젝트를 모두 개발하고 JavaScript를 uglify를 할 때 &lt;a href=&quot;http://gulpjs.com&quot;&gt;gulp.js&lt;/a&gt;를 이용하여 uglify를 할 수 있다. 우리는 MVC 기반으로 만든 JavaScript 코드를 &lt;code&gt;all.min.js&lt;/code&gt; 라는 하난의 파일로 만들어서 배포버전을 만들었는데 이때 Node.js의 스트림기반 task 모듈인 &lt;strong&gt;gulp.js&lt;/strong&gt;를 이용했다.&lt;/p&gt;

&lt;h3 id=&quot;ionic과-앱-스토어-등록&quot;&gt;Ionic과 앱 스토어 등록&lt;/h3&gt;

&lt;p&gt;Ionic으로 만든 하이브리드 앱은 여러가지 디바이스에 실행할 수 있는데 우리는 iOS와 Android 디바이스만 고려했다. Ionic에는 앱의 정보를 설정하는 &lt;code&gt;config.xml&lt;/code&gt; 파일이 있는데 여기에서 iOS와 Android 앱을 스토어에 등록하기 위한 정보를 입력해서 Ionic 프로젝트를 배포할 수 있게 만들어 놓았다. 이것은 Cordova 프로젝트를 앱 스토어에 등록하는 설정과 동일하다. 예를 들어 &lt;code&gt;net.hibrain.apps.hibrainnet&lt;/code&gt; 이라는 패키지명으로 iOS와 Android 프로젝트를 스토어에 등록한 상태라면 다음 버전을 스토어를 통해서 배포할 때, 동일한 패키지명으로 개발을 해야한다. 아래는 우리가 프로젝트를 앱 스토어에 등록하기 위해서 &lt;code&gt;config.xml&lt;/code&gt;에 설정한 정보의 일부분이다. 자세히 살펴보면 앺 패키지명을과 스토어에 등록할 버전 정보를 &lt;code&gt;&amp;lt;widget id=&amp;quot;net.hibrain.apps.hibrainnet&amp;quot; version=&amp;quot;2.4.0&amp;quot;&amp;gt;&lt;/code&gt;에서  지정한 것을 살펴볼 수 있다. 그리고  앱의 가로,세로 지원 모드, 아이콘 설정 등을 명시적으로 정의한 것을 살펴볼 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;#39;1.0&amp;#39; encoding=&amp;#39;utf-8&amp;#39;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;widget&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;net.hibrain.apps.hibrainnet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;2.4.0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/ns/widgets&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:cdv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://cordova.apache.org/ns/1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;하이브레인넷&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;
        하이브레인넷 채용 정보 스마트폰 어플리케이션
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;author&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;email=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;apps@hibrain.net&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.hibrain.net&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      Hibrainnet Mobile Service Support
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/author&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;content&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;access&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;origin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;preference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fullscreen&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;preference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;webviewbounce&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;preference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;UIWebViewBounce&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;preference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;DisallowOverscroll&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;preference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Orientation&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;default&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;preference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SplashScreen&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;screen&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;preference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;BackupWebStorage&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;none&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;feature&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;StatusBar&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ios-package&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;CDVStatusBar&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onload=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/feature&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;feature&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;PushPlugin&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ios-package&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;PushPlugin&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/feature&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;platform&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/android/icon-ldpi.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;density=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ldpi&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/android/icon-mdpi.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;density=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mdpi&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/android/icon-hdpi.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;density=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hdpi&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/android/icon-xhdpi.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;density=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;xhdpi&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/platform&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;platform&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ios&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- iOS 7.0+ --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- iPhone / iPod Touch  --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-60.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;60&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;60&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-60@2x.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;120&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;120&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- iPad --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-76.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;76&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;76&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-76@2x.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;152&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;152&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- iOS 6.1 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Spotlight Icon --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-40.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;40&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;40&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-40@2x.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;80&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;80&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- iPhone / iPod Touch --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;57&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;57&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon@2x.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;114&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;114&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- iPad --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-72.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;72&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;72&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-72@2x.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;144&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;144&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- iPhone Spotlight and Settings Icon --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-small.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;29&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;29&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-small@2x.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;58&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;58&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- iPad Spotlight and Settings Icon --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-50.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;50&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;50&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-50@2x.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;100&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;100&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/platform&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/widget&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;우리는 &lt;strong&gt;Ionic Framework&lt;/strong&gt;를 이용한 첫번째 하이브리드 앱을 &lt;a href=&quot;https://itunes.apple.com/kr/app/haibeuleinnes/id438616285?mt=8&quot;&gt;앱스토어&lt;/a&gt;와 &lt;a href=&quot;https://play.google.com/store/apps/details?id=net.hibrain.apps.android.hibrainnet&quot;&gt;구글 플레이&lt;/a&gt;를 통해 배포했다. 기존에 iOS와 Android를 혼자 개발했을 때 개발 비용이 너무 많이 필요했다. 안드로이드 파편화 그리고 iOS와 Android 개발의 다른 플랫폼을 혼자서 처리하기에는 버거운 일이였다. 그래서 우리는 개발환경을 하이브리드 개발을 해보기로 결정을 했다. 사전 조사와 테스트 앱을 만들어보고 우리가 배포하는 앱은 고성능을 필요하기 보다 관리의 편리성과 개발 시간을 단축하는 것을 주요하게 생각했기 때문에 하이브리드 앱으로 결정을 내린것이다. 하이브리드 앱 개발 프레임워크를 조사하면서 Ionic은 우리가 원하는 환경을 가지고 있었다. Ionic은 AngularJS, Cordova, Node.js 기반으로 만들어졌기 때문에 우리가 요구조건을 대부분 갖추고 있었다. 이번 프로젝트에서 우리는 Cordova를 이용해서  Network와 Persistence 플러그인 두가지를 만들었고, Ionic을 사용해서 iOS와 Android 앱을 동시에 개발하였다. 개발 시간은 기존의 네이티브 앱을 개발하는 시간에 비해 상당한 시간을 줄일 수 있었다. 우리는 이 경험을 바탕으로 Ionic으로 하이브리드 앱을 개발한 과정과 개발하면서 겪게된 문제들 그리고 그것을 해결한 방법들을 계속해서 블로그를 통해 소개할 예정이다.&lt;/p&gt;

&lt;h2 id=&quot;연구원-소개&quot;&gt;연구원 소개&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;작성자 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;송성광&lt;/a&gt; 개발 연구원&lt;/li&gt;
&lt;li&gt;블로그 : &lt;a href=&quot;http://blog.saltfactory.net&quot;&gt;http://blog.saltfactory.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;이메일 : &lt;a href=&quot;mailto:saltfactory@gmail.com&quot;&gt;saltfactory@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;트위터 : &lt;a href=&quot;https://twitter.com/saltfactory&quot;&gt;@saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;페이스북 : &lt;a href=&quot;https://facebook.com/salthub&quot;&gt;https://facebook.com/salthub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;연구소 : &lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설연구소&lt;/li&gt;
&lt;li&gt;연구실 : &lt;a href=&quot;http://dblab.changwon.ac.kr&quot;&gt;창원대학교 데이터베이스 연구실&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 13 Oct 2014 00:00:00 +0900</pubDate>
        <link>/series/ionic/create-hybrid-app-using-ionic.html</link>
        <guid isPermaLink="true">/series/ionic/create-hybrid-app-using-ionic.html</guid>
        
        <category>android</category>
        
        <category>ios</category>
        
        <category>hybrid</category>
        
        <category>html5</category>
        
        <category>ionic</category>
        
        
        <category>ionic</category>
        
      </item>
    
      <item>
        <title>Nginx와 git 연동 시 The remote end hung up unexpectedly 에러 문제 해결</title>
        <description>&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

&lt;p&gt;Nginx와 git 연동 시 &lt;code&gt;git push&lt;/code&gt; 명령어를 실행할 때, &lt;strong&gt;The remote and hung up unexpectedly&lt;/strong&gt; 라는 에러를 보여주면서 &lt;code&gt;git push&lt;/code&gt;가 정상적으로 동작하지 않는 문제를 만날 수 있다. 이것은 NginX에서 POST의 크기의 제한 때문에 발생하는 문제이다.
Nginx의 문제를 파악하고 NginX의 설정을 변경하여 이 문제를 해결하는 방법에 대해서 알아본다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;git-push-에러-발생&quot;&gt;git push 에러 발생&lt;/h2&gt;

&lt;p&gt;우리는 &lt;a href=&quot;http://yobi.io&quot;&gt;Yobi&lt;/a&gt;와 &lt;a href=&quot;http://nginx.com/&quot;&gt;NGINX&lt;/a&gt;를 연동하여 사용하고 있다. 이전 포스팅에서 소개했지만, 우리는 다양한 리눅스 서버에 운영될 수 있는 환경을 구축하기 위해서 &lt;a href=&quot;https://docker.com/&quot;&gt;Docker&lt;/a&gt;를 사용하여 &lt;a href=&quot;https://github.com/saltfactory/docker-yobi&quot;&gt;saltfactory/yobi&lt;/a&gt;와 &lt;a href=&quot;https://github.com/saltfactory/docker-nginx&quot;&gt;saltfactory/nginx&lt;/a&gt; 이미지를 만들어서 git를 운영하고 있다. yobi는 ssh로 git를 사용하는 것 대신에 http로 git를 쉽게 사용할 수 있게 지원해주고 있다. 사내에서 http 포트만 외부에서 사용할 수 있는 우리 연구소에서 yobi를 선택했던 가장 큰 이유중에 하나가 http로 git를 사용할 수 있다는 것이였다. 우리는 http 서비스의 빠른 응답속도와 확장성을 위해서 웹 서버로 NGINX를 선택했고 이것을 yobi와 연동하여 사용하고 있다.&lt;/p&gt;

&lt;p&gt;프로젝트 소스코드를 원격 리파지토리에 저장해서 서버에서 병합하는 방법을 취하고 있는데 어느날 갑자기 로컬에서 작업하여 이력을 관리한 &lt;code&gt;commit&lt;/code&gt;들이 다음과 같이 &lt;strong&gt;&lt;em&gt;The remote end hung up unexpectedly&lt;/em&gt;&lt;/strong&gt; 에러를 발생하면서 서버의 원격 리파지토리에 &lt;code&gt;push&lt;/code&gt;가 되지 않는 것이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Counting objects: 19, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (5/5), done.
Writing objects: 100% (5/5), 1.27 MiB | 0 bytes/s, done.
Total 5 (delta 2), reused 0 (delta 0)
error: RPC failed; result=22, HTTP code = 413
fatal: The remote end hung up unexpectedly
fatal: The remote end hung up unexpectedly
Everything up-to-date
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 &lt;code&gt;fetch&lt;/code&gt;와 &lt;code&gt;pull&lt;/code&gt; 과 같은 리모트 명령어들은 정상적으로 동작하고 있었다. 그래서 우리는 서버에서 nginx의 로그를 살펴보기로 했다.&lt;/p&gt;

&lt;h2 id=&quot;nginx-에러-발생&quot;&gt;NGINX 에러 발생&lt;/h2&gt;

&lt;p&gt;Docker로 구성한 서버 환경에서 우리는 NGINX의 로그를 VOLUME으로 마운트시킨 디렉토리 파일에서 로그를 바로 확인할 수 있었다. 클라이언트에서 &lt;code&gt;git push&lt;/code&gt;를 요청할 때마다 다음과 같이 &lt;strong&gt;&lt;em&gt;client intended to send too large body&lt;/em&gt;&lt;/strong&gt;  에러가 로그에 남는 것을 확인했다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;2014/09/12 01:38:50 [error] 11#0: *155 client intended to send too large body: 1326741 bytes, client: 클라이언트 아이피, server: 서버네임, request: &amp;quot;POST /프로젝트명/git-receive-pack HTTP/1.0&amp;quot;, host: &amp;quot;호스트네임&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 에러는 &lt;strong&gt;POST&lt;/strong&gt; request를 요청할 때 서버에서 처리할 수 있는 body의 사이즈보다 큰 요청이 들어오면 생기는 에러이다. 그래서 우리는 NGINX의 설정값을 수정하기로 했다.&lt;/p&gt;

&lt;h2 id=&quot;client_max_body_size-수정&quot;&gt;client_max_body_size 수정&lt;/h2&gt;

&lt;p&gt;NGINX에서 클라이언트에서 요청하는 body의 사이즈를 설정하는 옵션은 &lt;strong&gt;client_max_body_size&lt;/strong&gt; 이다. 우리는 yobi를 docker에서 운영하기 때문에 서버에 직접 들어가서 수정하지 않고, &lt;em&gt;VOLUME&lt;/em&gt;으로 마운트 시키는 디렉토리 안의  &lt;code&gt;yobis-site.conf&lt;/code&gt; 파일을 다음과 같이 수정했다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;client_max_body_size 1000M;

upstream yobi-upstream {
  server  서버네임:9000;
}

server {
  listen 80;
  server_name 서버네임;
}
... 생략
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ubuntu에 설치되는 NGINX는 &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt; 설정 파일을 가지고 있고 그 파일 안에서 외부 설정 파일들을 로드시키는데 우리는 Docker를 설정할 때 &lt;code&gt;/site-enabed/*.conf&lt;/code&gt; 파일들을 로드시키도록 지정하였다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;http {
... 생략 ...
include /etc/nginx/sites-enabled/*;
... 생략 ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NGINX의 각 설정파일은 &lt;code&gt;http&lt;/code&gt; 설정 안에 포함이 되도록 설정되어 있다. &lt;strong&gt;client_max_body_size&lt;/strong&gt; 설정은 &lt;strong&gt;http&lt;/strong&gt; 설정 안에 지정되어야 하기 때문에 위의 &lt;code&gt;yobi-site.conf&lt;/code&gt;의 첫번째 라인에 바로 이 값을 설정하도록 한 것을 유의해야한다. 설정이 끝나면 NGINX을 다시 제시작 한다. 우리는 docker를 사용했기 때문에 &lt;code&gt;docker start&lt;/code&gt; 명령어로 재시작을 했다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo docker start nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다시 클라이언트에 돌아가서 &lt;code&gt;git push&lt;/code&gt; 명령을 실행하면 문제 없이 원격 리파지토리에 commit들이 모두 push 되는 것을 확인할 수 있을 것이다.&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;git는 로컬에서 뿐만 아니라 원격 저장소에서 소스코드 형상관리를 할 수 있다. 사내 망 내부가 아닌 경우 http를 이용해서 git를 사용할 경우 접근도가 높아진다. http로 git 환경을 만드는 것은 그렇게 쉬운 일은 아니다. 하지만 yobi를 사용하면 복잡한 git를 http로 사용할 수 있는 환경을 쉽게 구축할 수 있다. http 서비스의 성능과 확장성을 위해서 &lt;a href=&quot;http://playframework.com&quot;&gt;Play framework&lt;/a&gt;을 단독으로 웹 서버로 사용하는 것 보다 NGINX나 Apaach와 같은 웹 서버를 함께 사용하는 것이 좋다. 하지만 git를 http로 사용할 때 한가지 기억해 둬야할 것이다. &lt;strong&gt;HTTP로 git의 commit을 전송할 때 POST로 전송이 되며, 웹 서버는 POST의 body 사이즈를 제한하고 있다&lt;/strong&gt;다는 것이다. 즉, 더 큰 사이즈의 데이터를 HTTP의 POST로 전송하기 위해서는 웹 서버의 &lt;strong&gt;HTTP POST body&lt;/strong&gt; 설정을 변경해야한다. 우리가 겪은 문제도 동일한 문제이다. 하이브리드 어플리케이션 개발을 하는 프로젝트에서 commit하고 push하는 데이터량이 많아져서 NGINX에서 기본적으로 설정한 HTTP POST 사이즈보다 커서 원격 저장소에 정상적으로 업데이트 정보를 전송하지 못하는 문제를 갖게 되었다. 우리는 NGINX 웹 서버를 사용하고 있었고 Docker를 사용해서 nginx의 설정파일을 외부 디렉토리에서 VOLUME으로 마운트시켜서 사용하고 있었기 때문에 설정파일에 &lt;strong&gt;client_max_body_size&lt;/strong&gt;의 값을 변경하여 이 문제를 해결했다.&lt;/p&gt;

&lt;p&gt;git와 HTTP를 연동하여 사용한다면 반드시 HTTP POST body의 사이즈를 결정하는 옵션을 한번 더 체크해보기 바란다. 이 부분을 간과하고 넘어간다면 언젠가 큰 소스코드를 한번에 push 할 때  &amp;#39;fatal: The remote end hung up unexpectedly&amp;#39;를 만나게 될 것이다. 이 에러를 만나게 되면 웹 서버의 HTTP POST body 사이즈를 늘려주고 서버를 재시작하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2056124/nginx-client-max-body-size-has-no-effect&quot;&gt;http://stackoverflow.com/questions/2056124/nginx-client-max-body-size-has-no-effect&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;연구원-소개&quot;&gt;연구원 소개&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;작성자 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;송성광&lt;/a&gt; 개발 연구원&lt;/li&gt;
&lt;li&gt;블로그 : &lt;a href=&quot;http://blog.saltfactory.net&quot;&gt;http://blog.saltfactory.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;이메일 : &lt;a href=&quot;mailto:saltfactory@gmail.com&quot;&gt;saltfactory@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;트위터 : &lt;a href=&quot;https://twitter.com/saltfactory&quot;&gt;@saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;페이스북 : &lt;a href=&quot;https://facebook.com/salthub&quot;&gt;https://facebook.com/salthub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;연구소 : &lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설연구소&lt;/li&gt;
&lt;li&gt;연구실 : &lt;a href=&quot;http://dblab.changwon.ac.kr&quot;&gt;창원대학교 데이터베이스 연구실&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 12 Sep 2014 00:00:00 +0900</pubDate>
        <link>/series/nginx/The-remote-end-hung-up-unexpectedly-when-git-push.html</link>
        <guid isPermaLink="true">/series/nginx/The-remote-end-hung-up-unexpectedly-when-git-push.html</guid>
        
        <category>nginx</category>
        
        <category>git</category>
        
        
        <category>nginx</category>
        
      </item>
    
      <item>
        <title>docker-yobi를 이용하여 yobi 운영하기</title>
        <description>&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

&lt;p&gt;우리는 LXC로 서버를 운영하기 위해서 &lt;a href=&quot;http://docker.com&quot;&gt;Docker&lt;/a&gt;를 도입하기로 했다. docker를 도입해서 docker에 올리는 서비스중 첫번째로 &lt;a href=&quot;http://yobi.io&quot;&gt;Yobi&lt;/a&gt;를 적용하기로 했다. 개인연구로 사용하고 있는 랩탑은 Mac OS X를 사용하고 있기 때문에 &lt;a href=&quot;&quot;&gt;boot2docker&lt;/a&gt;를 사용하여 Dockerfile을 생성해서 GitHub에 &lt;a href=&quot;https://github.com/saltfactory/docker-yobi&quot;&gt;docker-hub&lt;/a&gt; 와 &lt;a href=&quot;https://registry.hub.docker.com/u/saltfactory/yobi/&quot;&gt;Docker Hub&lt;/a&gt;에 올렸다. 이 포스팅에서는 GitHub와 Docker Hub를 이용해서 Yobi를 사용하는 방법을 소개한다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;docker-yobi&quot;&gt;docker-yobi&lt;/h2&gt;

&lt;p&gt;docker-yobi는 docker에서 &lt;a href=&quot;http://yobi.io&quot;&gt;Yobi&lt;/a&gt;를 운영하기 위한 Dockerfile이 포함되어 있다. docker-yobi는 로컬에 있는 yobi 디렉토리를 &lt;strong&gt;mount&lt;/strong&gt;하여 사용한다. 즉, docker-yobi를 실행할 때 docker 이미지에 내 로컬 PC에 있는 yobi 디렉토리를 그대로 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;docker-yobi를 사용하기 위해서 먼저 GitHub에서 yobi를 &lt;code&gt;clone&lt;/code&gt;한다. 설치 예제를 설명하기 위해서 yobi를 &lt;code&gt;clone&lt;/code&gt; 받은 경로는 &lt;code&gt;/Users/saltfactory/yobi&lt;/code&gt;라고 가정한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git clone https://github.com/naver/yobi.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;docker나 boot2docker를 시작한 후 &lt;code&gt;build&lt;/code&gt;를 한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker build -t saltfactory/yobi .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;docker-yobi의 &lt;code&gt;run-yobi.sh&lt;/code&gt;를 실행한다. 이때, 로컬에 &lt;code&gt;clone&lt;/code&gt;한 yobi의 디렉토리를 지정한다. 설치 예제로 &lt;code&gt;clone&lt;/code&gt; 받은 경로는 &lt;code&gt;/Users/saltfactory/yobi&lt;/code&gt;라고 가정한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sh run-yobi.sh /Users/saltfactory/yobi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;docker-yobi가 정상적으로 실행되고 있는지 확인하기 위해서 &lt;code&gt;docker ps&lt;/code&gt; 명령어로 확인한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 실행이되면 docker ps 목록에 yobi가 보인다. docker-yobi가 정상적으로 실행되면 &lt;a href=&quot;https://www.playframework.com/&quot;&gt;play&lt;/a&gt;가 실행되면서 필요한 패키지를 다운받고 컴파일한다. 만약 설치되는 로그를 보고 싶을 경우는 &lt;code&gt;docker logs&lt;/code&gt; 명령어로 확인할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker logs yobi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;play가 정상적으로 시작이되고 난 다음 브라우저에서 확인한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:9000&quot;&gt;http://localhost:9000&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;docker-yobi-활용방법&quot;&gt;docker-yobi 활용방법&lt;/h2&gt;

&lt;p&gt;docker-yobi는 yobi를 사용하는데 필요한 이미지와 컨테이너를 만들게 된다. 한번 만들어진 컨테이너를 재사용하면 play가 시작하면서 다운받고 컴파일한 패키지를 다시 다운받고 컴파일하지 않기 때문에 yobi 시작 시간을 줄일 수 있다. 새롭게 &lt;code&gt;docker build&lt;/code&gt;를 하지 않는 이상 빠르게 yobi를 실행할 수 있다.&lt;/p&gt;

&lt;p&gt;docker에 커네이너로 만들어진 yobi를 정지하기 위해서는 &lt;code&gt;docker stop&lt;/code&gt; 명령어를 사용한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker stop yobi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다시 yobi 컨테이너를 실행하고 싶을 경우 &lt;code&gt;run-yobi.sh&lt;/code&gt;를 명령어를 사용한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sh run-yobi.sh /Users/saltfactory/yobi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;다른-서버에서-docker-yobi-사용하여-이전하기&quot;&gt;다른 서버에서 docker-yobi 사용하여 이전하기&lt;/h2&gt;

&lt;p&gt;docker 환경을 갖춘 모든 리눅스 서버에서 docker-yobi를 사용하여 이전에 사용하던 yobi를 그대로 사용할 수 있다. 만약 yobi를 다른 서버로 이전할 경우, docker-yobi를 설치하고 로컬 PC에 저장된 yobi 디렉토리만 복사해서 이전하는 서버에 복사하여 &lt;code&gt;run-yobi.sh&lt;/code&gt;를 할 때 이전한 서버에 복사한 yobi 경로를 지정하여 사용하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;mac-os-x에서-boot2docker를-사용할-경우&quot;&gt;Mac OS X에서 boot2docker를 사용할 경우&lt;/h2&gt;

&lt;p&gt;docker는 리눅스 환경에서 사용하지만 Mac OS X에서 &lt;a href=&quot;http://docs.docker.com/installation/mac/&quot;&gt;boot2docker&lt;/a&gt;를 사용하여 docker-yobi를 사용할 수 있다.
boot2docker 설치방법은 &lt;a href=&quot;http://docs.docker.com/installation/mac/&quot;&gt;http://docs.docker.com/installation/mac/&lt;/a&gt; 나 &lt;a href=&quot;http://blog.saltfactory.net/255&quot;&gt;http://blog.saltfactory.net/255&lt;/a&gt; 문서를 참조하면 된다.&lt;/p&gt;

&lt;p&gt;boot2docker를 사용하기 위해서는 &lt;a href=&quot;https://www.virtualbox.org&quot;&gt;VirtualBox&lt;/a&gt;에서 forwarding port를 하기 위해서 docker-yobi 안에 있는 &lt;code&gt;boot2dockr-ports.sh&lt;/code&gt;를 실행한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sh boot2docker-ports.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;boot2docker에서 로컬 PC에 있는 디렉토리를 마운트하기 위해서 VirtualBox에서 shared directory를 지정해야 한다. 다음 사이트에 자세한 방법을 참조한다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/boot2docker-lightweight-linux-for-docker/boot2docker-together-with-virtualbox-guest-additions-da1e3ab2465c&quot;&gt;https://medium.com/boot2docker-lightweight-linux-for-docker/boot2docker-together-with-virtualbox-guest-additions-da1e3ab2465c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://viget.com/extend/how-to-use-docker-on-os-x-the-missing-guide&quot;&gt;http://viget.com/extend/how-to-use-docker-on-os-x-the-missing-guide&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;boot2docker down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;curl http://static.dockerfiles.io/boot2docker-v1.2.0-virtualbox-guest-additions-v4.3.14.iso &amp;gt; ~/.boot2docker/boot2docker.iso
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;VBoxManage sharedfolder add boot2docker-vm -name home -hostpath /Users
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;boot2docker up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;docker-hub&quot;&gt;Docker Hub&lt;/h2&gt;

&lt;p&gt;가장 먼저 해야할 일을 yobi를 clone 받는 것이다. 로컬 PC에 GitHub로부터 yobi를 clone 한다. 예제 설명을 위해서 clone 받는 위치는 &lt;code&gt;/Users/saltfactory/yobi&lt;/code&gt;라고 가정한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git clone https://github.com/naver/yobi.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;docker는 GitHub와 같은 Repository를 구축했다. 그래서 docker 명령어로 docker image를 바로 다운받아서 사용할 수 있다. 우리는 yobi를 Docker Hub에서 바로 다운 받을 수 있게 GitHub와 Docker Hub를 연동했다.
&lt;img src=&quot;http://cfile30.uf.tistory.com/image/223C273653FEB7A60B789B&quot; alt=&quot;Docker Hub&quot;&gt;&lt;/p&gt;

&lt;p&gt;Docker Hub에서 &lt;code&gt;docker pull&lt;/code&gt; 명령어를 사용하여  &lt;strong&gt;&lt;em&gt;saltfactory/yobi&lt;/em&gt;&lt;/strong&gt; 이미지를 다운 받는다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker pull saltfactory/yobi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;saltfactory/yobi&lt;/em&gt;&lt;/strong&gt; 에서 필요한 파일은  &lt;a href=&quot;https://www.playframework.com/&quot;&gt;Play&lt;/a&gt;를 실행시키는 &lt;code&gt;start-yobi.sh&lt;/code&gt; 파일이 필요하다. docker-yobi가 실행할때 이 파일을 자동으로 마운트해서 사용하기 때문이다. 로컬에 다음 내용으로 &lt;code&gt;start-yobi.sh&lt;/code&gt; 파일을 만든다. 필요하다면 play가 시작할 때 다른 옵션을 추가해도 된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/yobi/yobi&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; play &lt;span class=&quot;s2&quot;&gt;&amp;quot;start -DapplyEvolutions.default=true -Dhttp.port=9000&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음은 docker-yobi를 실행하는 &lt;code&gt;run-yobi.sh&lt;/code&gt; 파일을 만든다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;YOBI_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f &lt;span class=&quot;nv&quot;&gt;$YOBI_HOME&lt;/span&gt;/RUNNING_PID &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  rm -rf &lt;span class=&quot;nv&quot;&gt;$YOBI_HOME&lt;/span&gt;/RUNNING_PID
  docker start yobi
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  docker stop yboi
  docker rm yobi
  docker run --name yobi &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -d -p 9000:9000 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v &lt;span class=&quot;nv&quot;&gt;$YOBI_HOME&lt;/span&gt;:/home/yobi/yobi &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  saltfactory/yobi
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 &lt;code&gt;run-yobi.sh&lt;/code&gt;를 실행한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sh run-yobi.sh /Users/saltfactory/yobi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;마지막으로 브라우저에서 &lt;a href=&quot;http://localhost:9000&quot;&gt;http://localhost:9000&lt;/a&gt; 를 확인한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cfile30.uf.tistory.com/image/214D574553FEB7A62A5D91&quot; alt=&quot;yobi&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;우리는 여러대의 Linux 서버를 관리하는데 많은 시간이 들여지고 환경을 맞추는데 어려움을 겪어서 서버에 동작하는 서비스들을 docker로 운영하기로 결정했다. 첫번째로 yobi를 docker에서 운영하기 위해서 docker-yobi를 만들어서 GitHub에 &lt;a href=&quot;https://github.com/saltfactory/docker-yobi&quot;&gt;docker-hub&lt;/a&gt; 와 &lt;a href=&quot;https://registry.hub.docker.com/u/saltfactory/yobi/&quot;&gt;Docker Hub&lt;/a&gt;에 올렸다. 이제 우리는 어떠한 Linux 서버에서도 동일한 환경으로 Yobi 서비스를 사용할 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;Yobi는 git를 사용하기 위한 repository를 포함하고 있다. 이 repository는 docker 이미지 안에 넣지 않았다. 이유는 Yobi의 repository는 단순히 우리가 쌓는 데이터이기 때문이고, 이 데이터는 서버 환경에 영향을 받지 않고 빠르게 이전하거나 백업을 따로 하기 위해서 이다. 그래서 우리는 docker의 &lt;a href=&quot;https://docs.docker.com/userguide/dockervolumes/&quot;&gt;VOLUME&lt;/a&gt;을 사용해서 외부의 디렉토리를 docker 컨테이너에 올릴 수 있게 했다.&lt;/p&gt;

&lt;p&gt;개인적으로 연구할 때 사용하는 랩탑은 Mac OS X 이기 때문에 boot2docker를 사용했지만 docker-yobi를 사용해서 어떤 Linux 서버에서도 쉽게 설치해서 운영할 수 있는 Dockerfile을 만들어서 사용할 수 있게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;참조&quot;&gt;참조&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/userguide/dockervolumes/&quot;&gt;https://docs.docker.com/userguide/dockervolumes/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/docker-hub/builds/&quot;&gt;https://docs.docker.com/docker-hub/builds/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://viget.com/extend/how-to-use-docker-on-os-x-the-missing-guide&quot;&gt;http://viget.com/extend/how-to-use-docker-on-os-x-the-missing-guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/boot2docker-lightweight-linux-for-docker/boot2docker-together-with-virtualbox-guest-additions-da1e3ab2465c&quot;&gt;https://medium.com/boot2docker-lightweight-linux-for-docker/boot2docker-together-with-virtualbox-guest-additions-da1e3ab2465c&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;연구원-소개&quot;&gt;연구원 소개&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;작성자 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;송성광&lt;/a&gt; 개발 연구원&lt;/li&gt;
&lt;li&gt;블로그 : &lt;a href=&quot;http://blog.saltfactory.net&quot;&gt;http://blog.saltfactory.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;이메일 : &lt;a href=&quot;mailto:saltfactory@gmail.com&quot;&gt;saltfactory@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;트위터 : &lt;a href=&quot;https://twitter.com/saltfactory&quot;&gt;@saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;페이스북 : &lt;a href=&quot;https://facebook.com/salthub&quot;&gt;https://facebook.com/salthub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;연구소 : &lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설연구소&lt;/li&gt;
&lt;li&gt;연구실 : &lt;a href=&quot;http://dblab.changwon.ac.kr&quot;&gt;창원대학교 데이터베이스 연구실&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 28 Aug 2014 00:00:00 +0900</pubDate>
        <link>/series/git/running-yobi-on-docker.html</link>
        <guid isPermaLink="true">/series/git/running-yobi-on-docker.html</guid>
        
        <category>docker</category>
        
        <category>git</category>
        
        <category>yobi</category>
        
        
        <category>git</category>
        
      </item>
    
  </channel>
</rss>
