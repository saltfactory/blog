<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>saltfactory&#39;s series</title>
    <description></description>
    <link>/series/</link>
    <atom:link href="/series/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 27 May 2015 14:51:40 +0900</pubDate>
    <lastBuildDate>Wed, 27 May 2015 14:51:40 +0900</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>모바일 앱 안에서 변화하는 외부 URL 문제를 NginX의 rewrite로 해결하기</title>
        <description>&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

&lt;p&gt;모바일 앱을 개발하면 외부 링크를 사용하여 터치를 하였을 때 모바일 브라우저로 링크를 열게 하는 코드를 작성할 수 있다. 때로는 외부 링크가 http 스키마가 아닌 어플리케이션을 열기 위한 스키마가 될 수 도 있다. 인터넷에서 URL은 URI의 서브셋으로 고유의 리소스 아이덴티티를 가지는 것임에도 불구하고 상황에 따라 URL이 사라지거나 변경될 수 있다. 예를 들면, &lt;a href=&quot;http://blog.saltfactory.net&quot;&gt;http://blog.saltfactory.net&lt;/a&gt; 이었던 URL이 서비스 변경으로 &lt;a href=&quot;http://weblog.saltfactory.net&quot;&gt;http://weblog.saltfactory.net&lt;/a&gt; 으로 변경될 수 있다는 것이다. 또는 서비스가 종료되어 더이상 존재하지 않는 URL이 되는 경우도 있다. 이런 문제를 해결하기 위해서 링크를 관리하는 방법이 필요했고 NginX를 사용하여 이 문제를 해결하는 방법을 소개한다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;외부-url-링크-문제&quot;&gt;외부 URL 링크 문제&lt;/h2&gt;

&lt;p&gt;모바일 앱을 개발할 때, 일반적으로 소개하는 메뉴에 외부 링크를 많이 사용한다. 예를들어, 사용자의 프로파일, SNS 링크, 게시판 연결등이다. 앱 내부에 네이티브하게 개발을 하기도 하지만 이미 만들어진 웹 사이트를 간단한 링크를 통해서 새로운 브라우저를 열어서 연결할 수 있도록 하는 경우가 많다. 만약 오래된 앱에 외부 URL을 터치 이벤트에 등록했다고 가정하자. 아래는 iOS 앱 속에 &amp;quot;개발자 홈페이지&amp;quot; 버튼을 누르면 사파리 브라우저를 열어서 링크를 보여주는 간단한 &lt;a href=&quot;https://developer.apple.com/swift/&quot;&gt;swift&lt;/a&gt;코드이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IBOutlet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;openBrowserButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IBAction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onOpenBrowserButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://me2day.net/saltfactory&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;bp&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;openBrowserButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;개발자 홈페이지&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIControlState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 me2day 서비스가 종료되면서 인터넷 상에서 디이상 앱 속에 넣어둔 URL은 유효한 주소가 되지 못한다. 실제로 me2day 서비스는 종료되었고, URL을 요청하면 다음과 같은 화면이 나타난다.
&lt;img src=&quot;http://assets.hibrainapps.net/images/var/albums/hbncloud/public/Screen_Shot%202015-05-06%20at%203_28_08%20PM.png?m=1430893668&quot; alt=&quot;&quot;&gt;
아마도 앱을 업데이트하지 않는 이상, 사용자들이 개발자의 홈페이지를 절대 열어볼 수 없을 것이다. me2day DNS 서버와 웹 서버 모두 개인이 가지고 있는 서버들이 아니라 redirect 설정도 할 수 없는 문제가 생긴다. 유일한 해결 방법은 URL 하나를 변경하기 위해 앱을 다시 빌드해서 버전을 올려 스토어에 등록을 해야한다. 우리는 이런 문제를 해결하기 위해서 &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html&quot;&gt;NginX의 rewrite 모듈 사용&lt;/a&gt;하여 외부 링크를 중개하는 웹 서버 환경을 구축하였다.&lt;/p&gt;

&lt;h2 id=&quot;nginx의-rewrite-사용하기&quot;&gt;NginX의 rewrite 사용하기&lt;/h2&gt;

&lt;p&gt;기존의 Apache 웹 서버를 사용해본 경험이 있으면 이미 해결 방법을 알고 있을 수도 있다. 우리는 NginX 서버를 사용하기 때문에 NginX의 rewrite를 사용하였다. NginX의 rewrite 모듈을 사용하는 방법은 아주 광법위하기 때문에 이 글에서 모두 소개한다는 것은 불가능하다. rewrite 모듈중에 우리가 사용한 특징은 특정 URL 요청이 들어오면 URL 이 포함하고 있는 &lt;a href=&quot;http://en.wikipedia.org/wiki/Query_string&quot;&gt;Query String&lt;/a&gt;에 있는 내용을 분석해서 파라미터로 넘어온 URL로 다시 요청을 시키도록 지시하는 것이다.&lt;/p&gt;

&lt;p&gt;Nginx의 서버 설정은 &lt;code&gt;server&lt;/code&gt; 안에서 이루어 진다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;server {
    listen 80;
    server_name dev.saltfactory.net
    rewrite_log on;
    access_log /var/log/nginx/dev.saltfactory.net_access.log combined;
    error_log /var/log/nginx/dev.saltfactory.net_error.log
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우리는 &lt;a href=&quot;http://dev.saltfactory.net/call&quot;&gt;http://dev.saltfactory.net/call&lt;/a&gt; 으로 들어오는 요청만 적용을 할 것이다. &lt;code&gt;server&lt;/code&gt;에 &lt;code&gt;location&lt;/code&gt; 을 추가한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;server {
    ... 생략 ...
    location ^~ /call  {

    }
    ... 생략 ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 웹서버로 &lt;code&gt;/call&lt;/code&gt;로 시작하는 URL 요청이 들어오면 우리가 설정한 &lt;code&gt;location&lt;/code&gt;의 설정을 따를 것이다. 우리는 외부 URL을 가지고 리다이렉트를 시켜줄 것이다. 그래서 외부 URL을 가지고 이 요청을 하도록 하기 위해서 &lt;code&gt;redirect_url&lt;/code&gt;이라는 Query String으로 파라미터를 가질 수 있도록 하였다. 그리고 &lt;code&gt;redirect_url&lt;/code&gt;이 있을 경우만 rewrite를 할 수 있도록 설정한다. 예를들면, &lt;a href=&quot;http://dev.saltfactory.net/call?redirect_url=http://me2day.net/saltfactory.net&quot;&gt;http://dev.saltfactory.net/call?redirect_url=http://me2day.net/saltfactory.net&lt;/a&gt; 과 같이 요청을 하면 NginX가 파라미터를 분석해서 &lt;code&gt;redirect_url&lt;/code&gt;로 페이지를 다시 요청하게 할 것이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;server {
    ... 생략 ...
    location ^~ /call  {
        if ($args ~ &amp;quot;redirect_url=(.*)&amp;quot; ) {
            return 302 $1;
        }
    }
    ... 생략 ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 NginX는 앱에서 요청하는 외부 URL 링크를 중간에서 외부 URL 링크로 다시 작성하게하는 중간자 역활을 하게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;앱에서-url-설정&quot;&gt;앱에서 URL 설정&lt;/h2&gt;

&lt;p&gt;우리는 NginX 중간자에게 URL 요청을 할 것이고 중간자가 URL을 Rewrite 시켜줄 것이기 때문이다. 앱에서 코드는 다음과 같이 변경된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IBOutlet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;openBrowserButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IBAction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onOpenBrowserButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://dev.saltfactory.net/call?redirect_url=http://me2day.net/saltfactory&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;bp&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;openBrowserButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;개발자 홈페이지&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIControlState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우리는 이제 외부 URL이 변경되더라도 더이상 앱을 업데이트하지 않아도 된다. 예를 들어, &lt;a href=&quot;http://me2day.net/saltfactory&quot;&gt;http://me2day.net/saltfactory&lt;/a&gt; 라는 외부 URL이 더이상 유요하지 않게 되면, NginX 중간자에서 rewrite 하는 부분을 다음과 같이 수정하면 된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;server {
    ... 생략 ...
    location ^~ /call  {
        if ($args ~ &amp;quot;redirect_url=http://me2day.net/saltfactory&amp;quot;) {
            return 302 http://blog.saltfactory.net/;
        }

        if ($args ~ &amp;quot;redirect_url=(.*)&amp;quot; ) {
            return 302 $1;
        }
    }
    ... 생략 ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 앱에서 &lt;a href=&quot;http://me2day.net/saltfactory&quot;&gt;http://me2day.net/saltfactory&lt;/a&gt; 라는 유효하지 않는 URL을 요청하더라도 NginX 중간자가 새로운 &lt;a href=&quot;http://blog.saltfactory.net&quot;&gt;http://blog.saltfactory.net&lt;/a&gt; 으로 rewrite 시켜주기 때문에 앱을 수정하지 않고도 외부 URL 링크 문제를 해결할 수 있다.
&lt;img src=&quot;http://assets.hibrainapps.net/images/var/albums/hbncloud/public/Screen_Shot%202015-05-06%20at%203_27_42%20PM.png?m=1430893686&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;모바일 앱을 개발하면서 외부 URL 링크를 사용하는 것은 아주 사소하지만 큰 문제를 일으키기도 한다. 외부에 URL을 사용하는 것은 URL이 변화지 않는다는 전제 조건을 가지고 만들어야하지만, 최근 서비스들은 쉽게 사라지거나 형태가 변형되기 때문에 외부 URL 주소를 프로그램 안에 정적으로 만들어두면 문제를 일으키게 된다. 이 글에서는 간단한 예제를 보여줬지만 실제 민감한 서비스의 경우 외부 URL링크 때문에 큰 문제를 가져올 수도 있다. 우리는 그래서 앱을 수정하지 않고 NginX의 rewrite 모듈을 사용하여 URL을 다시 작성하는 중간자를 만들었다. 앱은 NginX 중간자에게 외부 URL을 redirect_url 파라미터로 요청할 것이고 NginX는 앱에서 부터 요청 받은 URL을 외부 URL로 rewrite하도록 해 준다. 이렇게 NginX로 만든 중간자를 사용해서 외부 URL이 문제가 발생했을 때, 다른 URL로 바꾸어서 rewrite하여 앱에서 유효하지 못한 URL을 찾는 문제를 해결할 수 있을 것이다.&lt;/p&gt;

&lt;h2 id=&quot;연구원-소개&quot;&gt;연구원 소개&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;작성자 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;송성광&lt;/a&gt; 개발 연구원&lt;/li&gt;
&lt;li&gt;블로그 : &lt;a href=&quot;http://blog.saltfactory.net&quot;&gt;http://blog.saltfactory.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;이메일 : &lt;a href=&quot;mailto:saltfactory@gmail.com&quot;&gt;saltfactory@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;트위터 : &lt;a href=&quot;https://twitter.com/saltfactory&quot;&gt;@saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;페이스북 : &lt;a href=&quot;https://facebook.com/salthub&quot;&gt;https://facebook.com/salthub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;연구소 : &lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설연구소&lt;/li&gt;
&lt;li&gt;연구실 : &lt;a href=&quot;http://dblab.changwon.ac.kr&quot;&gt;창원대학교 데이터베이스 연구실&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 06 May 2015 00:00:00 +0900</pubDate>
        <link>/series/nginx/redirect-using-with-parameter-on-nginx.html</link>
        <guid isPermaLink="true">/series/nginx/redirect-using-with-parameter-on-nginx.html</guid>
        
        <category>nginx</category>
        
        <category>mobile</category>
        
        <category>rewrite</category>
        
        
        <category>nginx</category>
        
      </item>
    
      <item>
        <title>jekyll-img-converter 플러그인 제작 및 배포 (Markdown문서 이미지 사이즈 변환하기)</title>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/saltfactory/jekyll-img-converter&quot;&gt;jekyll-img-converter&lt;/a&gt;는 &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown&lt;/a&gt;의 이미지  문법(syntax)를 HTML으로 변환 시킬 때  이미지의 사이즈를 inline style로 추가해서 변환 시키는 &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;의 플러그인이다.
&amp;lt;!--more--&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;jekyll과-markdown&quot;&gt;Jekyll과 Markdown&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;은 정적 웹사이트를 제작할 수 있는 Ruby 기반 &lt;a href=&quot;http://en.wikipedia.org/wiki/Static_web_page&quot;&gt;static web page generator&lt;/a&gt; 프레임워크이다. 정적 웹 사이트는 동적 웹 사이트와 달리 데이터베이스가 필요하지 않고 호스트 비용을 절감하면서 빠르게 개발할 수 있기 때문에 개발자들 사이에서 큰 인기를 가지고 있는데 Jekyll은 정적 웹 사이트 생성도구 중에서 가장 많은 관심을 받고 있다. Jekyll을 사용하면 &lt;a href=&quot;https://pages.github.com&quot;&gt;Github Pages&lt;/a&gt;에 쉽게 개인 웹 사이트 및 블로그를 생성할 수 있기 때문에 Jekyll의 인기는 더욱 높아지고 있다. 웹 사이트를 만들기 위해서는 웹 서버가 필요한데 Github pages를 이용해서 Github의 서버로 비용없이 개인 웹 페이지를 만들 수 있기 때문이다. 보다 자세한 내용은 &lt;a href=&quot;http://blog.saltfactory.net/256&quot;&gt;Jekyll을 사용하여 GitHub Pages 만들기&lt;/a&gt; 글을 참조하면 된다. Jekyll의 또 다른 인기는 &lt;strong&gt;Markdown&lt;/strong&gt;으로 생성한 문서를 웹 페이지로 자동으로 만들어주기 때문이다. Markdown은 문서를 제작하는데 집중할 수 있게 쉽게 문서를 제작할 수 있고 제작된 문서는 다양한 포멧으로 변경되거나 스타일을 적용할 수 있기 때문에 연구자나 개발자들에게 큰 인기를 갖게 되었다. &lt;strong&gt;Jekyll&lt;/strong&gt;의 장점은 이미 많은 개발자들이 사용하고 있기 때문에 다양한 개발자들이 Jekyll을 사용하면서 필요한 &lt;strong&gt;플러그인&lt;/strong&gt;을 개발하여 공개하고 Jekyll은 쉽게 플러그인을 설치하여 Jekyll의 기능을 확장시킬 수 있다. &lt;a href=&quot;http://jekyllrb.com/docs/plugins/&quot;&gt;Jekyll Plugins&lt;/a&gt;에서 Jekyll의 플러그인을 만드는 방법과 이미 만들어져있는 플러그인들의 목록을 살펴볼 수 있다. 뿐만 아니라 Github에서 Jekyll에 관련된 플러그인들을 많이 찾아볼 수 있고 Ruby의 패키지 관리 툴인 &lt;a href=&quot;https://rubygems.org&quot;&gt;gem&lt;/a&gt;을 사용해서 쉽게 플러그인을 설치할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;markdown-syntax&quot;&gt;Markdown Syntax&lt;/h2&gt;

&lt;p&gt;Markdown의 문법은 문서를 작성하는데 집중하기 위해서 스타일을 적용하는 문법이 없이 간단한 표기법을 사용한다. &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown의 Syntax&lt;/a&gt;에 관련된 글을 살펴보면 스타일에 관련된 내용이 없다는 것을 확인할 수 있을 것이다. 하지만 &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax#html&quot;&gt;inline HTML&lt;/a&gt;을 사용할 수 있기도 하다. 우리는 Markdown을 가지고 문서를 작성하고 이것을 Jekyll을 사용해서 정적 웹 사이트를 제작한다고 생각해보자. Markdown에서 이미지를 삽입하기 위해서는 다음과 같은 문법을 사용한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;![이미지alt](./images/test.png &amp;quot;이미지title&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 Markdown 문법으로 삽입된 이미지는 HTML 문서에서 다음과 같이 변환이 된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;./images/test.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;이미지alt&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;이미지title&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 예제를 보면 Markdown 문법에서는 이미지의 사이즈를 지정하는 곳이 없다. Markdown 변환기 중에서는 Markdown의 문법을 확장시켜서 이미지 사이즈를 지정하거나 문법에 스타일을 지정할 수 있도록 지원하는 변환기도 있지만 이것은 Markdown 변환기를 다르게 사용하면 Markdown의 syntax 오류가 발생해버린다. 우리는 그래서 Markdown의 문법을 손상시키지 않는 방법에서 이미지의 사이즈를 변경하거나 스타일을 적용하는 방법을 연구했다. 우리는 이미 Node.js를 이용한 &lt;a href=&quot;https://github.com/saltfactory/mark2html&quot;&gt;mark2html&lt;/a&gt; 변환기를 만들었는데 &lt;strong&gt;0.0.4&lt;/strong&gt; 업데이트에 Markdown에 포함된 이미지의 사이즈를 지정하는 방법을 제공했다. &lt;strong&gt;mark2html&lt;/strong&gt;를 이용하는 방법은 &lt;a href=&quot;http://blog.saltfactory.net/253&quot;&gt;Markdown으로 HTML 변환시 이미지 IMG 사이즈 지정하기&lt;/a&gt; 글을 참조하면 된다.&lt;/p&gt;

&lt;p&gt;원리는 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Markdown 표준 문법인 &lt;strong&gt;ALT&lt;/strong&gt; 속성을 만든는 표기법 안에 &lt;strong&gt;inline style&lt;/strong&gt;을 지정하고 Markdown에서 HTML을 변환할 때, ALT에 포함된 inline style을 HTML의 &lt;strong&gt;IMG&lt;/strong&gt; 태그의 &lt;strong&gt;style&lt;/strong&gt; 속성으로  지정하는 거싱다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이와 같은 방법으로 처리하기 위해서는 Markdown을 HTML으로 변환하는 메소드 중에 IMG 태그를 변환하는 메소드를 &lt;strong&gt;Override&lt;/strong&gt; 해야한다. Node.js로 위 방법을 구현할 때는 &lt;a href=&quot;https://github.com/chjj/marked&quot;&gt;marked&lt;/a&gt; 변환기를 사용하여 처리했다. 동일한 방법으로 Jekyll의 Markdown 변환기를 Override 하면 가능할 것 같다는 생각을 가지고 Jekyll Plugin을 만들기로 했다.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-plugin-제작&quot;&gt;Jekyll Plugin 제작&lt;/h2&gt;

&lt;p&gt;Jekyll은 공식으로 플러그인을 만들 수 있는 &lt;a href=&quot;http://jekyllrb.com/docs/plugins/#generators&quot;&gt;Generator&lt;/a&gt;, &lt;a href=&quot;http://jekyllrb.com/docs/plugins/#converters&quot;&gt;Conveter&lt;/a&gt;, &lt;a href=&quot;http://jekyllrb.com/docs/plugins/#command&quot;&gt;Command&lt;/a&gt;, &lt;a href=&quot;http://jekyllrb.com/docs/plugins/#tags&quot;&gt;Tags&lt;/a&gt; 그리고 &lt;a href=&quot;http://jekyllrb.com/docs/plugins/#liquid-filters&quot;&gt;Filters&lt;/a&gt; 모듈을 만들어 두었다. &lt;strong&gt;jekyll-img-converter&lt;/strong&gt;에서 사용한 모듈은 &lt;strong&gt;Converter&lt;/strong&gt;이다. 다른 모듈에 대한 설명은 앞으로 기회가 있을 때 다시 소개하고 Converter를 이용해서 플러그인을 제작하는 방법을 소개한다.&lt;/p&gt;

&lt;p&gt;우리는 Jekyll 프로젝트와 달리 모듈을 만들고 테스트를 하는 방법을 가지고 싶었다. 그래서 우리는 &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;, &lt;a href=&quot;https://rubygems.org&quot;&gt;gem&lt;/a&gt; 그리고 &lt;a href=&quot;http://ruby-doc.org/core-1.9.3/doc/rake/rakefile_rdoc.html&quot;&gt;Rakefile&lt;/a&gt;를 사용하여 플로그인을 개발하는 환경을 만들었다.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-img-converter.gemspec&quot;&gt;jekyll-img-converter.gemspec&lt;/h3&gt;

&lt;p&gt;우선 우리는  &lt;strong&gt;jekyll-img-converter&lt;/strong&gt;를 &lt;strong&gt;gem&lt;/strong&gt;을 상요해서 배포할 것이기 때문에 &lt;code&gt;.gemspec&lt;/code&gt; 파일을 생성하였다. 이 파일에 포함된 내용은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt; : 플러그인 이름&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt; : 플러그인의 간략한 내용&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;description&lt;/strong&gt; : 플러그인의 설명&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;version&lt;/strong&gt; : 플러그인의 버전, 이 버전에 따라서 나중에 &lt;strong&gt;gem&lt;/strong&gt; 버전 파일이 생성이 된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;authors&lt;/strong&gt; : 개발자&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;email&lt;/strong&gt; : 개발자 이메일&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;homepage&lt;/strong&gt; : 플러그인 사이트&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;license&lt;/strong&gt; : 라이센스&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;files&lt;/strong&gt; : &lt;strong&gt;gem&lt;/strong&gt;을 사용하여 배포할 파일을 지정&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;add_dependency&lt;/strong&gt; : 플러그인이 설치되었을 때 필요한 모듈의 의존성을 지정&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;add_development_dependency&lt;/strong&gt; : 플러그인을 개발할 때 필요한 모듈을 지정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Specification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;jekyll-img-converter&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Jekyll IMG tag conveter in markdown using with Redcarpet&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;jekyll-img-converter is support to convert IMG tag with inline style from markdown using with Redcarpet&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0.1.5&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authors&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;SungKwang Song&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;saltfactory@gmail.com&amp;quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;homepage&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://github.com/saltfactory/jekyll-img-converter&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;licenses&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;MIT&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;lib/jekyll-img-converter.rb&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_dependency&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;jekyll&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;~&amp;gt; 2.0&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_development_dependency&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;html-pipeline&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;~&amp;gt; 1.9&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_development_dependency&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;&amp;#39;rake&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;~&amp;gt; 10.3&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_development_dependency&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;&amp;#39;rdoc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;~&amp;gt; 4.1&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_development_dependency&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;&amp;#39;shoulda&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;~&amp;gt; 3.5&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_development_dependency&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;&amp;#39;minitest&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;~&amp;gt; 5.4&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_development_dependency&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;&amp;#39;redcarpet&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;~&amp;gt; 3.2&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;gemfile&quot;&gt;Gemfile&lt;/h3&gt;

&lt;p&gt;Ruby로 프로젝트를 진행할 때 필요한 라이브러리를 기술하고 다운받아서 사용하기 위해서 &lt;code&gt;Gemfile&lt;/code&gt;을 작성하고 &lt;strong&gt;gem&lt;/strong&gt; 으로 설치를 한다. 이것은 Node.js의 &lt;code&gt;package.json&lt;/code&gt;을 기술해서 사용하는 원리와 비슷하다. 우리는 &lt;code&gt;.gemspec&lt;/code&gt; 파일에 이미 필요한 라이브러리를 지정했기 때문에 &lt;code&gt;Gemfile&lt;/code&gt;에서는 &lt;strong&gt;gemspec&lt;/strong&gt;을 참조하라고 기술 하면 된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;source &amp;quot;https://rubygems.org&amp;quot;

gemspec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;을 생성하면 &lt;code&gt;bundle install&lt;/code&gt; 명령을 사용하여 필요한 라이브러리를 모두 다운 받아 설치할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;jekyll-img-converter.rb&quot;&gt;jekyll-img-converter.rb&lt;/h3&gt;

&lt;p&gt;필요한 라이브러리르 모두 다운받아서 설치하면 플러그인을 개발할 준비를 모두 마친것이다. 우리는 &lt;strong&gt;Jekyll&lt;/strong&gt;의 플러그인 모듈 중에서 &lt;strong&gt;Converter&lt;/strong&gt; 클래스를  상속받아서 사용할 것이다.&lt;/p&gt;

&lt;p&gt;가장 먼저 해야할 일은 &lt;strong&gt;Converter&lt;/strong&gt; 클래스를 상속 받는 것이다. Jekyll에서 제공하는 Converter 플러그인을 만들기 위해서는 Converter 클래스의 다음 메소드를 오버라이드하여 사용해야한다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;matches()&lt;/strong&gt; : Jekyll에서 해당되는 확장자의 파일에만 적용할 수 있게 확장자를 매칭하는 메소드이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;output_ext()&lt;/strong&gt; : 플러그인이 모두 동작하고 결과물을 만들 때의 확장자를 지정하는 메소드이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;convert()&lt;/strong&gt; : &lt;strong&gt;Converter&lt;/strong&gt; 클래스가 가지는 가장 중요한 메소드로 convert를 실행하는 메소드이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Markdown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Converter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;output_ext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 우리는 &lt;strong&gt;Jekyll 2.0&lt;/strong&gt; 이상부터 &lt;a href=&quot;https://github.com/vmg/redcarpet&quot;&gt;Redcarpt&lt;/a&gt;이라는 Markdown parser를 사용하는 것을 Jekyll 소스코드로부터 확인했다. 우리는 Jekyll이 Markdown을 HTML으로 변환할 때 사용하는 &lt;a href=&quot;https://github.com/jekyll/jekyll/blob/master/lib/jekyll/converters/markdown/redcarpet_parser.rb&quot;&gt;RedcarpetParser&lt;/a&gt;의 &lt;code&gt;CommonMethods&lt;/code&gt; 모듈에 IMG를 변환하는 메소드를 Override 할 것이다. 아래 코드는 &lt;strong&gt;Jekyll&lt;/strong&gt;의 &lt;strong&gt;RedcarpetParser&lt;/strong&gt;의 &lt;code&gt;CommonMethods&lt;/code&gt; 모듈이 &lt;a href=&quot;http://ruby-doc.com/docs/ProgrammingRuby/html/tut_modules.html&quot;&gt;Mixins&lt;/a&gt;하여 사용하는 것에 &lt;code&gt;image()&lt;/code&gt; 메소드를 추가했다. 이제 Markdown의 문법 중에 이미지 문법을 변환할 때 우리가 Override 한 &lt;code&gt;image()&lt;/code&gt; 메소드를 실행 할 것이다. 우리가 오버라이드한 &lt;code&gt;image()&lt;/code&gt; 메소드는 Markdown의 &lt;strong&gt;ALT&lt;/strong&gt; attribute에서 &lt;code&gt;{}&lt;/code&gt;에 정의한 &lt;strong&gt;inline style&lt;/strong&gt;을 정규 표현식으로 얻어서 HTML으로 변환할 때 &lt;strong&gt;style&lt;/strong&gt; 속성에 값을 지정하게 된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jekyll&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Converters&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Markdown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Converter&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedcarpetParser&lt;/span&gt;

          &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CommonMethods&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/({)(.+)(})/&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;matchData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

              &lt;span class=&quot;n&quot;&gt;imgTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;img src=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;

              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matchData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;stripContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matchData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rstrip&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;imgTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; alt=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stripContent&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; style=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;imgTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; alt=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;imgTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; title=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

              &lt;span class=&quot;n&quot;&gt;imgTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;gt;&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;jekyll-plugin-테스트&quot;&gt;Jekyll Plugin 테스트&lt;/h3&gt;

&lt;p&gt;위에서  만든 &lt;strong&gt;Jekyll&lt;/strong&gt;의 플러그인 &lt;strong&gt;jekyll-img-converter&lt;/strong&gt;를 테스트해보자. 테스트는 &lt;strong&gt;Rakefile&lt;/strong&gt;을 사용해서 진행할 것이다. &lt;strong&gt;Rakefile&lt;/strong&gt;을 다음 코드로 생성한다. test는 &lt;code&gt;test&lt;/code&gt;라는 디렉토리 안에 &lt;code&gt;test_&lt;/code&gt;로 시작하는 파일을 &lt;strong&gt;Rake::TestTask&lt;/strong&gt;로 진행할 것이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bundler&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:development&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BundlerError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$stderr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$stderr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Run `bundle install` to install missing gems&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rake&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rake/testtask&amp;#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lib&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;test/**/test_*.rb&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Rakefile&lt;/strong&gt;을 생성하면 &lt;code&gt;test&lt;/code&gt; 디렉토리를 만들자.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;mkdir test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;테스트에 필요한 파일들을 로드하기 위해서 &lt;code&gt;help.rb&lt;/code&gt; 파일을 &lt;code&gt;test&lt;/code&gt; 디렉토리 안에 만든다. &lt;code&gt;help.rb&lt;/code&gt;의 내용은 다음과 같다. &lt;code&gt;jekyll-img-converter&lt;/code&gt;를 &lt;code&gt;require&lt;/code&gt; 할 수 있도록 지정을 한다. 그리고 우리는 임의의 Markdown 파일에 Markdown 문법을 사용하여 문서를 만들고 그 파일을 &lt;code&gt;textures&lt;/code&gt; 라는 디렉토리에 저장하고 이것을 나중에 불러 사용할 것이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;minitest/autorun&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;shoulda&amp;#39;&lt;/span&gt;


&lt;span class=&quot;vg&quot;&gt;$LOAD_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-img-converter&amp;#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;TEST_DIR&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;../&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;FIXTURES_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;fixtures&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TEST_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;DEST_DIR&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;destination&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TEST_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ImgConverterTestHelpers&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fixture_site&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deep_merge_hashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DEFAULTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;source&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FIXTURES_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;destination&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DEST_DIR&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;마지막으로 &lt;strong&gt;jekyll-img-converter&lt;/strong&gt; 플러그인을 테스트할 테스트 파일을 만든다. 우리는 위에서 &lt;code&gt;test_&lt;/code&gt; 시작하는 파일을 찾아서 테스트할 것이라고 정의했기 때문에 파일 이름을 &lt;code&gt;test_jekyll-img-converter.rb&lt;/code&gt;으로 만든다. 테스트 파일은 위에서 만든 &lt;code&gt;help.rb&lt;/code&gt;를 require 한다. 그리고 &lt;a href=&quot;https://github.com/seattlerb/minitest&quot;&gt;Minitest&lt;/a&gt;로 테스트를 할 것이다. 우리는 &lt;code&gt;help.rb&lt;/code&gt;에서 만든 &lt;code&gt;ImgConverterTestHelper&lt;/code&gt;를 Minix한다. 실제 &lt;strong&gt;Jekyll&lt;/strong&gt; 프로젝트에서 설정을 하는 &lt;code&gt;_config.yml&lt;/code&gt; 파일에 &lt;code&gt;markdown&lt;/code&gt;을 &lt;code&gt;redcarpet&lt;/code&gt;으로 정의하고 &lt;code&gt;extentions&lt;/code&gt;을 정의 했다고 가정하기 위해서 우리는 강제로 &lt;code&gt;@config&lt;/code&gt;를 만들어서 &lt;code&gt;Jekyll::Converters::Markdown&lt;/code&gt;을 생성할 때 적용하도록 했다. 테스트는 &lt;code&gt;should&lt;/code&gt;에서 진행한다. 우리가 만든 플러그인이 적용되어 동작하는지 알아보기 위해서 &lt;code&gt;assert_equal&lt;/code&gt;를 사용해서 markdown이 HTML으로 변환이 된 결과와 동일한지 테스트를 진행했다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;helper&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestImgConverter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ImgConverterTestHelpers&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@site&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fixture_site&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;redcarpet&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;extensions&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;no_intra_emphasis&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;fenced_code_blocks&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;autolink&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;strikethrough&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;superscript&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;with_toc_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;tables&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;markdown&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;redcarpet&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@markdown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Converters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Markdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@config&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;convert content&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;p&amp;gt;&amp;lt;img src=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./images/test.png&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; alt=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test_alt&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; style=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;max-width:300px;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; title=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test_title&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@markdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;![test_alt {max-width:300px;}](./images/test.png &amp;quot;test_title&amp;quot;)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우리가 만든 플러그인은 &lt;strong&gt;Redcarpet&lt;/strong&gt;의 &lt;code&gt;convert()&lt;/code&gt;메소드가 실행할 때  오버라이드된 &lt;code&gt;image()&lt;/code&gt;를 상용하게 할 것이다. 테스트는 &lt;code&gt;rake&lt;/code&gt;를 사용한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;rake test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;테스트한 결과는 다음과 같이 나타난다. 1 run과  1 assertions이 통과했다. 만약 오류가 생기면 failures나 error 의 값이 변경 될 것이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/Users/saltfactory/.rvm/rubies/ruby-2.1.1/bin/ruby -I&amp;quot;lib:lib:test&amp;quot; -I&amp;quot;/Users/saltfactory/.rvm/gems/ruby-2.1.1/gems/rake-10.3.2/lib&amp;quot; &amp;quot;/Users/saltfactory/.rvm/gems/ruby-2.1.1/gems/rake-10.3.2/lib/rake/rake_test_loader.rb&amp;quot; &amp;quot;test/**/test_*.rb&amp;quot;
Run options: --seed 6638

# Running:
.

Finished in 0.024375s, 41.0256 runs/s, 41.0256 assertions/s.

1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;gem-배포&quot;&gt;gem 배포&lt;/h3&gt;

&lt;p&gt;마지막으로 우리는 &lt;strong&gt;gem&lt;/strong&gt;을 사용해서 설치할 수 있도록 gem 파일을 만들어서 배포할 것이다. 우선 &lt;a href=&quot;http://rubygems.org&quot;&gt;http://rubygems.org&lt;/a&gt; 에 계정을 만든다. &lt;strong&gt;rubygems&lt;/strong&gt;의 계정을 생성한 다음 로컬에서 &lt;code&gt;gem&lt;/code&gt; 파일을 만든다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;gem build jekyll-img-converter.gemspec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gem 파일이 이상없이 만들어지면 다음과 같은 결과가 나타난다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Successfully built RubyGem
Name: jekyll-img-converter
Version: 0.1.5
File: jekyll-img-converter-0.1.5.gem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우리는 위에서 &lt;code&gt;jekyll-img-converter.gemspec&lt;/code&gt; 파일에  &lt;strong&gt;0.1.5&lt;/strong&gt; 버전을 정의했기 때문에 &lt;code&gt;gem&lt;/code&gt; 파일은 &lt;strong&gt;jekyll-img-converter-0.1.5.gem&lt;/strong&gt; 파일로 만들어질 것이다. 이렇게 만든 &lt;code&gt;gem&lt;/code&gt; 파일을 &lt;code&gt;rubygems&lt;/code&gt;의 리파지토리에 push 한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;push jekyll-img-conveter-0.1.5.gem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 push가 완려되면 다음과 같은 결과가 나타난다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Pushing gem to https://rubygems.org...
Successfully registered gem: jekyll-img-converter (0.1.5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;jekyll에-jekyll-img-converter-플러그인-설치&quot;&gt;Jekyll에 jekyll-img-converter 플러그인 설치&lt;/h3&gt;

&lt;p&gt;위에서 우리는 만든 &lt;strong&gt;jekyll-img-conveter&lt;/strong&gt;는 이제 &lt;strong&gt;gem&lt;/strong&gt;을 이용하여 설치할 수 있다. &lt;strong&gt;Jekyll&lt;/strong&gt; 프로젝트의 &lt;code&gt;Gemfile&lt;/code&gt;을 열어서 다음을 추가한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://rubygems.org&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2.4.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;kramdown&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1.3.1&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-coffeescript&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1.0.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-sass-converter&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1.2.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;liquid&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2.6.1&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;maruku&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.7.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rdiscount&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2.1.7&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;redcarpet&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;3.1.2&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;RedCloth&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;4.2.9&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pygments.rb&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.6.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jemoji&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.3.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-mentions&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.1.3&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-sitemap&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.6.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;github-pages&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;28&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-redirect-from&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.6.2&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-img-converter&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.1.5&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 &lt;code&gt;bundle&lt;/code&gt;을 이용해서 필요한 라이브러리들을 &lt;strong&gt;gem&lt;/strong&gt;을 이용해서 설치한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 우리가 만든 plugin을 &lt;strong&gt;Jekyll&lt;/strong&gt;에서 사용할 수 있도록 &lt;code&gt;_config.yml&lt;/code&gt;에 지정한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;... 생략 ....

gems:
  - jekyll-redirect-from
  - jemoji
  - jekyll-img-converter

... 생략 ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;마지막으로 &lt;strong&gt;Jekyll&lt;/strong&gt; 서버를 재시작해서 우리가 설치한 플러그인이 잘 적용되었는지 살펴본다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;jekyll serve --watch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;은 Markdown을 사용해서 정적 웹 사이트를 만들 수 있는 static web page generator 프레임워크이다. Jekyll을 사용하면 개인 웹 서버나 고가의 데이터베이스 없이 &lt;strong&gt;Github Pages&lt;/strong&gt;를 이용해서 개인 웹 사이트나 블로그를 쉽게 구축할 수 있다. Markdown은 문서 제작를 간편하고 빠르게 제작할 수 있게 스타일을 지정하지 않는다. 하지만 웹 사이트를 만들다보면 이미지 사이즈를 조정하는 경우가 많다. Markdown의 기본 문법에서는 IMG 태그에 스타일을 지정할 수 없기 때문에 우리는 Jekyll의 &lt;strong&gt;Redcarpet&lt;/strong&gt;이라는 Markdown 변환기에서 IMG 태그를 변환하는 메소드를 오버라이드하여 Jekyll 플러그인 &lt;strong&gt;jekyll-img-converter&lt;/strong&gt;를 제작하게 되었다. jekyll은 &lt;strong&gt;Ruby&lt;/strong&gt; 기반으로 만들어졌기 때문에 우리는 &lt;strong&gt;Rakefile&lt;/strong&gt;을 이용해서 플러그인을 만들고 테스트를 진행했다. 우리는 우리가 만든 플러그인을 &lt;strong&gt;gem&lt;/strong&gt;을 사용해서 설치할 수 있게 &lt;strong&gt;rubygems&lt;/strong&gt;에 우리가 만든 플러그인을 등록해서 배포했고 이 모든 과정을 이 포스트에서 소개 했다. Ruby는 Minxin이라는 기능을 가지고 있고 모든 클래스 기반 언어처럼 상속과 오버라이드를 지원한다. 우리는 이 개념을 잘 사용하여 Markdown의 문법을 해치지 않고 이미지 문법의 ALT 속성에 &lt;strong&gt;inline style&lt;/strong&gt;을 지정하여 IMG 태그를 분석할 때 오버라이드한 메소드가 이를 분석해서 IMG 태그에 &lt;strong&gt;style&lt;/strong&gt; 속성에 inline style을 적용하도록 했다. 이 포스트를 참조해서 앞으로 더욱 많은 Jekyll의 플러그인이 제작되길 기대해본다.&lt;/p&gt;

&lt;h1 id=&quot;연구원-소개&quot;&gt;연구원 소개&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;작성자 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;송성광&lt;/a&gt; 개발 연구원&lt;/li&gt;
&lt;li&gt;블로그 : &lt;a href=&quot;http://blog.saltfactory.net&quot;&gt;http://blog.saltfactory.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;프로필 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;http://about.me/saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;이메일 : &lt;a href=&quot;mailto:saltfactory@gmail.com&quot;&gt;saltfactory@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;트위터 : &lt;a href=&quot;https://twitter.com/saltfactory&quot;&gt;@saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;페이스북 : &lt;a href=&quot;https://facebook.com/salthub&quot;&gt;https://facebook.com/salthub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;연구소 : &lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설연구소&lt;/li&gt;
&lt;li&gt;연구실 : &lt;a href=&quot;http://dblab.changwon.ac.kr&quot;&gt;창원대학교 데이터베이스 연구실&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 12 Nov 2014 00:00:00 +0900</pubDate>
        <link>/series/jekyll/introduce-jekyll-img-converter.html</link>
        <guid isPermaLink="true">/series/jekyll/introduce-jekyll-img-converter.html</guid>
        
        <category>jekyll</category>
        
        <category>ruby</category>
        
        <category>markdown</category>
        
        <category>plugin</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Ionic을 이용한 iOS, Android 하이브리드 앱 개발 사례</title>
        <description>&lt;h1 id=&quot;하이브리드-앱-개발과-배포&quot;&gt;하이브리드 앱 개발과 배포&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설 연구소&lt;/strong&gt;에서는 모바일 서비스를 위해 아이폰과 안드로이드 앱을 개발해서 배포하고 있었다. 우리는 아이폰 사용자와 안드로이드 사용자를 위해서 두가지 플랫폼을 개발해야 했다. 안드로이드와 아이폰은 버전과 디바이스의 파편화 때문에 많은 비용을 투자해서 예외처리를 해야했다. 제한된 개발 인력으로 두가지 디바이스를 개발해야하는 복잡한 프로세스를 개선하기 위해서 우리는 &lt;strong&gt;하이브리드 앱&lt;/strong&gt; 개발 방법을 도입하기로 결정했다. 최근 우리는 하이브리드 앱 개발 기술을 사용하여  &amp;quot;하이브레인넷 앱(ver. 2.3)&amp;quot;을 &lt;a href=&quot;https://itunes.apple.com/kr/app/haibeuleinnes/id438616285?mt=8&quot;&gt;앱스토어&lt;/a&gt;와 &lt;a href=&quot;https://play.google.com/store/apps/details?id=net.hibrain.apps.android.hibrainnet&quot;&gt;구글 플레이&lt;/a&gt;를 통해 배포했다. 우리는 하이브리드 앱을 개발하여 제품으로 배포한 과정을 블로그로 공개한다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;개발-배경&quot;&gt;개발 배경&lt;/h2&gt;

&lt;p&gt;우리는 &lt;strong&gt;하이브리드 앱&lt;/strong&gt;을 도입하기 위해  2013년부터 &lt;strong&gt;HTML5&lt;/strong&gt;과 &lt;strong&gt;하이브리드 앱&lt;/strong&gt; 기술에 관련된 컨퍼런스와 세미나를 참석했다. KTH에서는 웹 기술을 사용하여 모바일 앱을 개발하는 기술을 &lt;strong&gt;H3&lt;/strong&gt; 컨퍼런스와 크고 작은 세미나를 통해서 공개했다. KTH의 &lt;strong&gt;Pudding 카메라&lt;/strong&gt;가 하이브리드 앱으로 개발되어 많은 인기를 얻으면서 사람들은 웹 기술로 앱을 만들 수 있다는 것을 알게 되었고 이후 점점 웹 기술을 가지고 앱을 만드는 것에 관심을 갖게 되었다. 하이브리드 앱을 처음 도입하게 된 계기는 KTH의 &lt;strong&gt;Appsresso&lt;/strong&gt; 라는 하이브리드 앱 개발 플랫폼 때문이였다. 지금은 공식 페이지도 찾아볼 수 없는 사라진 프로젝트이지만 핵심 소스는 &lt;a href=&quot;https://github.com/kthcorp/Appspresso-SDK&quot;&gt;GitHub&lt;/a&gt;에 공개되어 있다. (개인적으로 국내 소프트웨어로 가장 비전이 있어보이는 프로젝트였는데 중단되어서 너무 아쉬워하고 있다.). Appspresso는 하이브리드 앱을 개발하는 개발 장벽을 낮추는데 큰 영향을 주었다. Appspresso는 HTML5 기반의 웹 자원과 Plugin 형태로 네이티브 자원을 사용할 수 있는 메카니즘을 하나의 IDE에서 개발 할 수 있는 환경을 제공해 주었다. 이렇게 웹 자원이 네이티브 자원을 사용하는 플러그인 방법은 지금까지 &lt;a href=&quot;http://phonegap.com&quot;&gt;PhoneGap&lt;/a&gt;을 포함한 다른 하이브리드 앱 프레임워크의 대표적인 방법으로 제시되고 있다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;우리는 아이폰을 위한 앱을 먼저 개발하고 배포한 뒤 안드로이드 앱을 개발해서 배포하는 프로세스였다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;우리는 기존의 아이폰 앱과 안드로이드 앱을 네이티브로 각각 개발하고 있었다. 대형 포털회사와 달리 개발인력이 많지 않은 우리는 두가지 플랫폼을 개발하는데 어려움을 겪고 있었다. 이유는 간단히 아이폰의 에코 시스템이 편리했고 아이폰 개발이 익숙했기 때문에 아이폰용 앱을 먼저 개발한 것이다. 하지만 안드로이드 사용자가 급격하게 많아지면서 안드로이드 앱에서 발생하는 이슈들이 많아지기 시작했다. 우리는 익숙한 아이폰 개발 환경을 뒤로하고 안드로이드 앱 개발에 집중하기 시작했다. 안드로이드의 SDK에 대처하면서 일정 시간이 지나면 우리는 또 새로워진 iOS를 대처해야했다. 이 과정은 서로 반복되는 힘든 과정이였다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;우리는 아이폰과 안드로이드의 UI를 통합하고 싶었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;우리는 아이폰과 안드로이드 앱을 두가지 다른 사용자 경험을 기반으로 개발을 했었다. 아이폰에서는 &lt;strong&gt;Tab&lt;/strong&gt; 기반의 인터페이스를 제공했지만, 안드로이드 사용자는 &lt;strong&gt;Tab&lt;/strong&gt; 메뉴 사용이 익숙하지 않고 물리 버튼을 사용하기 때문에 &lt;strong&gt;Slide Out&lt;/strong&gt; 메뉴를 제공했다. 우리가 가장 먼저 고민한 것은 바로 UI모듈 통합이였다. 우리의 서비스를 각각 플랫폼에 전달되는 내용은 동일하고 아이폰 사용자가 안드로이드 폰으로 이동하거나 안드로이드 사용자가 아이폰으로 이동하더라도 동일한 UI를 제공하여 혼란을 줄이고 싶었다. 하지만 안드로이드와 아이폰은 사용자 경험이 다르기 때문에 이러한 이슈도 커버하길 원했다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;플러그인 형태로 모듈을 만들고 싶었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;기존의 우리의 앱의 핵심 코어는 크게 &lt;strong&gt;UI 모듈&lt;/strong&gt;, &lt;strong&gt;네트워크 모듈&lt;/strong&gt;,  &lt;strong&gt;저장 모듈&lt;/strong&gt; 그리고 &lt;strong&gt;공유 모듈&lt;/strong&gt;을 만들어서 사용했는데 아이폰은 &lt;strong&gt;Objectvie-C&lt;/strong&gt; 코드였고 안드로이드는 &lt;strong&gt;Java&lt;/strong&gt;로 만들어졌다. 각각 모듈은 프로젝트에 의존적이여서 다른 프로젝트에 사용하기 힘든 문제가 있었다. 우리는 메인 앱을 개발한 이후 여러가지 다른 앱을 개발하기 시작했는데 기존에 사용하던 모듈을 재사용하고 싶어졌다. 그래서 우리는 모듈 프로젝트를 만들어서 가각 모듈을 분리하기 시작했는데 좀 더 효율적으로 사용할 수 있는 방법을 찾고 있었다.&lt;/p&gt;

&lt;p&gt;정리하면 우리의 요구사항은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;아이폰과 안드로이드 폰 개발과 업데이트를 동시에 진행하고 싶다.&lt;/li&gt;
&lt;li&gt;UI를 통합하여 단일 코드로 작성하고 싶다.&lt;/li&gt;
&lt;li&gt;모듈은 플러그인 형태로 개발해서 재사용하고 싶다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;우리의 요구사항은 하이브리드 특징에 모두 포함되어 있다는 것을 여러 컨퍼런스와 세미나를 통해서 알게되었고 구체적인 자료 수집과 개발 환경을 만들기 시작했다.&lt;/p&gt;

&lt;h2 id=&quot;하이브리드-개발-환경&quot;&gt;하이브리드 개발 환경&lt;/h2&gt;

&lt;p&gt;우리는 처음 Appspresso 기반으로 하이브리드 앱을 만들려고 했지만 실제 개발에 들어가기 전에 Appspresso 프로젝트는 중단이 되어서 더이상 업데이트가 진행되고 있지 않았다. 우리는 다른 하이브리드 앱 개발 환경을 조사하기 시작했다. 우리가 개발 방법을 변경할 때, 우리는 이미 back-end와 front-end 개발 플랫폼을 Node.js로 마이그레이션하는 작업을 진행하고 있었다. &lt;strong&gt;PhoneGap&lt;/strong&gt;은 &lt;strong&gt;Node.js&lt;/strong&gt; 플랫폼으로 개발 할 수 있는 환경을 제공해주기 때문에 우리는 많은 부분을 고민하지 않고 PhoneGap을 하이브리드 개발 프레임워크로 도입하게 되었다.&lt;/p&gt;

&lt;p&gt;우리가 생각하던 UI 프레임워크의 요구 사항은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; SPA (Single Page Application)으로 만들고 싶다.&lt;/li&gt;
&lt;li&gt;Templates(Partial Page)를 사용하고 싶다.&lt;/li&gt;
&lt;li&gt;MVC 패턴으로 개발하고 싶다.&lt;/li&gt;
&lt;li&gt;Two-Way Bind를 지원하는 프레임워크를 찾는다.&lt;/li&gt;
&lt;li&gt;네이티브에 최적화된 UI를 내장하고 있으면 좋겠다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;처음에는 &lt;a href=&quot;http://www.sencha.com/products/touch/&quot;&gt;Sencha Touch&lt;/a&gt;, &lt;a href=&quot;http://jquerymobile.com/&quot;&gt;jQuery Mobile&lt;/a&gt; 두가지를 가지고 고민을 했었다. Sencha Touch는 라이브러리가 풍부하고 UI가 네이티브에 가깝고 안정성이 높았지만, 실제 디바이스에 올렸을때 무겁고 퍼포먼스가 생각했던 것 보다 좋게 나오지 못했다. jQuery Mobile은 수만은 jQuery 라이브러리를 사용할 수 있는 장점이 있었지만 우리는 MVC 또는 MVVM 패턴으로 개발을 진행하고 싶었고 아직초기 단계의 라이브러리라 안정성도 좋지 못했었다. UI 프레임워크에 대해서 고민을 하고 있을 때, 우리는 HTML5 컨퍼런스에 참석하면서 &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;를 알게 되었고 AngularJS의 &lt;strong&gt;two-way bind&lt;/strong&gt;에 매료 되었다. 우리의 요구사항은  대부분 AngularJS로 해결할 수 있지만 CSS 개발자가 없기 때문에 AngularJS 기반으로 네이티브에 최적화된 UI를 내장하고 있는 프레임워크를 찾기 시작했다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;우리에게 Ionic Framework는 가장 우리의 요구 사항을 만족시켜주는 프레임워크였다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;우리는 &lt;a href=&quot;http://ionicframework.com/&quot;&gt;Ionic Framework&lt;/a&gt;를 찾을 수 있었다. Ionic은 다음과 같은 특징을 가진다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cordova(PhoneGap) 환경을 제공한다.&lt;/li&gt;
&lt;li&gt;Cordova(PhoneGap) 플러그인을 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;AngularJS 기반으로 SPA를  MVC나 MVVM 패턴으로 개발을 할 수 있다.&lt;/li&gt;
&lt;li&gt;네이티브에 가까운 UI 컴포넌트들을 제공한다.&lt;/li&gt;
&lt;li&gt;HTML5 어플리케이션을 빠른 시간으로 개발할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;우리는 최종적으로 Ionic을 선택했고 Ionic을 사용해서 하이브리드 앱 개발을 시작했다.&lt;/p&gt;

&lt;h2 id=&quot;ionic-framework&quot;&gt;Ionic Framework&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://ionicframework.com&quot;&gt;Ionic&lt;/a&gt;은 Advanced HTML5 Hybrid Mobile App Framework이다. HTML5로 어플리케이션을 만들기 전에 우리는 가정 먼저 고려한 것이 UI를 웹 자원으로 개발하지만 성능과 안정성을 높이는 것이였다. 처음 우리는 직접 JavaScript를 이용해서 만들어보려고 했지만 성능과 안정성을 검증할 수 없었기 때문에 이미 성능과 안정성이 보장되어 있는 Ionic을 사용하여 개발하기로 했다. Ionic 블로그에서 Ionic에 대해서 다음과 같이 소개하고 있다. &lt;a href=&quot;http://ionicframework.com/blog/where-does-the-ionic-framework-fit-in/&quot;&gt;Where does the ionic framework fit in&lt;/a&gt; Ionic의 궁극적인 목표는 하이브리드 앱으로 알려진, HTML5를 이용해 네이티브 앱을 더욱 쉽게 개발하기 위한 것이라고 소개하고 있다.&lt;/p&gt;

&lt;h3 id=&quot;ionic과-angularjs&quot;&gt;Ionic과 AngularJS&lt;/h3&gt;

&lt;p&gt;Ionic Framework는 AngularJS를 근간에 두고 만들어졌다. Ionic에서는 자신의 UI 컴포넌트들의 태그를 직접 만들어서 사용하기도 하는데 이 것은 AngularJS의 &lt;a href=&quot;https://docs.angularjs.org/guide/directive&quot;&gt;directives&lt;/a&gt;를 이용하여 만들어졌다. 이 것을 사용해서 Ionic은 UI 개발자에게 복잡한 CSS와 JavaScript를 나열하는 대신에 단순히 Ionic에서 정의한 Custom Element를 제공하여 개발자는 마치 Code Snippet과 같이 쉽게 사용할 수 있게 하였다.&lt;/p&gt;

&lt;p&gt;예를 들어 각 View가 전환되고 전환되는 View에 엑션과 NavigationBar를 구현하는 코드를 만든다고 생각해보자. 단순히 &lt;code&gt;html&lt;/code&gt; 파일을 하나 열어서 비어 있는 파일에 직접 코드를 작성한다면 쉽게 구현할 수 없을 뿐만 아니라 엄청난 코드 때문에 실제 서비스를 만들기 전에도 개발자는 지치고 말것이다. 하지만 Ionic에서는 이런 네비게이션이 가능한 뷰를 &lt;a href=&quot;http://ionicframework.com/docs/api/directive/ionNavView/&quot;&gt;ion-nav-view&lt;/a&gt; 로 정의를 하였고, 네비게이션이 일어난 뷰는 &lt;a href=&quot;http://ionicframework.com/docs/api/directive/ionNavBar/&quot;&gt;ion-nav-bar&lt;/a&gt;라를 네비게이션 바와 함께 사용하여 간단하게 구현할 수 있도록 도와준다. 실제 다음 코드로 네이게이션이 가능한 뷰의 레이아웃을 모두 만든 것이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ion-nav-bar&amp;gt;&amp;lt;/ion-nav-bar&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ion-nav-view&amp;gt;&amp;lt;/ion-nav-vew&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ion-nav-bar&lt;/code&gt;와 &lt;code&gt;ion-nav-view&lt;/code&gt;를 사용하면 자동으로 새로운 View를 요청하면 다음 네비게이션이 가능한 View가 열리고 상단에 뒤로가기 버튼과 새로운 타이틀을 가지는 View가 열리게 된다. 아래 그림은 우리가 구현한 네비게이션 뷰 중에서 한 부분이다. 우리는 &lt;strong&gt;뒤로가기&lt;/strong&gt; 버튼이 있는 네비게이션 바를 직접 구현하지 않았고 Ionic에서 제공하는 &lt;code&gt;ion-nav-bar&lt;/code&gt;와 &lt;code&gt;ion-nav-view&lt;/code&gt;를 사용했다. 자세한 사용법은 다음 포스팅에서 소개하려고 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cfile22.uf.tistory.com/image/262F10455459D34B2851B5&quot; alt=&quot;ion-nav-bar 예제 {width:320px}&quot;&gt;&lt;/p&gt;

&lt;p&gt;Ionic은 뷰의 네비게이션을 위해 다른 뷰로 이동하는 것을 SPA의 routing으로 한다. 즉 다시 말해서 새로운 뷰를 불러오는 것은 AngularJS의 templates로 만들어진 HTML 페이지를 AngularJS에서 routing으로 요청하여 불러오는 것이다. 아래는 Ionic의  slidemenu sample project의 Routing을 정의한 부분이다. Ionic의 AngularJS 기반의 이런 Routing은 완벽한 SPA 구현을 할 수 있게 도와준다. Ionic의 Routing을 사용하는 방법도 다음 포스팅에 자세히 소개하려고 한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$stateProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$urlRouterProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$stateProvider&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;app&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/app&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;abstract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;templates/menu.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;AppCtrl&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;app.browse&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/browse&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;menuContent&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;templates/browse.html&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;app.playlists&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/playlists&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;menuContent&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;templates/playlists.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;PlaylistsCtrl&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;app.single&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/playlists/:playlistId&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;menuContent&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;templates/playlist.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;PlaylistCtrl&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// if none of the above states are matched, use this as the fallback&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$urlRouterProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;otherwise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/app/playlists&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;ionic과-cordova&quot;&gt;Ionic과 Cordova&lt;/h3&gt;

&lt;p&gt;Ionic은 Cordova를 사용해서 여러가지 모바일 앱에 실행할 수 있는 빌드 시스템을 갖추었다. Ionic의 초기 버전에는 Cordova 명령어를 사용하여 프로젝트를 빌드하고 디바이스에 실행하였는데, Ionic은 ionic command를 자체적으로 만들었다. 사실 Ionic의 command는 Cordova의 command를 매핑하여 Cordova의 command를 확장하려고 하는 것 같다는 생각이 든다. Ionic은 Cordova를 기반으로 하기 때문에 cordova command를 사용한 경험이 있으면 대부분 같은 명령어로 사용할 수 있다. 예를 들어 프로젝트에 &lt;code&gt;ios&lt;/code&gt; 플랫폼을 추가한다고 가정하면 Ionic command는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ionic platform add ios
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 command는 Cordova의 command로  &lt;code&gt;ios&lt;/code&gt; 플랫폼을 추가하는 것과 동일하다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cordova platform add ios
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ionic로 프로젝트를 개발할 때 HTML, JavaScript, CSS 파일이 수정될 때마다 디바이스에 빌드해서 디버깅을 한다면 빌드시간이 길어서 코드를 업데이트하는데 굉장히 많은 시간이 소요될 것이다. Ionic은 하이브리드 앱을 개발하는 프레임워크이다. 네이티브 자원을 사용하지 않는 코드는 디바이스에 빌드하지 않고 로컬 컴퓨터에서 Safari나 Chrome 브라우저를 이용해서 개발한다. 이 때 Ionic 프로젝트를 디버깅할 수 있게 앱을 실행시켜주는 서버를 구동해서 개발한다. Cordova에서는 &lt;code&gt;cordova serve&lt;/code&gt;라는 명령어를 사용하여 프로젝트를 실행시키는데 이 때 웹 자원 소스가 업데이트 되면 이 명령어를 재시작해줘야한다. 하지만 &lt;code&gt;phonegap serve&lt;/code&gt;와 &lt;code&gt;ionic serve&lt;/code&gt; command를 이용하면 웹 자원이 수정될 때 수정된 파일을 반영해서 서버 재시작 없이 자동으로 업데이트 되기 때문에 이 명령어를 다시 실행시키지 않아도 된다. Ionic을 이용하여 개발을 진행하면 웹 자원의 디버깅을 가장 많이하는데, Safari나 Chrome의 &lt;strong&gt;Developer Tool&lt;/strong&gt;로 디버깅을 하면 된다. 아래 그림은 &lt;code&gt;ionic serve&lt;/code&gt;를 실행하고 &lt;strong&gt;Chrome  Developer Tool&lt;/strong&gt; 로 디버깅하는 화면이이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cfile5.uf.tistory.com/image/24440D3B5459D34B160AA5&quot; alt=&quot;chrome debugging {width:320px;}&quot;&gt;&lt;/p&gt;

&lt;p&gt;Ionic은 Cordova 기반의 장점을 사용할 수 있다. Cordova의 장점 중에 하나는 Plugins 이라고 생각한다. 하이브리드 앱을 개발하기 위해서는 단순하게 HTML, JavaScript, CSS 만으로는 디바이스를 제어할 수 없다. 그래서 Cordova는 네이티브 브릿지와 같은 Cordova Plugins를 제공하고 이 것을 이용하여 웹과 네이티브간의 통신을 가능하게 한다. 예를 들어 Push Notification 서비스를 앱에 구현하고 싶을 경우 Push Notification은 디바이스의 자원을 사용해야만 가능하다. PhoneGap에서는 &lt;a href=&quot;https://github.com/phonegap-build/PushPlugin&quot;&gt;PhoneGap Push Plugin&lt;/a&gt;을 이미 만들어 두었다. 이것을 사용하면 많은 시간을 단축하고 간단하게 Push Notification 기능을 하이브리드 앱에서 구현할 수 있다. 다음 포스팅에서 &lt;strong&gt;PushPlugin&lt;/strong&gt;을 어떻게 설정하고 사용하는지에 대한 글도 소개할 예정이다.&lt;/p&gt;

&lt;h3 id=&quot;ionic과-node.js&quot;&gt;Ionic과 Node.js&lt;/h3&gt;

&lt;p&gt;Ionic은 &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt; 기반의 모듈을 사용하여 개발을 할 수 있다. PhoneGap과 Cordova의 command가 모두 Node.js 기반으로 만들었기 때문에 Node.js 모듈을 함께 사용하여 개발할 수 있듯 Ionic command 모두 Node.js로 만들어져 있기 때문이다. 예를 들어 Ionic 프로젝트를 모두 개발하고 JavaScript를 uglify를 할 때 &lt;a href=&quot;http://gulpjs.com&quot;&gt;gulp.js&lt;/a&gt;를 이용하여 uglify를 할 수 있다. 우리는 MVC 기반으로 만든 JavaScript 코드를 &lt;code&gt;all.min.js&lt;/code&gt; 라는 하난의 파일로 만들어서 배포버전을 만들었는데 이때 Node.js의 스트림기반 task 모듈인 &lt;strong&gt;gulp.js&lt;/strong&gt;를 이용했다.&lt;/p&gt;

&lt;h3 id=&quot;ionic과-앱-스토어-등록&quot;&gt;Ionic과 앱 스토어 등록&lt;/h3&gt;

&lt;p&gt;Ionic으로 만든 하이브리드 앱은 여러가지 디바이스에 실행할 수 있는데 우리는 iOS와 Android 디바이스만 고려했다. Ionic에는 앱의 정보를 설정하는 &lt;code&gt;config.xml&lt;/code&gt; 파일이 있는데 여기에서 iOS와 Android 앱을 스토어에 등록하기 위한 정보를 입력해서 Ionic 프로젝트를 배포할 수 있게 만들어 놓았다. 이것은 Cordova 프로젝트를 앱 스토어에 등록하는 설정과 동일하다. 예를 들어 &lt;code&gt;net.hibrain.apps.hibrainnet&lt;/code&gt; 이라는 패키지명으로 iOS와 Android 프로젝트를 스토어에 등록한 상태라면 다음 버전을 스토어를 통해서 배포할 때, 동일한 패키지명으로 개발을 해야한다. 아래는 우리가 프로젝트를 앱 스토어에 등록하기 위해서 &lt;code&gt;config.xml&lt;/code&gt;에 설정한 정보의 일부분이다. 자세히 살펴보면 앺 패키지명을과 스토어에 등록할 버전 정보를 &lt;code&gt;&amp;lt;widget id=&amp;quot;net.hibrain.apps.hibrainnet&amp;quot; version=&amp;quot;2.4.0&amp;quot;&amp;gt;&lt;/code&gt;에서  지정한 것을 살펴볼 수 있다. 그리고  앱의 가로,세로 지원 모드, 아이콘 설정 등을 명시적으로 정의한 것을 살펴볼 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;#39;1.0&amp;#39; encoding=&amp;#39;utf-8&amp;#39;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;widget&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;net.hibrain.apps.hibrainnet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;2.4.0&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.w3.org/ns/widgets&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:cdv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://cordova.apache.org/ns/1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;하이브레인넷&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;
        하이브레인넷 채용 정보 스마트폰 어플리케이션
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;author&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;email=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;apps@hibrain.net&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.hibrain.net&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      Hibrainnet Mobile Service Support
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/author&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;content&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;access&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;origin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;preference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fullscreen&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;preference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;webviewbounce&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;preference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;UIWebViewBounce&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;preference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;DisallowOverscroll&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;preference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Orientation&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;default&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;preference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SplashScreen&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;screen&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;preference&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;BackupWebStorage&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;none&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;feature&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;StatusBar&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ios-package&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;CDVStatusBar&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onload=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/feature&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;feature&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;PushPlugin&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ios-package&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;PushPlugin&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/feature&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;platform&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/android/icon-ldpi.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;density=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ldpi&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/android/icon-mdpi.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;density=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mdpi&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/android/icon-hdpi.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;density=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hdpi&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/android/icon-xhdpi.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;density=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;xhdpi&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/platform&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;platform&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ios&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- iOS 7.0+ --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- iPhone / iPod Touch  --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-60.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;60&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;60&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-60@2x.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;120&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;120&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- iPad --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-76.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;76&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;76&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-76@2x.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;152&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;152&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- iOS 6.1 --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Spotlight Icon --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-40.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;40&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;40&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-40@2x.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;80&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;80&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- iPhone / iPod Touch --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;57&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;57&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon@2x.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;114&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;114&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- iPad --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-72.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;72&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;72&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-72@2x.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;144&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;144&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- iPhone Spotlight and Settings Icon --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-small.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;29&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;29&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-small@2x.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;58&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;58&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- iPad Spotlight and Settings Icon --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-50.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;50&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;50&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;icon&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www/res/icons/ios/icon-50@2x.png&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;100&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;100&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/platform&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/widget&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;결론&quot;&gt;결론&lt;/h1&gt;

&lt;p&gt;우리는 &lt;strong&gt;Ionic Framework&lt;/strong&gt;를 이용한 첫번째 하이브리드 앱을 &lt;a href=&quot;https://itunes.apple.com/kr/app/haibeuleinnes/id438616285?mt=8&quot;&gt;앱스토어&lt;/a&gt;와 &lt;a href=&quot;https://play.google.com/store/apps/details?id=net.hibrain.apps.android.hibrainnet&quot;&gt;구글 플레이&lt;/a&gt;를 통해 배포했다. 기존에 iOS와 Android를 혼자 개발했을 때 개발 비용이 너무 많이 필요했다. 안드로이드 파편화 그리고 iOS와 Android 개발의 다른 플랫폼을 혼자서 처리하기에는 버거운 일이였다. 그래서 우리는 개발환경을 하이브리드 개발을 해보기로 결정을 했다. 사전 조사와 테스트 앱을 만들어보고 우리가 배포하는 앱은 고성능을 필요하기 보다 관리의 편리성과 개발 시간을 단축하는 것을 주요하게 생각했기 때문에 하이브리드 앱으로 결정을 내린것이다. 하이브리드 앱 개발 프레임워크를 조사하면서 Ionic은 우리가 원하는 환경을 가지고 있었다. Ionic은 AngularJS, Cordova, Node.js 기반으로 만들어졌기 때문에 우리가 요구조건을 대부분 갖추고 있었다. 이번 프로젝트에서 우리는 Cordova를 이용해서  Network와 Persistence 플러그인 두가지를 만들었고, Ionic을 사용해서 iOS와 Android 앱을 동시에 개발하였다. 개발 시간은 기존의 네이티브 앱을 개발하는 시간에 비해 상당한 시간을 줄일 수 있었다. 우리는 이 경험을 바탕으로 Ionic으로 하이브리드 앱을 개발한 과정과 개발하면서 겪게된 문제들 그리고 그것을 해결한 방법들을 계속해서 블로그를 통해 소개할 예정이다.&lt;/p&gt;

&lt;h1 id=&quot;연구원-소개&quot;&gt;연구원 소개&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;작성자 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;송성광&lt;/a&gt; 개발 연구원&lt;/li&gt;
&lt;li&gt;이메일 : &lt;a href=&quot;mailto:saltfactory@gmail.com&quot;&gt;saltfactory@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;트위터 : &lt;a href=&quot;https://twitter.com/saltfactory&quot;&gt;@saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;페이스북 : &lt;a href=&quot;https://facebook.com/salthub&quot;&gt;https://facebook.com/salthub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;연구소 : &lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설연구소&lt;/li&gt;
&lt;li&gt;연구실 : &lt;a href=&quot;http://dblab.changwon.ac.kr&quot;&gt;창원대학교 데이터베이스 연구실&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 13 Oct 2014 00:00:00 +0900</pubDate>
        <link>/series/ionic/create-hybrid-app-using-ionic.html</link>
        <guid isPermaLink="true">/series/ionic/create-hybrid-app-using-ionic.html</guid>
        
        <category>android</category>
        
        <category>ios</category>
        
        <category>hybrid</category>
        
        <category>html5</category>
        
        <category>ionic</category>
        
        
        <category>ionic</category>
        
      </item>
    
      <item>
        <title>Nginx와 git 연동 시 The remote end hung up unexpectedly 에러 문제 해결</title>
        <description>&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

&lt;p&gt;Nginx와 git 연동 시 &lt;code&gt;git push&lt;/code&gt; 명령어를 실행할 때, &lt;strong&gt;The remote and hung up unexpectedly&lt;/strong&gt; 라는 에러를 보여주면서 &lt;code&gt;git push&lt;/code&gt;가 정상적으로 동작하지 않는 문제를 만날 수 있다. 이것은 NginX에서 POST의 크기의 제한 때문에 발생하는 문제이다.
Nginx의 문제를 파악하고 NginX의 설정을 변경하여 이 문제를 해결하는 방법에 대해서 알아본다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;git-push-에러-발생&quot;&gt;git push 에러 발생&lt;/h2&gt;

&lt;p&gt;우리는 &lt;a href=&quot;http://yobi.io&quot;&gt;Yobi&lt;/a&gt;와 &lt;a href=&quot;http://nginx.com/&quot;&gt;NGINX&lt;/a&gt;를 연동하여 사용하고 있다. 이전 포스팅에서 소개했지만, 우리는 다양한 리눅스 서버에 운영될 수 있는 환경을 구축하기 위해서 &lt;a href=&quot;https://docker.com/&quot;&gt;Docker&lt;/a&gt;를 사용하여 &lt;a href=&quot;https://github.com/saltfactory/docker-yobi&quot;&gt;saltfactory/yobi&lt;/a&gt;와 &lt;a href=&quot;https://github.com/saltfactory/docker-nginx&quot;&gt;saltfactory/nginx&lt;/a&gt; 이미지를 만들어서 git를 운영하고 있다. yobi는 ssh로 git를 사용하는 것 대신에 http로 git를 쉽게 사용할 수 있게 지원해주고 있다. 사내에서 http 포트만 외부에서 사용할 수 있는 우리 연구소에서 yobi를 선택했던 가장 큰 이유중에 하나가 http로 git를 사용할 수 있다는 것이였다. 우리는 http 서비스의 빠른 응답속도와 확장성을 위해서 웹 서버로 NGINX를 선택했고 이것을 yobi와 연동하여 사용하고 있다.&lt;/p&gt;

&lt;p&gt;프로젝트 소스코드를 원격 리파지토리에 저장해서 서버에서 병합하는 방법을 취하고 있는데 어느날 갑자기 로컬에서 작업하여 이력을 관리한 &lt;code&gt;commit&lt;/code&gt;들이 다음과 같이 &lt;strong&gt;&lt;em&gt;The remote end hung up unexpectedly&lt;/em&gt;&lt;/strong&gt; 에러를 발생하면서 서버의 원격 리파지토리에 &lt;code&gt;push&lt;/code&gt;가 되지 않는 것이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Counting objects: 19, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (5/5), done.
Writing objects: 100% (5/5), 1.27 MiB | 0 bytes/s, done.
Total 5 (delta 2), reused 0 (delta 0)
error: RPC failed; result=22, HTTP code = 413
fatal: The remote end hung up unexpectedly
fatal: The remote end hung up unexpectedly
Everything up-to-date
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 &lt;code&gt;fetch&lt;/code&gt;와 &lt;code&gt;pull&lt;/code&gt; 과 같은 리모트 명령어들은 정상적으로 동작하고 있었다. 그래서 우리는 서버에서 nginx의 로그를 살펴보기로 했다.&lt;/p&gt;

&lt;h2 id=&quot;nginx-에러-발생&quot;&gt;NGINX 에러 발생&lt;/h2&gt;

&lt;p&gt;Docker로 구성한 서버 환경에서 우리는 NGINX의 로그를 VOLUME으로 마운트시킨 디렉토리 파일에서 로그를 바로 확인할 수 있었다. 클라이언트에서 &lt;code&gt;git push&lt;/code&gt;를 요청할 때마다 다음과 같이 &lt;strong&gt;&lt;em&gt;client intended to send too large body&lt;/em&gt;&lt;/strong&gt;  에러가 로그에 남는 것을 확인했다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;2014/09/12 01:38:50 [error] 11#0: *155 client intended to send too large body: 1326741 bytes, client: 클라이언트 아이피, server: 서버네임, request: &amp;quot;POST /프로젝트명/git-receive-pack HTTP/1.0&amp;quot;, host: &amp;quot;호스트네임&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 에러는 &lt;strong&gt;POST&lt;/strong&gt; request를 요청할 때 서버에서 처리할 수 있는 body의 사이즈보다 큰 요청이 들어오면 생기는 에러이다. 그래서 우리는 NGINX의 설정값을 수정하기로 했다.&lt;/p&gt;

&lt;h2 id=&quot;client_max_body_size-수정&quot;&gt;client_max_body_size 수정&lt;/h2&gt;

&lt;p&gt;NGINX에서 클라이언트에서 요청하는 body의 사이즈를 설정하는 옵션은 &lt;strong&gt;client_max_body_size&lt;/strong&gt; 이다. 우리는 yobi를 docker에서 운영하기 때문에 서버에 직접 들어가서 수정하지 않고, &lt;em&gt;VOLUME&lt;/em&gt;으로 마운트 시키는 디렉토리 안의  &lt;code&gt;yobis-site.conf&lt;/code&gt; 파일을 다음과 같이 수정했다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;client_max_body_size 1000M;

upstream yobi-upstream {
  server  서버네임:9000;
}

server {
  listen 80;
  server_name 서버네임;
}
... 생략
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ubuntu에 설치되는 NGINX는 &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt; 설정 파일을 가지고 있고 그 파일 안에서 외부 설정 파일들을 로드시키는데 우리는 Docker를 설정할 때 &lt;code&gt;/site-enabed/*.conf&lt;/code&gt; 파일들을 로드시키도록 지정하였다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;http {
... 생략 ...
include /etc/nginx/sites-enabled/*;
... 생략 ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;NGINX의 각 설정파일은 &lt;code&gt;http&lt;/code&gt; 설정 안에 포함이 되도록 설정되어 있다. &lt;strong&gt;client_max_body_size&lt;/strong&gt; 설정은 &lt;strong&gt;http&lt;/strong&gt; 설정 안에 지정되어야 하기 때문에 위의 &lt;code&gt;yobi-site.conf&lt;/code&gt;의 첫번째 라인에 바로 이 값을 설정하도록 한 것을 유의해야한다. 설정이 끝나면 NGINX을 다시 제시작 한다. 우리는 docker를 사용했기 때문에 &lt;code&gt;docker start&lt;/code&gt; 명령어로 재시작을 했다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo docker start nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다시 클라이언트에 돌아가서 &lt;code&gt;git push&lt;/code&gt; 명령을 실행하면 문제 없이 원격 리파지토리에 commit들이 모두 push 되는 것을 확인할 수 있을 것이다.&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;git는 로컬에서 뿐만 아니라 원격 저장소에서 소스코드 형상관리를 할 수 있다. 사내 망 내부가 아닌 경우 http를 이용해서 git를 사용할 경우 접근도가 높아진다. http로 git 환경을 만드는 것은 그렇게 쉬운 일은 아니다. 하지만 yobi를 사용하면 복잡한 git를 http로 사용할 수 있는 환경을 쉽게 구축할 수 있다. http 서비스의 성능과 확장성을 위해서 &lt;a href=&quot;http://playframework.com&quot;&gt;Play framework&lt;/a&gt;을 단독으로 웹 서버로 사용하는 것 보다 NGINX나 Apaach와 같은 웹 서버를 함께 사용하는 것이 좋다. 하지만 git를 http로 사용할 때 한가지 기억해 둬야할 것이다. &lt;strong&gt;HTTP로 git의 commit을 전송할 때 POST로 전송이 되며, 웹 서버는 POST의 body 사이즈를 제한하고 있다&lt;/strong&gt;다는 것이다. 즉, 더 큰 사이즈의 데이터를 HTTP의 POST로 전송하기 위해서는 웹 서버의 &lt;strong&gt;HTTP POST body&lt;/strong&gt; 설정을 변경해야한다. 우리가 겪은 문제도 동일한 문제이다. 하이브리드 어플리케이션 개발을 하는 프로젝트에서 commit하고 push하는 데이터량이 많아져서 NGINX에서 기본적으로 설정한 HTTP POST 사이즈보다 커서 원격 저장소에 정상적으로 업데이트 정보를 전송하지 못하는 문제를 갖게 되었다. 우리는 NGINX 웹 서버를 사용하고 있었고 Docker를 사용해서 nginx의 설정파일을 외부 디렉토리에서 VOLUME으로 마운트시켜서 사용하고 있었기 때문에 설정파일에 &lt;strong&gt;client_max_body_size&lt;/strong&gt;의 값을 변경하여 이 문제를 해결했다.&lt;/p&gt;

&lt;p&gt;git와 HTTP를 연동하여 사용한다면 반드시 HTTP POST body의 사이즈를 결정하는 옵션을 한번 더 체크해보기 바란다. 이 부분을 간과하고 넘어간다면 언젠가 큰 소스코드를 한번에 push 할 때  &amp;#39;fatal: The remote end hung up unexpectedly&amp;#39;를 만나게 될 것이다. 이 에러를 만나게 되면 웹 서버의 HTTP POST body 사이즈를 늘려주고 서버를 재시작하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2056124/nginx-client-max-body-size-has-no-effect&quot;&gt;http://stackoverflow.com/questions/2056124/nginx-client-max-body-size-has-no-effect&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;연구원-소개&quot;&gt;연구원 소개&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;작성자 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;송성광&lt;/a&gt; 개발 연구원&lt;/li&gt;
&lt;li&gt;이메일 : &lt;a href=&quot;mailto:saltfactory@gmail.com&quot;&gt;saltfactory@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;트위터 : &lt;a href=&quot;https://twitter.com/saltfactory&quot;&gt;@saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;페이스북 : &lt;a href=&quot;https://facebook.com/salthub&quot;&gt;https://facebook.com/salthub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;연구소 : &lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설연구소&lt;/li&gt;
&lt;li&gt;연구실 : &lt;a href=&quot;http://dblab.changwon.ac.kr&quot;&gt;창원대학교 데이터베이스 연구실&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 12 Sep 2014 00:00:00 +0900</pubDate>
        <link>/series/nginx/The-remote-end-hung-up-unexpectedly-when-git-push.html</link>
        <guid isPermaLink="true">/series/nginx/The-remote-end-hung-up-unexpectedly-when-git-push.html</guid>
        
        <category>nginx</category>
        
        <category>git</category>
        
        
        <category>nginx</category>
        
      </item>
    
      <item>
        <title>docker-yobi를 이용하여 yobi 운영하기</title>
        <description>&lt;h2 id=&quot;docker-yobi(saltfactory/yobi)&quot;&gt;docker-yobi(saltfactory/yobi)&lt;/h2&gt;

&lt;p&gt;우리는 LXC로 서버를 운영하기 위해서 &lt;a href=&quot;http://docker.com&quot;&gt;Docker&lt;/a&gt;를 도입하기로 했다. docker를 도입해서 docker에 올리는 서비스중 첫번째로 &lt;a href=&quot;http://yobi.io&quot;&gt;Yobi&lt;/a&gt;를 적용하기로 했다. 개인연구로 사용하고 있는 랩탑은 Mac OS X를 사용하고 있기 때문에 &lt;a href=&quot;&quot;&gt;boot2docker&lt;/a&gt;를 사용하여 Dockerfile을 생성해서 GitHub에 &lt;a href=&quot;https://github.com/saltfactory/docker-yobi&quot;&gt;docker-hub&lt;/a&gt; 와 &lt;a href=&quot;https://registry.hub.docker.com/u/saltfactory/yobi/&quot;&gt;Docker Hub&lt;/a&gt;에 올렸다. 이 포스팅에서는 GitHub와 Docker Hub를 이용해서 Yobi를 사용하는 방법을 소개한다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;docker-yobi&quot;&gt;docker-yobi&lt;/h2&gt;

&lt;p&gt;docker-yobi는 docker에서 &lt;a href=&quot;http://yobi.io&quot;&gt;Yobi&lt;/a&gt;를 운영하기 위한 Dockerfile이 포함되어 있다. docker-yobi는 로컬에 있는 yobi 디렉토리를 &lt;strong&gt;mount&lt;/strong&gt;하여 사용한다. 즉, docker-yobi를 실행할 때 docker 이미지에 내 로컬 PC에 있는 yobi 디렉토리를 그대로 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;docker-yobi를 사용하기 위해서 먼저 GitHub에서 yobi를 &lt;code&gt;clone&lt;/code&gt;한다. 설치 예제를 설명하기 위해서 yobi를 &lt;code&gt;clone&lt;/code&gt; 받은 경로는 &lt;code&gt;/Users/saltfactory/yobi&lt;/code&gt;라고 가정한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git clone https://github.com/naver/yobi.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;docker나 boot2docker를 시작한 후 &lt;code&gt;build&lt;/code&gt;를 한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker build -t saltfactory/yobi .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;docker-yobi의 &lt;code&gt;run-yobi.sh&lt;/code&gt;를 실행한다. 이때, 로컬에 &lt;code&gt;clone&lt;/code&gt;한 yobi의 디렉토리를 지정한다. 설치 예제로 &lt;code&gt;clone&lt;/code&gt; 받은 경로는 &lt;code&gt;/Users/saltfactory/yobi&lt;/code&gt;라고 가정한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sh run-yobi.sh /Users/saltfactory/yobi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;docker-yobi가 정상적으로 실행되고 있는지 확인하기 위해서 &lt;code&gt;docker ps&lt;/code&gt; 명령어로 확인한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정상적으로 실행이되면 docker ps 목록에 yobi가 보인다. docker-yobi가 정상적으로 실행되면 &lt;a href=&quot;https://www.playframework.com/&quot;&gt;play&lt;/a&gt;가 실행되면서 필요한 패키지를 다운받고 컴파일한다. 만약 설치되는 로그를 보고 싶을 경우는 &lt;code&gt;docker logs&lt;/code&gt; 명령어로 확인할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker logs yobi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;play가 정상적으로 시작이되고 난 다음 브라우저에서 확인한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:9000&quot;&gt;http://localhost:9000&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;docker-yobi-활용방법&quot;&gt;docker-yobi 활용방법&lt;/h2&gt;

&lt;p&gt;docker-yobi는 yobi를 사용하는데 필요한 이미지와 컨테이너를 만들게 된다. 한번 만들어진 컨테이너를 재사용하면 play가 시작하면서 다운받고 컴파일한 패키지를 다시 다운받고 컴파일하지 않기 때문에 yobi 시작 시간을 줄일 수 있다. 새롭게 &lt;code&gt;docker build&lt;/code&gt;를 하지 않는 이상 빠르게 yobi를 실행할 수 있다.&lt;/p&gt;

&lt;p&gt;docker에 커네이너로 만들어진 yobi를 정지하기 위해서는 &lt;code&gt;docker stop&lt;/code&gt; 명령어를 사용한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker stop yobi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다시 yobi 컨테이너를 실행하고 싶을 경우 &lt;code&gt;run-yobi.sh&lt;/code&gt;를 명령어를 사용한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sh run-yobi.sh /Users/saltfactory/yobi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;다른-서버에서-docker-yobi-사용하여-이전하기&quot;&gt;다른 서버에서 docker-yobi 사용하여 이전하기&lt;/h2&gt;

&lt;p&gt;docker 환경을 갖춘 모든 리눅스 서버에서 docker-yobi를 사용하여 이전에 사용하던 yobi를 그대로 사용할 수 있다. 만약 yobi를 다른 서버로 이전할 경우, docker-yobi를 설치하고 로컬 PC에 저장된 yobi 디렉토리만 복사해서 이전하는 서버에 복사하여 &lt;code&gt;run-yobi.sh&lt;/code&gt;를 할 때 이전한 서버에 복사한 yobi 경로를 지정하여 사용하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;mac-os-x에서-boot2docker를-사용할-경우&quot;&gt;Mac OS X에서 boot2docker를 사용할 경우&lt;/h2&gt;

&lt;p&gt;docker는 리눅스 환경에서 사용하지만 Mac OS X에서 &lt;a href=&quot;http://docs.docker.com/installation/mac/&quot;&gt;boot2docker&lt;/a&gt;를 사용하여 docker-yobi를 사용할 수 있다.
boot2docker 설치방법은 &lt;a href=&quot;http://docs.docker.com/installation/mac/&quot;&gt;http://docs.docker.com/installation/mac/&lt;/a&gt; 나 &lt;a href=&quot;http://blog.saltfactory.net/255&quot;&gt;http://blog.saltfactory.net/255&lt;/a&gt; 문서를 참조하면 된다.&lt;/p&gt;

&lt;p&gt;boot2docker를 사용하기 위해서는 &lt;a href=&quot;https://www.virtualbox.org&quot;&gt;VirtualBox&lt;/a&gt;에서 forwarding port를 하기 위해서 docker-yobi 안에 있는 &lt;code&gt;boot2dockr-ports.sh&lt;/code&gt;를 실행한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sh boot2docker-ports.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;boot2docker에서 로컬 PC에 있는 디렉토리를 마운트하기 위해서 VirtualBox에서 shared directory를 지정해야 한다. 다음 사이트에 자세한 방법을 참조한다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/boot2docker-lightweight-linux-for-docker/boot2docker-together-with-virtualbox-guest-additions-da1e3ab2465c&quot;&gt;https://medium.com/boot2docker-lightweight-linux-for-docker/boot2docker-together-with-virtualbox-guest-additions-da1e3ab2465c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://viget.com/extend/how-to-use-docker-on-os-x-the-missing-guide&quot;&gt;http://viget.com/extend/how-to-use-docker-on-os-x-the-missing-guide&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;boot2docker down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;curl http://static.dockerfiles.io/boot2docker-v1.2.0-virtualbox-guest-additions-v4.3.14.iso &amp;gt; ~/.boot2docker/boot2docker.iso
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;VBoxManage sharedfolder add boot2docker-vm -name home -hostpath /Users
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;boot2docker up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;docker-hub&quot;&gt;Docker Hub&lt;/h2&gt;

&lt;p&gt;가장 먼저 해야할 일을 yobi를 clone 받는 것이다. 로컬 PC에 GitHub로부터 yobi를 clone 한다. 예제 설명을 위해서 clone 받는 위치는 &lt;code&gt;/Users/saltfactory/yobi&lt;/code&gt;라고 가정한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git clone https://github.com/naver/yobi.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;docker는 GitHub와 같은 Repository를 구축했다. 그래서 docker 명령어로 docker image를 바로 다운받아서 사용할 수 있다. 우리는 yobi를 Docker Hub에서 바로 다운 받을 수 있게 GitHub와 Docker Hub를 연동했다.
&lt;img src=&quot;http://cfile30.uf.tistory.com/image/223C273653FEB7A60B789B&quot; alt=&quot;Docker Hub&quot;&gt;&lt;/p&gt;

&lt;p&gt;Docker Hub에서 &lt;code&gt;docker pull&lt;/code&gt; 명령어를 사용하여  &lt;strong&gt;&lt;em&gt;saltfactory/yobi&lt;/em&gt;&lt;/strong&gt; 이미지를 다운 받는다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker pull saltfactory/yobi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;saltfactory/yobi&lt;/em&gt;&lt;/strong&gt; 에서 필요한 파일은  &lt;a href=&quot;https://www.playframework.com/&quot;&gt;Play&lt;/a&gt;를 실행시키는 &lt;code&gt;start-yobi.sh&lt;/code&gt; 파일이 필요하다. docker-yobi가 실행할때 이 파일을 자동으로 마운트해서 사용하기 때문이다. 로컬에 다음 내용으로 &lt;code&gt;start-yobi.sh&lt;/code&gt; 파일을 만든다. 필요하다면 play가 시작할 때 다른 옵션을 추가해도 된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/yobi/yobi&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; play &lt;span class=&quot;s2&quot;&gt;&amp;quot;start -DapplyEvolutions.default=true -Dhttp.port=9000&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음은 docker-yobi를 실행하는 &lt;code&gt;run-yobi.sh&lt;/code&gt; 파일을 만든다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;YOBI_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f &lt;span class=&quot;nv&quot;&gt;$YOBI_HOME&lt;/span&gt;/RUNNING_PID &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  rm -rf &lt;span class=&quot;nv&quot;&gt;$YOBI_HOME&lt;/span&gt;/RUNNING_PID
  docker start yobi
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  docker stop yboi
  docker rm yobi
  docker run --name yobi &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -d -p 9000:9000 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v &lt;span class=&quot;nv&quot;&gt;$YOBI_HOME&lt;/span&gt;:/home/yobi/yobi &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  saltfactory/yobi
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 &lt;code&gt;run-yobi.sh&lt;/code&gt;를 실행한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sh run-yobi.sh /Users/saltfactory/yobi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;마지막으로 브라우저에서 &lt;a href=&quot;http://localhost:9000&quot;&gt;http://localhost:9000&lt;/a&gt; 를 확인한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cfile30.uf.tistory.com/image/214D574553FEB7A62A5D91&quot; alt=&quot;yobi&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;우리는 여러대의 Linux 서버를 관리하는데 많은 시간이 들여지고 환경을 맞추는데 어려움을 겪어서 서버에 동작하는 서비스들을 docker로 운영하기로 결정했다. 첫번째로 yobi를 docker에서 운영하기 위해서 docker-yobi를 만들어서 GitHub에 &lt;a href=&quot;https://github.com/saltfactory/docker-yobi&quot;&gt;docker-hub&lt;/a&gt; 와 &lt;a href=&quot;https://registry.hub.docker.com/u/saltfactory/yobi/&quot;&gt;Docker Hub&lt;/a&gt;에 올렸다. 이제 우리는 어떠한 Linux 서버에서도 동일한 환경으로 Yobi 서비스를 사용할 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;Yobi는 git를 사용하기 위한 repository를 포함하고 있다. 이 repository는 docker 이미지 안에 넣지 않았다. 이유는 Yobi의 repository는 단순히 우리가 쌓는 데이터이기 때문이고, 이 데이터는 서버 환경에 영향을 받지 않고 빠르게 이전하거나 백업을 따로 하기 위해서 이다. 그래서 우리는 docker의 &lt;a href=&quot;https://docs.docker.com/userguide/dockervolumes/&quot;&gt;VOLUME&lt;/a&gt;을 사용해서 외부의 디렉토리를 docker 컨테이너에 올릴 수 있게 했다.&lt;/p&gt;

&lt;p&gt;개인적으로 연구할 때 사용하는 랩탑은 Mac OS X 이기 때문에 boot2docker를 사용했지만 docker-yobi를 사용해서 어떤 Linux 서버에서도 쉽게 설치해서 운영할 수 있는 Dockerfile을 만들어서 사용할 수 있게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;참조&quot;&gt;참조&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/userguide/dockervolumes/&quot;&gt;https://docs.docker.com/userguide/dockervolumes/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/docker-hub/builds/&quot;&gt;https://docs.docker.com/docker-hub/builds/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://viget.com/extend/how-to-use-docker-on-os-x-the-missing-guide&quot;&gt;http://viget.com/extend/how-to-use-docker-on-os-x-the-missing-guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/boot2docker-lightweight-linux-for-docker/boot2docker-together-with-virtualbox-guest-additions-da1e3ab2465c&quot;&gt;https://medium.com/boot2docker-lightweight-linux-for-docker/boot2docker-together-with-virtualbox-guest-additions-da1e3ab2465c&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;연구원-소개&quot;&gt;연구원 소개&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;작성자 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;송성광&lt;/a&gt; 개발 연구원&lt;/li&gt;
&lt;li&gt;이메일 : &lt;a href=&quot;mailto:saltfactory@gmail.com&quot;&gt;saltfactory@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;트위터 : &lt;a href=&quot;https://twitter.com/saltfactory&quot;&gt;@saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;페이스북 : &lt;a href=&quot;https://facebook.com/salthub&quot;&gt;https://facebook.com/salthub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;연구소 : &lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설연구소&lt;/li&gt;
&lt;li&gt;연구실 : &lt;a href=&quot;http://dblab.changwon.ac.kr&quot;&gt;창원대학교 데이터베이스 연구실&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 28 Aug 2014 00:00:00 +0900</pubDate>
        <link>/series/git/running-yobi-on-docker.html</link>
        <guid isPermaLink="true">/series/git/running-yobi-on-docker.html</guid>
        
        <category>docker</category>
        
        <category>git</category>
        
        <category>yobi</category>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Ubuntu에 대용량 USB 외장하드디스크 연결하여 사용하기</title>
        <description>&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

&lt;p&gt;Windows의 Plug &amp;amp; Play는 운영체제게 설치된 컴퓨터에 외부 인터페이스를 연결하면 자동으로 인식하여 사용할 수 있도록 하는 기능이다. Windows의 이 기능은 플러그인을 손쉽게 사용할 수 있도록 해 컴퓨터에 대한 특별한 전문 지식이 없어도 쉽게 사용할 수 있도록 도와준다. Ubuntu는 Unix 계열 운영체제중에서 Desktop을 위한 확장 기능이 많이 지원된다. Unbutu에서 USB 외장하드디스크를 연결하여 사용할 때 어떻게 사용할 수 있는지 알아본다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;ubuntu-외장하드디스크-연결&quot;&gt;Ubuntu 외장하드디스크 연결&lt;/h2&gt;

&lt;p&gt;우리는 docker 도입을 하기 위해서 운영체제를 Ubuntu-Server 14.04 LTS 64bit 를 새로 설치하려고 했다. 기존 서버는 Ubuntu 12.04 LTS가 아니라 업데이트 지원도 빨리 끝나버려서 old release에서 업데이트를 해야만 했기 때문에 docker 도입 결정과 함께 이전 운영체제를 업그레이드 하기로 했다. 먼저 기존의 데이터를 백업 하기 위해서 외장 하드 디스크를 USB로 연결해서 &lt;code&gt;cp&lt;/code&gt;를 하면 되겠지하고 간단히 생각했다. 하지만 Ubuntu에서 USB 외장 하드 디스크가 마운트가 되지 않는 것이다. 그래서 우리는&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ubnutu에서 USB 외장하드디스크 인식되지 않을 때, USB 외장하드디스크를 마운트해서 사용하는 방법에 대해서 알아보기로 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;우리가 사용한 외장하드 디스크는 500G IDE를 USB 3.0으로 사용할 수 있는 외장하드 케이스에 연결된 것이다. 우리는 네트워크로 백업을 했지만 USB3.0으로 외장 하드디스크를 사용할 수 있는 방법을 알기 위해서 조사하기 시작했다.&lt;/p&gt;

&lt;h2 id=&quot;ubuntu-usb-mount&quot;&gt;Ubuntu USB mount&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://help.ubuntu.com/community/Mount/USB&quot;&gt;Ubuntu Mount/USB 공식문서&lt;/a&gt;를 살펴보자. 공식문서에서는 &lt;a href=&quot;http://www.gnome.org&quot;&gt;GNOME&lt;/a&gt;, GUI를 사용하는 방법에 대해서 먼저 설명하고 있지만 우리는 본체와 네트워크 케이블만 연결되어 있는 서버라서 이 방법은 패스했다.&lt;/p&gt;

&lt;h3 id=&quot;수동-마운트&quot;&gt;수동 마운트&lt;/h3&gt;

&lt;p&gt;처음 Ubuntu에 외장하드 디스크를 마운트하는 방법을 찾았을 때, 국내 몇개의 사이트에서 방법이 소개되어 있었지만 모두 공식 문서와 같은 내용으로 USB 하드 디스크를 수동으로 &lt;code&gt;mount&lt;/code&gt; 하는 방법이였다. 방법은 다음과 같다.&lt;/p&gt;

&lt;p&gt;먼저 연결된 USB 외장하드디스크를 확인한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;fdisk -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음은 목록에서 나타나는 USB 외장하드 디스크를 해당하는 포멧으로 마운트를 한다. USB 외장하드디스크가 마운트 되어질 디렉토리를 만든다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;mkdir -p /media/external
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;보통 USB 외장하드디스크는 &lt;strong&gt;FAT&lt;/strong&gt; 방식이거나 &lt;strong&gt;NTFS&lt;/strong&gt; 방식이기 때문에 다음과 같이 할 수 있다. &lt;code&gt;fdisk -l&lt;/code&gt;에서 USB 외장하드디스크가 &lt;code&gt;/dev/sdb1&lt;/code&gt;으로 나타났다고 가정하고 살펴보자.&lt;/p&gt;

&lt;p&gt;만약 USB 외장하드디스크가 &lt;strong&gt;FAT&lt;/strong&gt; 방식일 경우,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;mount -t vfat /dev/sdb1 /media/external -o uid=1000,gid=1000,utf8,dmask=027,fmask=137
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;만약 USB 외장하드디스크가 &lt;strong&gt;NTFS&lt;/strong&gt; 방식일 경우,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;mount -t ntfs-3g /dev/sdb1 /media/external
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 방법은 USB를 연결했을 때 &lt;code&gt;fdisk -l&lt;/code&gt;로  디스크 목록이 보일때 가능하다. 다시 말해서 USB 외장하드디스크가 인식되어야 한다는 것이다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;우리는 &lt;code&gt;fdisk -l&lt;/code&gt;을 하더라도 USB 외장하드디스크가 목록에서 나타나지 않는 문제를 가지고 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;자동-마운트&quot;&gt;자동 마운트&lt;/h3&gt;

&lt;p&gt;또한 우리는 USB가 인식되면 윈도우즈 처럼 자동으로 USB 외장하드디스크가 마운트되어서 사용할 수 있도록 하는 방법을 찾는 중 Ubuntu 공식 문서에서 찾게되었다.&lt;/p&gt;

&lt;p&gt;만약 Ubuntu server 운영체제를 사용하고 있다면 &lt;a href=&quot;http://packages.ubuntu.com/lucid/usbmount&quot;&gt;usbmount&lt;/a&gt; 패키지를 설치하면 USB에 외장저장매체를 연결하면 자동으로 &lt;code&gt;mount&lt;/code&gt;가 되어진다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apt-get install usbmount
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;kernel-모듈&quot;&gt;Kernel 모듈&lt;/h2&gt;

&lt;p&gt;우리가 사용하는 Linux는 각 벤더마다 linux kenel에 필요한 모듈들을 사용하는데 사용되고 있는 모듈을 살펴보려면 다음과 &lt;code&gt;cat /proc/modules&lt;/code&gt;를 사용하거나 &lt;code&gt;lsmod&lt;/code&gt; 명령어를 사용하면 된다. 아래는 &lt;code&gt;lsmod&lt;/code&gt;를 사용했을 때의 결과 예제이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Module                  Size  Used by
snd_hda_codec_realtek   255820  1
snd_hda_intel          24140  0
snd_hda_codec          90901  2 snd_hda_codec_realtek,snd_hda_intel
snd_hwdep              13274  1 snd_hda_codec
snd_pcm                80244  2 snd_hda_intel,snd_hda_codec
snd_timer              28659  1 snd_pcm
snd                    55295  6 snd_hda_codec_realtek,snd_hda_intel,snd_hda_codec,snd_hwdep,snd_pcm,snd_timer
soundcore              12600  1 snd
snd_page_alloc         14073  2 snd_hda_intel,snd_pcm
i915                  450979  1
drm_kms_helper         40745  1 i915
drm                   184133  2 i915,drm_kms_helper
i2c_algo_bit           13184  1 i915
video                  18951  1 i915
lp                     13349  0
ppdev                  12849  0
psmouse                59039  0
serio_raw              12990  0
parport_pc             32111  0
parport                36746  3 lp,ppdev,parport_pc
r8169                  46630  0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;uas-module&quot;&gt;UAS module&lt;/h2&gt;

&lt;p&gt;kenel 모듈 중에 &lt;a href=&quot;http://en.wikipedia.org/wiki/USB_Attached_SCSI&quot;&gt;UAS(USB Attached SCSI&lt;/a&gt; 가 있다. 이 모듈은 UAS 프로토콜, 다시 말해서 USB 저장매체로 데이터를 전송하는 프로토콜을 구현한 모듈인데 현재 Ubuntu에서는 USB 3.0 일 경우 문제가 있어서 UAS 모듈을 삭제한다. kenel 모듈을 삭제하는 방법은 &lt;code&gt;rmmod&lt;/code&gt; 명령어를 사용하는 것이다. 다음과 같이 uas 모듈을 삭제할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;rmmod uas
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또는 모듈의 &lt;strong&gt;blacklist&lt;/strong&gt;를 만들어서 비활성화하는 방법도 있다. kenel 모듈의 blacklist는 &lt;code&gt;/etc/modeprobe.d&lt;/code&gt;에서 참조하는데 다음과 같이 &lt;code&gt;blacklist.conf&lt;/code&gt; 파일을 만들고 &lt;code&gt;uas&lt;/code&gt;를 blacklist로 등록한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;vi /etc/modprobe.d/blacklist.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;blacklist uas
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;exfat-형식-포맷&quot;&gt;exFAT 형식 포맷&lt;/h2&gt;

&lt;p&gt;이젠 Ubuntu에 USB 외장하드디스크를 연결해서 사용할 수 있는 준비를 모두 마쳤다. 우리는 모든 운영체제에서 Read/Write를 할 수 있게 500G 하드디스크를 &lt;strong&gt;FAT&lt;/strong&gt; 형식으로 포맷을 했는데, FAT 형식은 4G 이상 대용량 파일을 저장할 수 없다는 에러를 만나서 &lt;a href=&quot;http://en.wikipedia.org/wiki/ExFAT&quot;&gt;exFAT&lt;/a&gt; 형식으로 다시 포맷을 했다. Mac OS X (10.9.x) 에서는 NTFS 포멧 형식을 지원하고 있지 않는다. 그리고 Mac OS X에서는 NTFS로 포멧되어진 외장하드디스크는 read only로 마운트가 되어진다. 그래서 우리는 exFAT으로 USB 외장하드디스크를 포맷했다. Mac OS X 에서 USB 외장하드디스크를 포맷하기 위해서는 &lt;a href=&quot;http://en.wikipedia.org/wiki/Disk_Utility&quot;&gt;Disk Utility&lt;/a&gt;를 상용하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cfile6.uf.tistory.com/image/265C774453FD64EB20640A&quot; alt=&quot;exfat&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;usb-외장하드디스크-마운트&quot;&gt;USB 외장하드디스크 마운트&lt;/h2&gt;

&lt;p&gt;exFAT으로 포맷되어진 USB 외장하드디스크를 Ubuntu에 연결한다. 그리고 &lt;code&gt;fdisk -l&lt;/code&gt; 명령어를 실행해보자.
&lt;img src=&quot;http://cfile28.uf.tistory.com/image/260F553953FD64EB223CE9&quot; alt=&quot;fdisk&quot;&gt;&lt;/p&gt;

&lt;p&gt;처음 우리가 USB 외장하드디스크를 연결해서 &lt;code&gt;fdisk -l&lt;/code&gt;을 실행했을 때는 디스크 목록에 외장하드디스크가 나타나지 않았는데 이젠 &lt;code&gt;/dev/sde1&lt;/code&gt; 500G 하드디스크가 목록에 나타나는 것을 볼 수 있다. 우리는 &lt;strong&gt;exFAT&lt;/strong&gt;으로 포맷했는데 Ubuntu에서 인식할 때는 &lt;strong&gt;NTFS&lt;/strong&gt;로 인식이 되는 것 같다.&lt;/p&gt;

&lt;p&gt;우리는 앞에서 &lt;code&gt;usbmount&lt;/code&gt;를 설치해서 USB 외장 하드디스크가 연결되면 자동으로 &lt;code&gt;mount&lt;/code&gt; 되도록 했다. 마운트는 USB가 연결되는 순서대로 &lt;strong&gt;/media/usb순번&lt;/strong&gt;으로 마운트가 된다. 우리는 첫번째로 USB 외장 하드디스크를 연결해서 마운트를 했기 대문에 &lt;code&gt;/mnt/usb0&lt;/code&gt;으로 USB 외장 하드디스크가 마운트가 되었다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cd /media/usb0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;touch README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;작은 연구소나 개인 사무실, 개인이 연구하거나 개발할 때 PC에 Linux 서버를 설치해서 사용하는 경우가 많다. 때로는 운영하고 있던 서버를 업그레이드하거나 데이터를 백업해야하는 일이 발생한다. 요즘은 Cloud 저장소에 데이터를 백업하거나 또는 원격 서버에 백업을 하는 경우가 많지만, 네트워크 제한이나 특정한 이유로 물리적으로 다른 디스크로 데이터를 백업 받아야하는 경우가 종종 발생한다. 예전에는 하드디스크를 &lt;strong&gt;slave&lt;/strong&gt;로  마운트 시켜서 데이터를 백업했지만 최근 USB 외장 하드디스크의 용량이 커지면서 더이상 서버를 뜯어서 하드디스크를 추가로 달아서 백업하지 않고 간단히 USB 외장 하드디스크에 바로 백업할 수 있게 되었다. Linux도 많이 발전하게 되어서 kenel에 다양한 모듈이 지원되면서 간단히 USB를 연결하는 것 만으로 대용량 USB 외장 하드디스크를 바로 사용할 수 있게 되었다. 하지만, Ubuntu에서 외장 하드디스크를 연결하여 사용할 때 버그로 인해서 외장하드 인식이 불가능할 수도 있는데 우리는 &lt;code&gt;rmmod uas&lt;/code&gt;나 &lt;code&gt;blacklist uas&lt;/code&gt;를 사용해서 USB 인식의 문제를 수정했다. 또한 대용량 데이터를 백업할 때는 &lt;strong&gt;exFAT&lt;/strong&gt; 포멧을 사용하면 된다는 것을  살펴보았다. 느린 네트워크 백업이 답답하거나 디스크 풀 백업을 해야할 경우는 이젠 쉽게 USB 외장 하드디스크를 연결해서 백업해보는 것도 해결책 중에 하나라고 생각한다.&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Aug 2014 00:00:00 +0900</pubDate>
        <link>/series/ubuntu/mount-external-harddisk-on-ubuntu.html</link>
        <guid isPermaLink="true">/series/ubuntu/mount-external-harddisk-on-ubuntu.html</guid>
        
        <category>linux</category>
        
        <category>ubuntu</category>
        
        <category>usb</category>
        
        
        <category>ubuntu</category>
        
      </item>
    
      <item>
        <title>Yobi 사용시 Safari 브라우저에서 한글폴더 문제 해결하기</title>
        <description>&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

&lt;p&gt;Safari 브라우저에서 &lt;strong&gt;Yobi&lt;/strong&gt;를 사용할 때 git에 올린 &lt;strong&gt;한글 디렉토리명&lt;/strong&gt;일 경우 디렉토리 내부로 네비게이션이 정상적으로 이루어지지 못하는 문제가 있는데 이 문제를 해결하기 위한 방법을 알아본다.
&amp;lt;!--more--&amp;gt; &lt;/p&gt;

&lt;h2 id=&quot;yobi-와-windows-사용자&quot;&gt;Yobi 와 Windows 사용자&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://yobi.io&quot;&gt;Yobi&lt;/a&gt;를 프로젝트에 도입하고 난 뒤, 이전과 달라진 점은 git 활용도가 높아졌다는 것이다. git는 예전에는 git 명령어 특성상 Windows 사용자보다는 Mac OS X나 Linux 사용자들이 적극 사용했지만, Windows에 git client들이 점점 늘어나면서 Windows 사용자도 늘어나게 되었다.&lt;/p&gt;

&lt;p&gt;우리 연구실에서도 Mac 사용자보다는 Windows 사용자가 많기 때문에 git의 활성화가 처음에는 어려웠지만, Yobi 도입 이후 Windows 사용자도 직관적으로 잘 사용하고 있다. 현재 개발자 뿐만 아니라 디자이너도 함께 git를 잘 사용하고 있는 것을 보면 Yobi가 국내 개발자들에 쉽게 접근할 수 있는 UI를 제공하고 있다는 것을 느낄 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;yobi에서-한글처리&quot;&gt;Yobi에서 한글처리&lt;/h2&gt;

&lt;p&gt;Yobi를 Windows 사용자들이 함께 사용하면서 Linux 계열의 개발자와 협업할 때는 볼 수 없었던 것을 볼 수가 있는데 바로 &lt;strong&gt;한글 폴더/파일명&lt;/strong&gt;이다. Mac이나 Linux를 사용하는 환경이라면 디렉토리명이나 파일명을 한글로 만들 생각은 좀처럼 하기 어렵다. 터미널 인터페이스에서 한글을 입력하는 것 자체가 어색하고 불편하기 때문이다. 반면, Windows는 대부분 디렉토리명으로 분류체계를 만들고 있기 때문에 디렉토리명을 알기 쉽게하기 위해서 &lt;strong&gt;한글명&lt;/strong&gt;으로 만들어 놓는 경우가 많다. 여기에더 &lt;strong&gt;&lt;em&gt;git&lt;/em&gt;&lt;/strong&gt;를 사용하게 되면 저장소에 한글이름이 그대로 적용되어 저장되어져 버리기 때문이다.&lt;/p&gt;

&lt;p&gt;Yobi는 &lt;strong&gt;UTF-8&lt;/strong&gt; 기반으로 운영되어지고 있다. 즉, 소스코드, 운영체제, 웹 서버를 모두 UTF-8으로 맞추게되면 한글이 문제없이 처리되어진다.&lt;/p&gt;

&lt;h2 id=&quot;yobi-사파리-브라우저-버그&quot;&gt;Yobi 사파리 브라우저 버그&lt;/h2&gt;

&lt;p&gt;Yobi 환경을 모두 UTF-8로 설정을 하여 사용하더라도 &lt;strong&gt;Safari&lt;/strong&gt; 브라우저에서 &lt;strong&gt;한글 디렉토리명&lt;/strong&gt;을 클릭하면 URL 인코딩 문제가 발생해 버린다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cfile28.uf.tistory.com/image/27229A4553FAD06816305B&quot; alt=&quot;error&quot;&gt;&lt;/p&gt;

&lt;p&gt;한글이 포함된 URL을 직접 주소창에 넣으면 한글 디렉토리명이 문제 없이 보여지며 디렉토리 내의 파일들이 보여진다. Safari 브라우저를 제외한 나머지 브라우저에서는 Yobi 에 &lt;strong&gt;한글 디렉토리명&lt;/strong&gt;을 클릭해도 정상적으로 보여지는데 Safari 브라우저에서만 &lt;strong&gt;한글 디렉토리명&lt;/strong&gt;을 클릭했을 때 정상적으로 나타나지 않는 버그를 발견했다.&lt;/p&gt;

&lt;h2 id=&quot;partial_view_folder.scala.html&quot;&gt;partial_view_folder.scala.html&lt;/h2&gt;

&lt;p&gt;우리가 지금 발견한 버그는 safari 브라우저에서 한글 디렉토리 명을 클릭했을 때 생기는 문제이다. 저장소의 목록을 보여주는 코드는 yobi 프로젝트의 &lt;code&gt;/app/views/code/partial_view_folder.scala.html&lt;/code&gt; 파일이다. &lt;code&gt;partial_view_folder.scala.html&lt;/code&gt; 파일을 열어보면  &lt;strong&gt;listitem&lt;/strong&gt;을 만드는 코드는 아래와 같다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;... 생략 ...
makeFileItem(file:org.codehaus.jackson.JsonNode, fileName:String, listPath:String) = {
    @defining(routes.CodeApp.codeBrowserWithBranch(project.owner, project.name, URLEncoder.encode(branch, &amp;quot;UTF-8&amp;quot;), listPath).toString()) { filePath =&amp;gt;
    @defining(fieldText(file, &amp;quot;type&amp;quot;)) { fileType =&amp;gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;cb-@listPath@fileName&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;row-fluid listitem&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@getDataPath(listPath, fileName)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;span6 filename&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@getCorrectedPath(filePath, fileName)@if(fileType.eq(&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;quot;)){#&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cb-&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listPath&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@getFileClass(file)&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@fileName&amp;quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fileType&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&amp;quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;quot;)){&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data-type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;folder&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;data-targetPath=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@getDataPath(listPath, fileName)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dynatree-icon vmiddle&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;@fileName
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;span5 commitMsg&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            @Html(getAvatar(file))
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ml5&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@fieldText(file, &amp;quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commitUrl&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@fieldText(file, &amp;quot;msg&amp;quot;)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;span1 commitDate&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@getFileAgoOrDate(file, &amp;quot;createdDate&amp;quot;)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    }
    }
}
...생략...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 코드를 살펴보면 디렉토리명을 선택했을 때, 해당 디렉토리 아래의 파일 목록들을 보여주기 위해서 URL을 이동하기 위해 &lt;code&gt;&amp;lt;a href=&amp;quot;@getCorrectedPath(filePath, fileName)@if(fileType.eq(&amp;quot; folder&amp;quot;)){#cb-@listPath@fileName}&amp;quot;&lt;/code&gt; 와 같이 &lt;code&gt;&amp;lt;a/&amp;gt;&lt;/code&gt; 태그를 사용하고 있다는 것을 알 수 있다. 실제 위 코드가 모드 파싱되어 웹 페이지로 만들어지면 &lt;code&gt;&amp;lt;a href=&amp;quot;/Project1/code/master/카테고리분류&amp;quot;&lt;/code&gt; 이런 식으로 만들어진다.&lt;/p&gt;

&lt;h2 id=&quot;location.href&quot;&gt;location.href&lt;/h2&gt;

&lt;p&gt;Safari 브라우저 버그는 &lt;code&gt;&amp;lt;a/&amp;gt;&lt;/code&gt; 태그의 링크를 클릭하면 인코딩 문제가 발생하고, 주소창에 주소를 그대로 입력하면 정상적으로 보이는 것을 확인했기 때문에 우리는 &lt;code&gt;&amp;lt;a/&amp;gt;&lt;/code&gt; 태크로 주소를 이동하는 것 말고 &lt;code&gt;location.href&lt;/code&gt;로 주소를 변경할 수 있도록 다음과 같이 코드를 변경했다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;@makeFileItem(file:org.codehaus.jackson.JsonNode, fileName:String, listPath:String) = {
    @defining(routes.CodeApp.codeBrowserWithBranch(project.owner, project.name, URLEncoder.encode(branch, &amp;quot;UTF-8&amp;quot;), listPath).toString()) { filePath =&amp;gt;
    @defining(fieldText(file, &amp;quot;type&amp;quot;)) { fileType =&amp;gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;cb-@listPath@fileName&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;row-fluid listitem&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@getDataPath(listPath, fileName)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;span6 filename&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- &amp;lt;a href=&amp;quot;@getCorrectedPath(filePath, fileName)@if(fileType.eq(&amp;quot; folder&amp;quot;)){#cb-@listPath@fileName}&amp;quot; --&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;location.href=&amp;#39;@getCorrectedPath(filePath, fileName)@if(fileType.eq(&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;quot;)){#&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cb-&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;listPath&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&amp;#39;&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@getFileClass(file)&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@fileName&amp;quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fileType&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&amp;quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;quot;)){&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data-type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;folder&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;data-targetPath=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@getDataPath(listPath, fileName)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dynatree-icon vmiddle&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;@fileName
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;span5 commitMsg&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            @Html(getAvatar(file))
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ml5&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@fieldText(file, &amp;quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commitUrl&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@fieldText(file, &amp;quot;msg&amp;quot;)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;span1 commitDate&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;@getFileAgoOrDate(file, &amp;quot;createdDate&amp;quot;)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;한글 디렉토리명을 클릭해서 URL을 이동하는 대신에 &lt;code&gt;location.href&lt;/code&gt;를 사용해서 URL을 이동하게 변경한 이후에 Yobi를 다시 실행하면 다음과 같이 &lt;strong&gt;Safari&lt;/strong&gt; 브라우저에서도 정상적으로 동작하는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cfile2.uf.tistory.com/image/233B8A3553FAD06820E0CF&quot; alt=&quot;success&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;_page.less&quot;&gt;_page.less&lt;/h2&gt;

&lt;p&gt;우리는 위에서 &lt;code&gt;&amp;lt;a href=&amp;quot;&amp;quot;/&amp;gt;&lt;/code&gt; 태그를  &lt;code&gt;location.href&lt;/code&gt; 이벤트로 변경해버렸다. HTML 문서에서는 &lt;code&gt;&amp;lt;a href=&amp;quot;&amp;quot;/&amp;gt;&lt;/code&gt; 태그에 마우스 포인트를 올리면 자동으로 손가락 커서 모양이 나타게 되어 있는데 우리는 태그를 변경했기 때문에 마우스 포인트를 올려도 손가락 커서 모양이 나타나지 않는다. 그래서 우리는 stylesheet를 변경하기로 했다. Yobi는 &lt;a href=&quot;http://lesscss.org/&quot;&gt;less&lt;/a&gt;를 사용해서 dynamic하게 stylesheet를 만들어서 사용하고 있었다. 우리가 이벤트를 만든 &lt;strong&gt;listitem&lt;/strong&gt;의 &lt;strong&gt;filename&lt;/strong&gt; 아래에 있는 &lt;code&gt;&amp;lt;a/&amp;gt;&lt;/code&gt; 태그에 커서모양을 변경하기 위해서 우리는 &lt;code&gt;/app/assets/stylesheet/less/_page.less&lt;/code&gt;를 열어서 다음 스타일 속성을 수정하였다. &lt;code&gt;.listitem .filename a&lt;/code&gt; 속성을 추가했다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;생략&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;depth-&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; depth-&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listhead&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;.listitem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;.commitMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.dynatree-icon&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:before&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;dotted&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ccc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;border-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;생략&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다시 Yobi를 재시작하면 서비스가 로드되면서 수정한 &lt;code&gt;.scala.html&lt;/code&gt; 파일과 &lt;code&gt;.less&lt;/code&gt; 파일이 컴파일되는 것을 확인 할 수 있을 것이다. 서비스가 완벽하게 올라간 이후 Safari 브라우저에서 &lt;strong&gt;한글 디렉토리명&lt;/strong&gt;을 클릭해보면 문제없이 한글 디렉토리가 열리고 내부에 있는 파일 목록들이 보이는 것을 확인할 수 있을 것이다. 현재 Yobi 프로젝트에 &lt;a href=&quot;https://github.com/naver/yobi/pull/773/&quot;&gt;pull request&lt;/a&gt;를 요청한 상태이다. 오픈소스로 운영되고 있는 Yobi의 장점이 아닌가 생각한다. 정확한 문제의 원인은 알 수 없지만 우리가 경험한 내용을 수정해서 프로젝트에 적용할 수 있도록 요청했다. 다른 원인으로부터 발생한 것이라면 contributor들이 또 수정해서 프로젝트에 반영할 것이다. 우선 우리는 Yobi를 사용하여서 소스코드를 관리하는데 &lt;strong&gt;한글문제&lt;/strong&gt;로 어려움을 가졌고 사내에서 수정해서 사용하게 되어 pull request를 요청했다. 아마 다음 버전에는 우리가 제시한 방법이 아니더라도 &lt;strong&gt;Safari 브라우저에서 한글 디렉토리명 문제&lt;/strong&gt;에 대해서 해결이 되어서 나올 것으로 기대가 된다.&lt;/p&gt;

&lt;h2 id=&quot;연구원-소개&quot;&gt;연구원 소개&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;작성자 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;송성광&lt;/a&gt; 개발 연구원&lt;/li&gt;
&lt;li&gt;이메일 : &lt;a href=&quot;mailto:saltfactory@gmail.com&quot;&gt;saltfactory@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;트위터 : &lt;a href=&quot;https://twitter.com/saltfactory&quot;&gt;@saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;페이스북 : &lt;a href=&quot;https://facebook.com/salthub&quot;&gt;https://facebook.com/salthub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;연구소 : &lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설연구소&lt;/li&gt;
&lt;li&gt;연구실 : &lt;a href=&quot;http://dblab.changwon.ac.kr&quot;&gt;창원대학교 데이터베이스 연구실&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 25 Aug 2014 00:00:00 +0900</pubDate>
        <link>/series/git/korean-foldername-in-yobi.html</link>
        <guid isPermaLink="true">/series/git/korean-foldername-in-yobi.html</guid>
        
        <category>git</category>
        
        <category>yobi</category>
        
        <category>safari</category>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Yobi와 Apache 연동시 encoded slash 문제 RewriteRule로 해결하기</title>
        <description>&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

&lt;p&gt;Apache는 기본으로 URLEncoding을 하게 되어 있다. 이런 이유 때문에 특수 문자열을 함번 인코딩을해서 &lt;strong&gt;%&lt;/strong&gt;와 같이 변환이 된 URL을 다시 요청하게 되면 자동으로 &lt;strong&gt;%&lt;/strong&gt;에 대한 문자를 인코딩을 하는 문제가 발생한다. Yobi와 Apache를 연동할 때 Yobi에서 변경한 인코딩 URL을 중복으로 인코딩하지 않게 하는 방법에 대해서 소개한다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;yobi&quot;&gt;Yobi&lt;/h2&gt;

&lt;p&gt;우리 연구소에서는 &lt;a href=&quot;https://about.gitlab.com/&quot;&gt;gitlab&lt;/a&gt;을 사용하여 소스코드를 관리하고 있다가 Naver Lab에서 만든 &lt;a href=&quot;https://github.com/naver/yobi&quot;&gt;Yobi&lt;/a&gt;로 프로젝트와 소스를 관리하기로 결정하고 마이그레이션 하였다. Yobi는 우리가 흔히 알고 있는 &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;와 같이 git를 사용하여 소스를 관리할 때 웹에서 협업을 할 수 있는 &lt;a href=&quot;http://en.wikipedia.org/wiki/Software_configuration_management&quot;&gt;SCM&lt;/a&gt;이다. Yobi는 &lt;a href=&quot;http://www.scala-lang.org/&quot;&gt;Scala&lt;/a&gt; 기반의 &lt;a href=&quot;https://www.playframework.com/&quot;&gt;Play&lt;/a&gt; framework으로 만들어졌다. 기존의 gitlab은 Ruby기반으로 만들어져 있고 설정이 매우 까다로웠다. 하지만 Yobi는 서버에 JDK 7이 설치되어 있으면 간단하게 설치할 수 있는 장점이 있다. 더구나 우리는 HTTP를 지원하는 git 시스템을 원했기 때문에 Yobi는 우리의 필요조건을 모두 충족시켜 주었다.&lt;/p&gt;

&lt;h2 id=&quot;yobi-서버-실행&quot;&gt;Yobi 서버 실행&lt;/h2&gt;

&lt;p&gt;Yobi는 &lt;a href=&quot;https://github.com/naver/yobi&quot;&gt;GitHub&lt;/a&gt;에서 &lt;code&gt;clone&lt;/code&gt;을 하고 &lt;code&gt;play&lt;/code&gt;를 실행시키면 자동으로 필요한 패키지들을 자동으로 다운받고 서버가 실행된다. 시작하는 방법도 아래와 같이 메모리옵션을 지정하고 &lt;code&gt;play&lt;/code&gt;를 실행시켜면 된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;_JAVA_OPTIONS=&amp;quot;-Xmx2048m -Xms1024m&amp;quot; play &amp;quot;start -DapplyEvolutions.default=true -Dhttp.port=9000&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;yobi와-apache-mod_proxy&quot;&gt;Yobi와 Apache mod_proxy&lt;/h2&gt;

&lt;p&gt;Yobi는 Play framework를 사용하고 있기 때문에 자체 웹 서버를 동작시킬 수 있다. 만약 &lt;strong&gt;80&lt;/strong&gt;번 포트를 사용하고 싶으면 Play 서버를 시작할 때 포트번호를 80번으로 지정하면 &lt;code&gt;http://&lt;/code&gt;로 특별한 설정없이 http 서비스를 시작할 수 있다. 하지만 우리 연구실에서는 Front Web Server로 Apache를 사용하고 있었기 때문에 Apache와 Yobi를 연동하는 작업을 해야했다. 우리는 Yobi의 서버를 뒷단에서 기본포트로 서비스를 하고 외부에서 접근할 때 Apache를 통해서 들어가도록 설정했다.&lt;/p&gt;

&lt;p&gt;처음 우리는 단순히 apache의 &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_proxy.html&quot;&gt;mod_proxy&lt;/a&gt;를 사용해서 Yobi 서버로 요청이 전달되게 했다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ProxyRequests Off
ProxyVia Off
ProxyPreserveHost On

ProxyPass / http://127.0.0.1:9000/
ProxyPassReverse / http://127.0.0.1:9000/

&amp;lt;Proxy *&amp;gt;
    Order deny,allow
    Allow from all
&amp;lt;/Proxy&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 Apache로 proxy를 사용할 때 &lt;strong&gt;encoded slash&lt;/strong&gt; 문제가 발생한다는 것을 알게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;encoded-slash-문제&quot;&gt;Encoded slash 문제&lt;/h2&gt;

&lt;p&gt;Yobi는 branch를 선택하면 JavaScript로 branch를 URL로 표현할 때 &lt;code&gt;encodedURL()&lt;/code&gt;를 사용해서 요청한다. 만약 &lt;strong&gt;DemoApp&lt;/strong&gt;이라는 프로젝트에 &lt;strong&gt;1.0-dev&lt;/strong&gt;라는 branch가 있을 경우 Yobi는 이것을 표현하기 위해서 &lt;code&gt;http://%{HTTP_HOST}:9000/DemoApp/code/refs%2Fheads%2F2.0-dev&lt;/code&gt; 라는 URL 요청을 하게 되는 것이다.&lt;/p&gt;

&lt;p&gt;만약 Apache를 사용하지 않고 Play만 사용해서 서비스를 한다면 이 URL은 문제가 되지 않는다. 하지만 Apache를 사용하게 되면 자동으로 URL 인코딩을 지원하기 때문에 이중 인코딩 문제가 발생한다. 다시 말해서 &lt;code&gt;%2F&lt;/code&gt;로 인코딩 된 URL을 Play 서버로 넘기기 위해서는 &lt;code&gt;%252F&lt;/code&gt;인코딩으로 요청을 해야하는 것이다.&lt;/p&gt;

&lt;p&gt;Yobi에서 정상적인 URL 요청은 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;http://%{HTTP_HOST}:9000/DemoApp/code/refs%2Fheads%2F2.0-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 요청을 Apache를 사용해서 URL 요청을 한다고 하면 아래와 같이 요청하게 될 것이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;https://%{HTTP_HOST}:9000/DemoApp/code/refs%2Fheads%2F2.0-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 이렇게 요청하면 페이지를 찾을 수 없다고 &lt;strong&gt;404 Not found&lt;/strong&gt; 에러를 보게 될 것이다. 이유는 Apache가 가지고 있는 자체 URL encoder 때문이다. 그래서 Yobi에서 &lt;code&gt;%2F&lt;/code&gt;를 이해하기 위해서 다음과 같이 &lt;code&gt;%252F&lt;/code&gt;로 요청을 해야한다. 왜냐면 Apache에 &lt;code&gt;%2F&lt;/code&gt;라고 입력한다고 해도 Apache 내부에서는 이것을 자동올 &lt;code&gt;/&lt;/code&gt; 인식해버리기 때문에 proxy로 넘기면 encoded URL이 넘어가지 않기 때문이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;https://%{HTTP_HOST}:9000/DemoApp/code/refs%252Fheads%252F2.0-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하기 위해서는 Yobi에서 URL 요청이 들어오는 것을 디코딩하는 소스 코드를 분석해서 디코딩하는 소스를 변경해야한다. 우리는 Naver에서 업데이트하는 소스코드를 &lt;code&gt;fetch&lt;/code&gt;와 &lt;code&gt;pull&lt;/code&gt;을 하는데 변경없이 적용하기 위해서 소스코드를 건드리지 않고 싶었다. 그래서 우리는 Apache의 &lt;strong&gt;mod_proxy&lt;/strong&gt;를 사용하지 않고 &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_rewrite.html&quot;&gt;mode_rewrite&lt;/a&gt;를 사용하기로 결정했다.&lt;/p&gt;

&lt;h2 id=&quot;yobi와-apache-mod_rewrite&quot;&gt;Yobi와 Apache mod_rewrite&lt;/h2&gt;

&lt;p&gt;Apache의 &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_rewrite.html&quot;&gt;mod_rewrite&lt;/a&gt; URL 요청이 들어오면 특별한 형태로 URL요청을 변경하는 모듈이다.
우리는 모든 요청을 &lt;code&gt;https&lt;/code&gt; 요청을 &lt;code&gt;http://%{HTTP_HOST}:9000&lt;/code&gt;으로 rewrite 시키도록 했다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;/refs/heads/ 요청이 들어오면 우리는 이것을 Yobi로 넘길 때 encoded URL로 변경하도록 /refs%2Fhead%2 로 URL을 rewrite 하도록 했다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;AllowEncodedSlashes On

RewriteEngine On
RewriteCond %{HTTPS} on
RewriteRule ^(.*)/refs/heads/(.*)$ http://%{HTTP_HOST}:9000$1/refs\%2Fheads\%2F$2 [P,L,NE]
RewriteRule .* http://%{HTTP_HOST}:9000%{REQUEST_URI} [P,L,NE]

RewriteLogLevel 9
RewriteLog ${APACHE_LOG_DIR}/servername-rewrite.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;먼저 우리는 URL의 요청에 포함되어 있는 encoded slash를 받기 위해서 &lt;strong&gt;AllowEncodedSlashes&lt;/strong&gt;를 &lt;strong&gt;On&lt;/strong&gt;으로 설정했다. 그리고 URL rewrite가 바로 되는지 확인하기 위해서 Apache의 mode_rewrite 모듈의 로깅을 하기 위해서 &lt;strong&gt;RewriteLog&lt;/strong&gt;를 설정했다. &lt;strong&gt;RewriteLogLevle&lt;/strong&gt;을 지정해서 들어오는 모든 요청을 디버깅하면서 &lt;strong&gt;RewriteRule&lt;/strong&gt;의 규칙을 설정했다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;RewriteRule ^(.*)/refs/heads/(.*)$ http://%{HTTP_HOST}:9000$1/refs\%2Fheads\%2F$2 [P,L,NE]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우리는 &lt;strong&gt;RewriteRule&lt;/strong&gt;에 옵션을 다음과 같이 사용했다.
- &lt;strong&gt;P&lt;/strong&gt; : proxy (이 옵션을 사용하지 않으면 proxy 되는 것이 아니라 location이 변경되어 버린다)
- &lt;strong&gt;L&lt;/strong&gt; : last
- &lt;strong&gt;NE&lt;/strong&gt; : no escape&lt;/p&gt;

&lt;p&gt;우리가 적용한 &lt;strong&gt;RewriteRule&lt;/strong&gt;이 두가지 이다. 하나는 Yobi의 branch요청을 하는 encoded slash를 처리하기 위한 것과 나머지는 모두 Request를 그대로 Yobi로 rewrite 하게 해 두었다.&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;우리는 보안문제로 HTTPS를 사용하고 있고 front web server로 Apache를 사용하고 있었기 때문에 Yobi를 내부에서 요청을 받을 수 있게 Apache의 &lt;strong&gt;mod_proxy&lt;/strong&gt;를 사용했다. 하지만 Yobi가 branch를 선택할 때 JavaScript의 &lt;code&gt;encodedURL()&lt;/code&gt;를 URL로 요청하는데 Apache의 URL encoder때문에 proxy가 될 때 정상적으로 동작하지 않는 것을 발견했다. 그래서 우리는 &lt;strong&gt;mod_rewrite&lt;/strong&gt;로 변경했다. &lt;strong&gt;RewriteRule&lt;/strong&gt;은 정규표현식을 사용해서 &lt;code&gt;%2F&lt;/code&gt;를 처리할 수 있게 rewrite를 규칙을 만들었다. Apache의 &lt;strong&gt;mod_rewrite&lt;/strong&gt;는 다양한 규칙을 사용해서 우리가 원하는 URL로 변경시킬 수 있다. 우리는 단순히 Yobi의 branch가 만드는 encoded slash를 처리했지만 mod_rewrite를 사용하면 어떠한 URL로 원하는 URL로 변경하여 요청할 수 있도록 할 수 있다. 소스코드를 변경하지 않고 웹 서버단에서 다양한 처리를 할 수 있도록 Apache는 파워풀한 URL rewrite 기능을 가지고 있다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_proxy.html&quot;&gt;http://httpd.apache.org/docs/current/mod/mod_proxy.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_rewrite.html&quot;&gt;http://httpd.apache.org/docs/current/mod/mod_rewrite.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;연구원-소개&quot;&gt;연구원 소개&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;작성자 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;송성광&lt;/a&gt; 개발 연구원&lt;/li&gt;
&lt;li&gt;이메일 : &lt;a href=&quot;mailto:saltfactory@gmail.com&quot;&gt;saltfactory@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;트위터 : &lt;a href=&quot;https://twitter.com/saltfactory&quot;&gt;@saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;페이스북 : &lt;a href=&quot;https://facebook.com/salthub&quot;&gt;https://facebook.com/salthub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;연구소 : &lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설연구소&lt;/li&gt;
&lt;li&gt;연구실 : &lt;a href=&quot;http://dblab.changwon.ac.kr&quot;&gt;창원대학교 데이터베이스 연구실&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 14 Aug 2014 00:00:00 +0900</pubDate>
        <link>/series/git/solve-redirect-encoded-slash-in-apache.html</link>
        <guid isPermaLink="true">/series/git/solve-redirect-encoded-slash-in-apache.html</guid>
        
        <category>git</category>
        
        <category>yobi</category>
        
        <category>safari</category>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Android 앱 개발할 때 필요없는 로그 보이지 않게 하기</title>
        <description>&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

&lt;p&gt;Android를 개발할 때 IDE에서는 Android 디바이스의 모든 로그가 출력이 된다. filter를 어떻게 적용하는가에 따라서 현개 개발하고 있는 디바이스의 로그를 정확하고 간결하게 볼 수 있는데 이 포스트에서 Android를 개발하기 위해 genymotion을 사용할 때 필요없는 로그를 보이지 않게 하는 방법에 대해 소개한다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;logcat&quot;&gt;LogCat&lt;/h2&gt;

&lt;p&gt;Android &lt;a href=&quot;http://developer.android.com/tools/help/logcat.html&quot;&gt;LogCat&lt;/a&gt;은 안드로이드 앱을 개발할 때 system output으로 출력되는 로그 메카니즘이다. LogCat을 잘 다루지 않게 되면 디바이스에 출력되는 여러가지 로깅을 개발 할 때 함께 봐야하는 불편함이 생긴다. 그래서 안드로이드 앱을 개발할 때 다양한 Logging 방법을 문서로 제공하고 있다. (&lt;a href=&quot;http://developer.android.com/tools/debugging/debugging-log.html&quot;&gt;http://developer.android.com/tools/debugging/debugging-log.html&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;log-객체&quot;&gt;Log 객체&lt;/h2&gt;

&lt;p&gt;안드로이드 앱을 개발할 때 가장 많이 사용하는 Logging 클래스는 &lt;a href=&quot;http://developer.android.com/tools/debugging/debugging-log.html#logClass&quot;&gt;Log&lt;/a&gt; 이다. Log 클래스는 LogCat에 메세지를 출력하는 android의 utility 클래스이고 다음과 같은 메소드를 사용할 수 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;v&lt;/strong&gt;(String, String) : verbose&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;d&lt;/strong&gt;(String, String) : debug&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;i&lt;/strong&gt;(String, String) : information&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;w&lt;/strong&gt;(String, String) : wranning&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;e&lt;/strong&gt;(String, STring) : error&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예를 들면 다음과 같이 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Log.i(&amp;quot;MyActivity&amp;quot;, &amp;quot;MyClass.getView() — get item number &amp;quot; + position);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 Log 객체를 사용하면 다음과 같이 LogCat에 출력이 된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;I/MyActivity( 1557): MyClass.getView() — get item number 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;log-foramt&quot;&gt;Log Foramt&lt;/h2&gt;

&lt;p&gt;LogCat은 다양한 출력 포멧을 지원한다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;brief&lt;/strong&gt; : priority/tag 그리고 PID(프로세스 ID)를 출력한다.(default)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;process&lt;/strong&gt; : PID만 출력&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tag&lt;/strong&gt; : priority/tag만 출력&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;raw&lt;/strong&gt; : 다른 metadata field 없이 raw log message만 출력&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;time&lt;/strong&gt; : date, invocation time, PID 출력&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;threadtime&lt;/strong&gt; : date, invocation time, priority, tag, PID, TID(thread ID)를 출력&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;long&lt;/strong&gt; : 모든 metadata field를 blank로 분리해서 출력&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사용방법은 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[adb] logcat [-v &amp;lt;format&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;logcat-filter-설정&quot;&gt;LogCat filter 설정&lt;/h2&gt;

&lt;p&gt;LogCat은 디바이스의 전체 시스템 출력을 보여주기 때문에 우리는 LogCat이 지원하고 있는 &lt;strong&gt;filter&lt;/strong&gt;를 잘 사용해야 한다. 수 많은 로깅중에 warnning 메세지를 filter하여 보고 싶을 경우는 다음과 같이 한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;adb logcat *:W
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;filter로 사용할 수 있는 priority 옵션은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;V&lt;/strong&gt; : verbose (lowest priority)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;D&lt;/strong&gt; : debug&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I&lt;/strong&gt; : info&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;W&lt;/strong&gt; : warnning&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;E&lt;/strong&gt; : error&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;F&lt;/strong&gt; : fetal&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt; : silent (highest priority, on which nothing is ever printed)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정규표현식-사용&quot;&gt;정규표현식 사용&lt;/h2&gt;

&lt;p&gt;LogCat의 filter는 옵션으로 정규표현식을 사용해서 보고 싶은 내용만 걸러서 볼 수도 있다. 우리가 프로젝트에서 &lt;a href=&quot;http://www.genymotion.com/&quot;&gt;genymotion&lt;/a&gt;을 도입했다. genymotion은 그래픽 가속기를 사용해서 기존의 Android emulator의 느린 속도를 보완해서 빠르게 디버깅을 할 수 있는 방법을 제공해준다. genymotion에 대해서는 다음 포스팅에서 자세하게 소개하겠다.&lt;/p&gt;

&lt;p&gt;genymotion을 사용할 때 LogCat에서는 GPU에 대한 에러가 LogCat에 출력이 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cfile6.uf.tistory.com/image/26046D4153EAF250118695&quot; alt=&quot;eglCodecCommon error&quot;&gt;&lt;/p&gt;

&lt;p&gt;이렇게 우리가 프로그램에 포함되지 않은 로깅이 디바이스의 문제로 수없이 많이 발생하기 때문에 정작 우리가 개발하면서 보고 싶은 로그를 스크롤을 하면서 찾아서 확인해야하는 불편함이 있다. 그래서 우리는 불필요한 genymotion의 GPU에 관련된 에러를 모두 제거하고 순수하게 우리가 남기고 싶은 로그만 보고 싶었다.&lt;/p&gt;

&lt;p&gt;그래서 우리는 다음과 같이 LogCat에 정규 표현식 filter를 사용했다. 우리는 IntelliJ(Android Studio)를 이용해서 Android를 개발하고 있기 때문에 IntelliJ에서 제공하는 인터페이스로 LogCat의 filter를 적용했다.&lt;/p&gt;

&lt;p&gt;genymotion을 사용하여 앱을 실행시키면 GPU에 관련된 에러가 포함되는데 TAG에는 &lt;strong&gt;eglCodecCommon&lt;/strong&gt;, &lt;strong&gt;OpenGLRender&lt;/strong&gt; 그리고 &lt;strong&gt;EGL_genymotion&lt;/strong&gt;가 포함된 에러가 출력이 되고 있다. 그리고 message에 &lt;strong&gt;GL_INVALID_OPERATION&lt;/strong&gt; 에러가 포함이 되어 있기 때문에 다음과 같이 filter를 적용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cfile26.uf.tistory.com/image/2272B34253EAF24F130B75&quot; alt=&quot;exclude filter&quot;&gt;&lt;/p&gt;

&lt;p&gt;이렇게 LogCat에 정규 표현식을 적용하면 노이즈로 포함되어있는 필요없는 로그를 모두 제거하고 우리에게 필요한 정보만 LogCat으로 출력되는 것을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cfile25.uf.tistory.com/image/2276CB4253EAF2500C0600&quot; alt=&quot;remove exclude&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;LogCat은 Android 앱을 개발할 때 아주 중요한 자료가 된다. 그런데 LogCat은 system logging 메카니즘으로 우리가 출력하고 싶은 메세지 외에도 우리가 필요하지 않는 로그도 함께 출력이 된다. 이럴 때 우리는 LogCat의 filter 기능을 잘 사용하면 우리가 필요한 정보만 출력시켜 개발할 때 편리하게 진행할 수 있다. LogCat의 priority와 tag만을 사용해서 출력하는 것 이외에도 &lt;strong&gt;정규표현식&lt;/strong&gt;을 이용해서 필요없는 메세지를 보이지 않게 하거나 필요한 메세지만 출력할 수도 있다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.android.com/tools/debugging/debugging-log.html&quot;&gt;http://developer.android.com/tools/debugging/debugging-log.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.android.com/tools/help/logcat.html&quot;&gt;http://developer.android.com/tools/help/logcat.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;연구원-소개&quot;&gt;연구원 소개&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;작성자 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;송성광&lt;/a&gt; 개발 연구원&lt;/li&gt;
&lt;li&gt;이메일 : &lt;a href=&quot;mailto:saltfactory@gmail.com&quot;&gt;saltfactory@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;트위터 : &lt;a href=&quot;https://twitter.com/saltfactory&quot;&gt;@saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;페이스북 : &lt;a href=&quot;https://facebook.com/salthub&quot;&gt;https://facebook.com/salthub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;연구소 : &lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설연구소&lt;/li&gt;
&lt;li&gt;연구실 : &lt;a href=&quot;http://dblab.changwon.ac.kr&quot;&gt;창원대학교 데이터베이스 연구실&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 13 Aug 2014 00:00:00 +0900</pubDate>
        <link>/series/android/exclude-gpu-error-when-using-genymotion.html</link>
        <guid isPermaLink="true">/series/android/exclude-gpu-error-when-using-genymotion.html</guid>
        
        <category>android</category>
        
        <category>genymotion</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>Jekyll을 사용하여 GitHub Pages 만들기</title>
        <description>&lt;h2 id=&quot;서론&quot;&gt;서론&lt;/h2&gt;

&lt;p&gt;GitHub는 git 호스팅 서비스 외 다양한 개발 환경을 제공하고 있다. GitHub는 소셜 코딩 환경 뿐만아니라 프로젝트의 사이트를 만들 수 있는 기능을 제공하는데
&lt;strong&gt;Github Pages&lt;/strong&gt;를 이용하여 Markdown 파일을 사용하여 개인 및 프로젝트 사이트를 운영할 수 있다. 이 포스트에서는 GitHub Pages를 이용하는 방법을 소개한다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;github-pages&quot;&gt;GitHub Pages&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;는 github의 프로젝트를 만들 수 있게 github에서 제공하고 있는 서비스이다. 사이트를 만들기 위해서 서버를 설치하고 웹서버 환경을 구축하지 않고도 github에 웹 리소스를 리파지토리에 &lt;code&gt;git push&lt;/code&gt; 하는 것 만으로 웹 사이트를 만들 수 있다. 이 것은 소스코드만 보이는 GitHub의 Reposity를 보여주는 대신 프로젝트 사이트를 만들기에 편리하다.    웹 개발자라면 한번쯤 방문한 &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstra&lt;/a&gt; 사이트 역시 GitHub page로 만들어진 것이다. 프로젝트 리파지토리에 &lt;code&gt;gh-pages&lt;/code&gt; 브렌치를 만들고 &lt;code&gt;index.html&lt;/code&gt; 파일을 넣는 것 만으로도 프로젝트 사이트를 만들 수 있으니 정말 편리하다. GitHub Pages를 생성하는 방법은 &lt;a href=&quot;https://help.github.com/articles/user-organization-and-project-pages&quot;&gt;User, Organization, and Project Pages&lt;/a&gt;를 살펴보면 된다.&lt;/p&gt;

&lt;p&gt;GitHub page를 생성하는 방법은 &lt;strong&gt;&lt;em&gt;gh-pages&lt;/em&gt;&lt;/strong&gt; branch에 &lt;code&gt;index.html&lt;/code&gt; 파일을 &lt;code&gt;git push&lt;/code&gt; 하는 것 만으로도 만들 수 있고, 다른 static website generator framework를 사용해도 된다. GitHub에서는 공식적인 Database를 지원하고 있지 않기 때문에 static website(HTML 파일)을 사용해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;github-계정-페이지&quot;&gt;GitHub 계정 페이지&lt;/h2&gt;

&lt;p&gt;GitHub는 프로젝트 페이지 말고도 GitHub Account Page를 만들 수 있다. 다시 말해서 GitHub의 계정이 &lt;strong&gt;&lt;em&gt;saltfactory&lt;/em&gt;&lt;/strong&gt; 라고 한다면 &lt;a href=&quot;http://saltfactory.github.io&quot;&gt;http://saltfactory.github.io&lt;/a&gt; 라는 개인 페이지를 만들 수 있는 것이다. 프로젝트 페이지와 달리 계정 페이지는 &lt;strong&gt;&lt;em&gt;gh-pages&lt;/em&gt;&lt;/strong&gt; branch를 사용하는 것이 아니라 &lt;strong&gt;&lt;em&gt;master&lt;/em&gt;&lt;/strong&gt; branch를 사용한다. 우리는 이번 포스팅에서 개인 페이지를 만드는 방법을 살펴볼 것이다. 계정 페이지를 만들기 위해서는 GitHub에 새로운 리파지토리를 생성해야한다.&lt;/p&gt;

&lt;h3 id=&quot;repository-생성&quot;&gt;Repository 생성&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;계정 페이지는 반드시 &lt;strong&gt;&lt;em&gt;{GitHub의 계정}&lt;/em&gt;&lt;/strong&gt;.github.io 라는 이름으로 만들어야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다시 말해서 계정이 &lt;strong&gt;&lt;em&gt;saltfactory&lt;/em&gt;&lt;/strong&gt;라면 리파지토리 이름을 &lt;strong&gt;&lt;em&gt;saltfactory.github.io&lt;/em&gt;&lt;/strong&gt; 라고 만든다. 그러면 &lt;a href=&quot;https://github.com/saltfactory/saltfactory.github.io&quot;&gt;https://github.com/saltfactory/saltfactory.github.io&lt;/a&gt; 과 같이 GitHub에 리파지토리가 생성이 된다.&lt;/p&gt;

&lt;p&gt;현재는 리파지토리가 비어져 있을 것이다. 이것을 이젠 내 컴퓨터에 &lt;code&gt;clone&lt;/code&gt;을 한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;clone https://github.com/saltfactory/saltfactory.github.io.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;jekyll&quot;&gt;Jekyll&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://wolfslittlestore.be/wp-content/uploads/2013/07/jekyll.png&quot; alt=&quot;jekyll&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;은 static websites 생성 프레임워크이다. &lt;code&gt;Ruby&lt;/code&gt;로 만들어진 이 것은 &lt;strong&gt;Markdown&lt;/strong&gt; 파일을 &lt;code&gt;_posts&lt;/code&gt; 디렉토리에 생성하는 것 만으로 멋진 static website를 만들어준다. Markdown을 사용하는 개발자에게 반가운 이야기일 것이다. 우리도 Markdown을 표준 document format으로 정하고 난 뒤에 Jekyll을 사용해서 Pages를 만들고 기존의 블로그를 이전하고 있다.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-설치&quot;&gt;Jekyll 설치&lt;/h3&gt;

&lt;p&gt;우선 &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;가 설치되어 있어야 한다. Ruby는 다양한 버전이 존재하는데 의존성 문제를 해결하기 위해서 &lt;a href=&quot;https://rvm.io/&quot;&gt;RVM(Ruby Version Manager)&lt;/a&gt;을 함께 설치한다. 이 블로그에서도 RVM에 대한 포스팅이 있는데 설치하는데 문제가 발생하면  &lt;a href=&quot;http://blog.saltfactory.net/search/rvm&quot;&gt;http://blog.saltfactory.net/search/rvm&lt;/a&gt; 의 글 들을 살펴보면 도움이 될 것이다.&lt;/p&gt;

&lt;h3 id=&quot;rvm-설치&quot;&gt;RVM 설치&lt;/h3&gt;

&lt;p&gt;RVM 설치는 아래와 간단히 설치할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;curl -sSL https://get.rvm.io | bash -s stable --ruby
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;ruby-2.1.1-설치&quot;&gt;Ruby 2.1.1 설치&lt;/h3&gt;

&lt;p&gt;Mac OS X에는 &lt;strong&gt;&lt;em&gt;ruby 1.9.3&lt;/em&gt;&lt;/strong&gt; 버전이 기본적으로 설치되어 있다. 하지만 GitHub에서 사용하는 Ruby 버전은 &lt;strong&gt;&lt;em&gt;ruby 2.1.1&lt;/em&gt;&lt;/strong&gt; 이다. RVM이 설치되면 Rubyㄹㄹ 설치한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;rvm install 2.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 기존의 &lt;strong&gt;&lt;em&gt;ruby 1.9.3&lt;/em&gt;&lt;/strong&gt;을 사용하는 것이 아니라 &lt;strong&gt;&lt;em&gt;ruby 2.1.1&lt;/em&gt;&lt;/strong&gt;을 기본으로 사용하기 위해 이것을 디폴트로 지정한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;rvm --default use 2.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;gemfile-생성&quot;&gt;Gemfile 생성&lt;/h3&gt;

&lt;p&gt;우리가 위에서 &lt;code&gt;clone&lt;/code&gt;한 &lt;code&gt;saltfactory.github.io&lt;/code&gt; 디렉토리로 이동한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cd saltfactory.github.io/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;지금부터 우리는 Jekyll을 사용해서 계정 페이지를 만들기 위해 필요한 라이브러리들을 설치할 것이다. Node.js가 &lt;strong&gt;&lt;em&gt;npm&lt;/em&gt;&lt;/strong&gt;이 있는 것 처럼 Ruby는 &lt;a href=&quot;https://rubygems.org/&quot;&gt;gem&lt;/a&gt;이 있다. 필요한 라이브러리들을 &lt;strong&gt;&lt;em&gt;Gemfile&lt;/em&gt;&lt;/strong&gt; 안에 작성하고 &lt;code&gt;bundle install&lt;/code&gt; 이라는 명령어로 필요한 라이브러리들을 한번에 설치할 수 있다.&lt;/p&gt;

&lt;p&gt;GitHub는 Jekyll을 사용하기 위한 &lt;a href=&quot;https://pages.github.com/versions/&quot;&gt;의존성 버전&lt;/a&gt;을 업데이트하여 알려주고 있다.&lt;/p&gt;

&lt;p&gt;우리가 설치할 때만 해도 아래와 같이 &lt;strong&gt;&lt;em&gt;ruby 2.1.1&lt;/em&gt;&lt;/strong&gt; 버전에 &lt;strong&gt;&lt;em&gt;jekyll 1.5.1&lt;/em&gt;&lt;/strong&gt; 버전을 사용했다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://rubygems.org&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1.5.1&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;kramdown&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1.3.1&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;liquid&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2.5.5&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;maruku&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.7.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rdiscount&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2.1.7&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;RedCloth&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;4.2.9&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jemoji&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.1.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-mentions&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.0.9&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-redirect-from&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.3.1&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-sitemap&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.3.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;github-pages&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;20&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;오늘 확인 했을 때 다음과 같이 버전이 업그레이드 되었고 더 많은 라이브러리가 추가 되었다. 아래 내용을 &lt;code&gt;Gemfile&lt;/code&gt;에 입력하고 저장한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://rubygems.org&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2.2.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-coffeescript&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1.0.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-sass-converter&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1.2.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;kramdown&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1.3.1&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;liquid&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2.6.1&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;maruku&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.7.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rdiscount&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2.1.7&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;redcarpet&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;3.1.2&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;RedCloth&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;4.2.9&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pygments.rb&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.6.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jemoji&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.3.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-mentions&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.1.3&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-redirect-from&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.4.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-sitemap&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.5.1&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;github-pages&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;22&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Gemfile을 저장하고 나면 필요한 라이브러리들을 설치한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;기존에는 &lt;a href=&quot;http://nokogiri.org/&quot;&gt;nokogiri&lt;/a&gt;를 사용하지 않았는데 이번 GitHub pages dependency versions에서는 nokogiri가 의존성이 있는 것으로 확인되었다. 만약 다음과 같이 에러가 발생한다면 nokogiri가 XML 라이브러리가 필요해서 생기는 문제이다.
&lt;img src=&quot;http://cfile3.uf.tistory.com/image/22399C4553E4867B2D006F&quot; alt=&quot;nokogiri install error&quot;&gt;&lt;/p&gt;

&lt;p&gt;이 문제를 만나게 되면 &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;를 사용해서 XML C 라이브러인 &lt;strong&gt;&lt;em&gt;libiconv&lt;/em&gt;&lt;/strong&gt;를 설치한다. homebrew에서 libiconv를 찾아보자.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;brew search libiconv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;만약 아래와 같이 libiconv를 찾을 수 없다면 메세지가 나오면 Homebrew의 저장소를 추가해야한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Apple distributes libiconv with OS X, you can find it in /usr/lib.
Some build scripts fail to detect it correctly, please check existing
formulae for solutions.
homebrew/dupes/libiconv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;brew tap homebrew/dupes/libiconv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 &lt;code&gt;brew tap&lt;/code&gt;을 하면 새로운 리파지토리가 추가되는 것을 확인할 수 있을 것이다. 이제 libiconv가 설치가 될 것이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;brew install libiconv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;마지막으로 nokogiri를 다시 설치한다. 다음과 같이 nokogiri가 정상적으로 설치가 되는 것을 확인할 수 있다.
&lt;img src=&quot;http://cfile23.uf.tistory.com/image/26306D3353E4867B0506FC&quot; alt=&quot;nokogiri installed&quot;&gt;&lt;/p&gt;

&lt;p&gt;이제 Jekyll을 사용할 모든 준비가 끝났다.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-생성&quot;&gt;Jekyll 생성&lt;/h2&gt;

&lt;p&gt;이제 터미널에서 &lt;code&gt;jekyll&lt;/code&gt; 명령어를 사용할 수 있다. 현재 우리는 GitHub에서 &lt;code&gt;clone&lt;/code&gt;한 &lt;code&gt;saltfactory.github.io/&lt;/code&gt; 디렉토리 안에 있다. 여기에 우리는 jekyll을 추가할 것이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;jekyll new . --force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 jekyll을 새롭게 생성하면 디렉토리 안에 다음과 같은 파일들이 생성이 될 것이다.
&lt;img src=&quot;http://cfile3.uf.tistory.com/image/232C903C53E4867B151368&quot; alt=&quot;after jekyll new&quot;&gt;&lt;/p&gt;

&lt;p&gt;만약  다음과 같이 &lt;strong&gt;&lt;em&gt;LSI&lt;/em&gt;&lt;/strong&gt;에 대한 경고가 나오면 다음과 같이 &lt;a href=&quot;http://www.gnu.org/software/gsl/&quot;&gt;GSL&lt;/a&gt;을 설치한다. 이것은 C 연산 라이브리인데 이것을 사용하면 10배 정도 더 빠르게 연산이 가능하다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Notice: for 10x faster LSI support, please install &lt;a href=&quot;http://rb-gsl.rubyforge.org/&quot;&gt;http://rb-gsl.rubyforge.org/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;brew install gsl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gsl 설치가 완료되면 &lt;code&gt;brew link&lt;/code&gt;를 만들어서 &lt;code&gt;/usr/local&lt;/code&gt;에 추가한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;brew link gsl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;만약 권한 문제로 링크가 만들어지지 않으면 다음과 같이 권한을 재 설정하고 다시 &lt;code&gt;brew link gsl&lt;/code&gt;를 한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo chown -R `whoami` /usr/local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 &lt;strong&gt;&lt;em&gt;rb-gsl&lt;/em&gt;&lt;/strong&gt; 을 설치한다.
&lt;code&gt;
gem install rb-gsl
&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;이미 우리는 static websites를 만들 준비를 모두 마친것이다. jekyll 서버를 실행시켜보자. &lt;code&gt;--watch&lt;/code&gt; 옵션은 서버가 실행되어 있을때 파일이 변경되면 서버 재시작 없이 자동으로 변경된 것을 반영하기 위해서이다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;jekyll serve --watch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile1.uf.tistory.com/image/275ED83A53E4867B1F960C&quot; alt=&quot;jekyll serve&quot;&gt;&lt;/p&gt;

&lt;p&gt;Jekyll 서버가 정상적으로 시작되면 &lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt; 을 브라우저에서 확인한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cfile6.uf.tistory.com/image/23400A4053E4867B39483B&quot; alt=&quot;preview default&quot;&gt;&lt;/p&gt;

&lt;p&gt;서버가 실행되면 디렉토리에는 자동적으로 static page 들이 만들어진다. &lt;code&gt;tree&lt;/code&gt; 명령어를 사용해서 확인해보자&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;tree
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile9.uf.tistory.com/image/2644BA3F53E4867B07D5C0&quot; alt=&quot;tree after run&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;_post&lt;/code&gt; 디렉토리 안에 Markdown 으로 되어 있는 파일을 Jekyll이 자동으로 디렉토리를 만들면서 정적 HTML 파일을 생성한 것을 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;_config.yml-설정&quot;&gt;_config.yml 설정&lt;/h2&gt;

&lt;p&gt;Jekyll의 모든 설정은 &lt;code&gt;_confg.yml&lt;/code&gt; 파일에 저장한다. 이제 우리에 맞는 설정으로 바꾸어 보자. &lt;strong&gt;&lt;em&gt;Jeyll 2.0&lt;/em&gt;&lt;/strong&gt; 이상 버전 부터는 &lt;code&gt;pygments: true&lt;/code&gt; 속성이 변경되어 &lt;code&gt;highlighter&lt;/code&gt;로 이름이 바뀌었고 값으로 &lt;code&gt;pygments&lt;/code&gt;를 지정한다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;saltfactory.net&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;saltfactory@gmail.com&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;twitter_username&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;saltfactory&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;github_username&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;saltfactory&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;facebook_username&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;salthub&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;redcarpet&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;redcarpet&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;no_intra_emphasis&amp;quot;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;fenced_code_blocks&amp;quot;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;autolink&amp;quot;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;strikethrough&amp;quot;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;superscript&amp;quot;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;with_toc_data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;tables&amp;quot;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;highlighter&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;pygments&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;pretty&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;safe&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;lsi&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;jekyll-redirect-from&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;jemoji&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다시 Jekyll 서버 를 실행시켜보자. &lt;code&gt;_config.yml&lt;/code&gt; 파일은 &lt;code&gt;--watch&lt;/code&gt; 옵션이 적용되지 않기 때문에 이 파일을 수정하면 Jekyll 서버를 다시 실행시켜야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cfile26.uf.tistory.com/image/24172A3C53E4867B30F4B3&quot; alt=&quot;restart jekyll&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cfile22.uf.tistory.com/image/2425854153E4867B061EB3&quot; alt=&quot;post view&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;블로그-포스트-만들기&quot;&gt;블로그 포스트 만들기&lt;/h2&gt;

&lt;p&gt;Jekyll은 &lt;strong&gt;Markdown&lt;/strong&gt; 파일을 자동으로 정적 페이지로 만들어준다고 앞에서 이야기 했었다. &lt;code&gt;_post&lt;/code&gt; 디렉토리에 Markdown 파일을 하나 추가해 보자. 파일을 생성할 때 다음 규칙을 지킨다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;파일이름은 &lt;strong&gt;&lt;em&gt;YYY-MM-dd-{영문제목}.md&lt;/em&gt;&lt;/strong&gt; 형태로 만든다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/docs/frontmatter/&quot;&gt;Front Matter&lt;/a&gt;를 작성한다. Front Matter는 Jekyll이 정적 페이지를 만들때의 메타 정보를 기입하는 곳이다. 자세한 정보는 &lt;a href=&quot;http://jekyllrb.com/docs/frontmatter/&quot;&gt;링크&lt;/a&gt;를 참조한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;## Jekyll

![jekyll](http://wolfslittlestore.be/wp-content/uploads/2013/07/jekyll.png)

[Jekyll](http://jekyllrb.com/)은 static websites 생성 프레임워크이다. `Ruby`로 만들어진 이 것은 **Markdown** 파일을 `_posts` 디렉토리에 생성하는 것 만으로 멋진 static website를 만들어준다. Markdown을 사용하는 개발자에게 반가운 이야기일 것이다. 우리도 Markdown을 표준 document format으로 정하고 난 뒤에 Jekyll을 사용해서 Pages를 만들고 기존의 블로그를 이전하고 있다.ndex.html 파일을 git push 하는 것 만으로도 만들 수 있고, 다른 static website generator framework를 사용해도 된다. GitHub에서는 공식적인 Database를 지원하고 있지 않기 때문에 static website(HTML 파일)을 사용해야 한다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 &lt;code&gt;_post&lt;/code&gt; 디렉토리에 Markdown을 추가하면 Jekyll은 자동으로 새로운 정적 페이지를 만들고 적용한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cfile9.uf.tistory.com/image/242C733553E4867B249A75&quot; alt=&quot;new post&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cfile8.uf.tistory.com/image/2605303D53E4867B020FF6&quot; alt=&quot;example&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;github-에-적용하기&quot;&gt;GitHub 에 적용하기&lt;/h2&gt;

&lt;p&gt;이제 모든 Jekyll로 계정 페이지를 만드는 일이 모두 끝났다. 이제 GitHub 적용하기 위해서는 모든 파일을 GitHub의 저장소에 &lt;code&gt;push&lt;/code&gt; 하면 된다.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git add .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git commit -m &amp;quot;first import&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;마지막으로 GitHub에 계정 페이지가 만들어졌는지 확인해보자 &lt;a href=&quot;http://saltfactory.github.io&quot;&gt;http://saltfactory.github.io&lt;/a&gt; 를 브라우저에서 열어보면 우리가 로컬에서 &lt;code&gt;jekyll serve --watch&lt;/code&gt;로 확인한 페이지가 그대로 적용된 것을 보게 될 것이다.&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;GitHub Pages&lt;/em&gt;&lt;/strong&gt;는 프로젝트 사이트를 만들 수 있게 제공하는 GitHub의 서비스이다. GitHub는 이름 답게 모든 것을 &lt;code&gt;git&lt;/code&gt;로 처리를 한다. GitHub에 프로젝트 사이트를 만들기 위해서는 &lt;code&gt;gh-pages&lt;/code&gt; branch를 만들어서 정적 페이지를 만들어 &lt;code&gt;git push&lt;/code&gt;를 하면 된다. 이 때 정적 사이트를 만들기 위해서 &lt;strong&gt;&lt;em&gt;Jekyll&lt;/em&gt;&lt;/strong&gt;을 사용 할 수 있다. Jekyll은 Markdown으로 작성된 파일을 자동으로 정적 페이지를 만들어주는 static website generator framework이다. GitHub Pages는 프로젝트 페이지 뿐만 아니라 &lt;strong&gt;계정 페이지&lt;/strong&gt;를 만들 수 있는데 &lt;strong&gt;&lt;em&gt;{계정이름}.github.io&lt;/em&gt;&lt;/strong&gt;라는 리파지토리를 생성하고 &lt;code&gt;master&lt;/code&gt; branch에 정적 파일을 &lt;code&gt;git push&lt;/code&gt;하여 만들 수 있다.&lt;/p&gt;

&lt;p&gt;우리는 웹 사이트를 제작하기 위해서 비산 웹 서비스 환경을 구축하거나 호스팅 서비스를 사용해야하는데 GitHub Pages를 사용하면 무료로 자신만의 사이트를 구축할 수 있으며 &lt;code&gt;git&lt;/code&gt;를 사용하여 컨텐츠 이력을 관리하고 archive할 수 있다. Jekyll을 사용하여 복잡하지 않는 방법으로 Markdown 형식으로 작성한 글을 블로그나 웹 서비스 형태로 만들어 낼 수도 있다. 이 포스팅에서는 GitHub Pages를 생성하는 방법과 Jekyll을 사용하여 정적 사이트를 만들어서 GitHub Pages에 적용하는 방법을 살펴보았다. Jekyll이 Ruby 기반으로 만들어져서 설치하는데 약간의 복잡함이 있지만 이 과정을 지나면 간편하게 나만의 웹 서비스를 마들어 낼 수 있을 것이다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://rvm.io/&quot;&gt;https://rvm.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/using-jekyll-with-pages&quot;&gt;https://help.github.com/articles/using-jekyll-with-pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pages.github.com/versions/&quot;&gt;https://pages.github.com/versions/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.saltfactory.net/search/rvm&quot;&gt;http://blog.saltfactory.net/search/rvm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5528839/why-does-installing-nokogiri-on-mac-os-fail-with-libiconv-is-missing&quot;&gt;http://stackoverflow.com/questions/5528839/why-does-installing-nokogiri-on-mac-os-fail-with-libiconv-is-missing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jekyll/jekyll/issues/652&quot;&gt;https://github.com/jekyll/jekyll/issues/652&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;연구원-소개&quot;&gt;연구원 소개&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;작성자 : &lt;a href=&quot;http://about.me/saltfactory&quot;&gt;송성광&lt;/a&gt; 개발 연구원&lt;/li&gt;
&lt;li&gt;이메일 : &lt;a href=&quot;mailto:saltfactory@gmail.com&quot;&gt;saltfactory@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;트위터 : &lt;a href=&quot;https://twitter.com/saltfactory&quot;&gt;@saltfactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;페이스북 : &lt;a href=&quot;https://facebook.com/salthub&quot;&gt;https://facebook.com/salthub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;연구소 : &lt;a href=&quot;http://www.hibrain.net&quot;&gt;하이브레인넷&lt;/a&gt; 부설연구소&lt;/li&gt;
&lt;li&gt;연구실 : &lt;a href=&quot;http://dblab.changwon.ac.kr&quot;&gt;창원대학교 데이터베이스 연구실&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 08 Aug 2014 00:00:00 +0900</pubDate>
        <link>/series/jekyll/upgrade-github-pages-dependency-versions.html</link>
        <guid isPermaLink="true">/series/jekyll/upgrade-github-pages-dependency-versions.html</guid>
        
        <category>jekyll</category>
        
        <category>git</category>
        
        <category>ruby</category>
        
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
